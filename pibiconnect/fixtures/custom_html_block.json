[
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<div id=\"custom-block\">\n  <button id=\"conn-btn\" class=\"btn btn-sm btn-primary\">Connect</button>\n  <button id=\"disconnect-btn\" class=\"btn btn-sm btn-primary\">Disconnect</button>\n  <div id=\"mqtt-messages\" class=\"mt-3\">\n    <h3>MQTT Messages</h3>\n    <div id=\"messages-container\"></div>\n  </div>\n  <div id=\"subscriber-status\"></div>\n</div>",
  "modified": "2024-10-22 17:29:59.516624",
  "name": "CN MQTT",
  "private": 0,
  "roles": [
   {
    "parent": "CN MQTT",
    "parentfield": "roles",
    "parenttype": "Custom HTML Block",
    "role": "MIoT Administrator"
   }
  ],
  "script": "const messagesContainer = root_element.querySelector('#messages-container');\nconst subscriberStatus = root_element.querySelector('#subscriber-status');\nconst connectBtn = root_element.querySelector('#conn-btn');\nconst disconnectBtn = root_element.querySelector('#disconnect-btn');\n\nfunction displayMessage(topic, message) {\n  const messageElement = document.createElement('div');\n  messageElement.classList.add('message');\n\n  // Check if the message is a JSON string and try to parse it\n  let formattedMessage;\n  try {\n    const jsonMessage = JSON.parse(message);\n    formattedMessage = `<pre class=\"mt-1\">${JSON.stringify(jsonMessage, null, 2)}</pre>`;\n  } catch (e) {\n    // If parsing fails, use the raw message\n    formattedMessage = message;\n  }\n\n  messageElement.innerHTML = `<strong>${topic}:</strong> ${formattedMessage}`;\n  messagesContainer.appendChild(messageElement);\n}\n\nconnectBtn.onclick = function() {\n  console.log(\"Connect button clicked\");\n  frappe.call({\n    method: 'pibiconnect.pibiconnect.mqtt_client.start_mqtt',\n    callback: function(response) {\n      if (response && response.message) {\n        console.log(`MQTT connection started: ${response.message.status}`);\n        frappe.show_alert(`MQTT connection started: ${response.message.status} with job ID: ${response.message.job_id}`);\n        updateStatus();\n      } else {\n        console.error('Failed to start MQTT connection', response);\n        frappe.show_alert('Failed to start MQTT connection');\n      }\n    },\n    error: function(error) {\n      console.error('Failed to start MQTT connection', error);\n      frappe.show_alert('Failed to start MQTT connection');\n    }\n  });\n};\n\ndisconnectBtn.onclick = function() {\n  console.log(\"Disconnect button clicked\");\n  frappe.call({\n    method: 'pibiconnect.pibiconnect.mqtt_client.stop_mqtt',\n    args: {\n      job_name: 'mqtt_start_job'\n    },\n    callback: function(response) {\n      if (response && response.message) {\n        console.log(`MQTT connection stopped: ${response.message.status}`);\n        frappe.show_alert(`MQTT connection stopped: ${response.message.status}`);\n        updateStatus();\n      } else {\n        console.error('Failed to stop MQTT connection', response);\n        frappe.show_alert('Failed to stop MQTT connection');\n      }\n    },\n    error: function(error) {\n      console.error('Failed to stop MQTT connection', error);\n      frappe.show_alert('Failed to stop MQTT connection');\n    }\n  });\n};\n\nfunction updateStatus() {\n  frappe.call({\n    method: 'pibiconnect.pibiconnect.mqtt_client.status',\n    callback: function(response) {\n      if (response && response.message) {\n        const status = response.message.status;\n        subscriberStatus.innerText = `Subscriber Status: ${status}`;\n      } else {\n        console.error('Failed to get MQTT status', response);\n        frappe.show_alert('Failed to get MQTT status');\n      }\n    },\n    error: function(error) {\n      console.error('Failed to get MQTT status', error);\n      frappe.show_alert('Failed to get MQTT status');\n    }\n  });\n}\n\n// Ensure Frappe socket.io is loaded and initialized\nif (typeof frappe !== 'undefined' && frappe.socketio) {\n  const socket = frappe.socketio.socket;\n\n  if (socket) {\n    // Debug: Check if socket connection is established\n    console.log('Socket connection status:', socket.connected);\n\n    socket.on('connect', function() {\n      console.log('Connected to Frappe socket.io server');\n    });\n\n    socket.on('mqtt_message', function(data) {\n      console.log('MQTT message received:', data); // Debugging line\n      displayMessage(data.topic, data.payload);\n    });\n\n    socket.on('disconnect', function() {\n      console.log('Disconnected from Frappe socket.io server');\n    });\n\n    socket.on('connect_error', function(error) {\n      console.error('Connection error:', error);\n    });\n\n    socket.on('reconnect', function(attemptNumber) {\n      console.log('Reconnected to Frappe socket.io server, attempt:', attemptNumber);\n    });\n  } else {\n    console.error('Frappe socket.io socket is not defined');\n  }\n} else {\n  console.error('Frappe socket.io is not available');\n}\n\n// Automatically update status on initialization\nupdateStatus();\n",
  "style": "#custom-block {\n  position: relative;\n}\n#messages-container {\n  max-width: 100%;\n  max-height: 800px;\n  height: 800px;\n  overflow-y: auto;\n  padding: 3px;\n  margin: 0;\n  font-size: 9pt;\n  line-height: 1;\n}\n@media only screen and (max-width: 600px) {\n  #messages-container {\n    max-height: 445px; /* Set max height for smartphones */\n    height: 445px;\n    width: 100%; /* Ensure it uses full width on small screens */\n  }\n}\n.message pre {\n  background-color: #f5f5f5;\n  padding: 3px;\n  border-radius: 6px;\n  overflow-x: auto;\n}\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<div id=\"custom-block\">\n  <button id=\"conn-btn\" class=\"btn btn-sm btn-primary\">Connect</button>\n  <button id=\"disconnect-btn\" class=\"btn btn-sm btn-primary\">Disconnect</button>\n  <div id=\"mqtt-messages\" class=\"mt-3\">\n    <h3>MQTT Messages</h3>\n    <div id=\"messages-container\"></div>\n  </div>\n  <div id=\"subscriber-status\"></div>\n</div>",
  "modified": "2024-05-27 22:33:17.496420",
  "name": "CN MQTT Explorer",
  "private": 0,
  "roles": [],
  "script": "const messagesContainer = root_element.querySelector('#messages-container');\nconst subscriberStatus = root_element.querySelector('#subscriber-status');\nconst connectBtn = root_element.querySelector('#conn-btn');\nconst disconnectBtn = root_element.querySelector('#disconnect-btn');\n\nfunction displayMessage(topic, message) {\n  const messageElement = document.createElement('div');\n  messageElement.classList.add('message');\n\n  let formattedMessage;\n  try {\n    const jsonMessage = JSON.parse(message);\n    formattedMessage = `<pre class=\"mt-1\">${JSON.stringify(jsonMessage, null, 2)}</pre>`;\n  } catch (e) {\n    formattedMessage = message;\n  }\n\n  messageElement.innerHTML = `<strong>${topic}:</strong> ${formattedMessage}`;\n  messagesContainer.appendChild(messageElement);\n}\n\nconnectBtn.onclick = function() {\n  const dialog = new frappe.ui.Dialog({\n    title: 'MQTT Connection',\n    size: 'large',\n    fields: [\n      {'fieldname': 'name', 'fieldtype': 'Data', 'label': 'Name', 'reqd': 1},\n      {'fieldname': 'host', 'fieldtype': 'Data', 'label': 'Host', 'reqd': 1},\n      {'fieldname': 'username', 'fieldtype': 'Data', 'label': 'Username',},\n      {'fieldname': 'validate_cert', 'fieldtype': 'Check', 'label': 'Validate Certificate', 'default': 0},\n      {'fieldname': 'encryption', 'fieldtype': 'Check', 'label': 'Encryption (TLS)', 'default': 0},\n      {'fieldname': 'cb1', 'fieldtype': 'Column Break'},\n      {'fieldname': 'protocol', 'fieldtype': 'Select', 'label': 'Protocol', 'options': 'mqtt://\\nmqtts://', 'reqd': 1},\n      {'fieldname': 'port', 'fieldtype': 'Int', 'label': 'Port', 'reqd': 1},\n      {'fieldname': 'password', 'fieldtype': 'Password', 'label': 'Password'},\n      {'fieldname': 'client_id', 'fieldtype': 'Data', 'label': 'MQTT Client ID', 'default': `mqtt-explorer-${Math.random().toString(16).substr(2, 8)}`, 'read_only': 1},\n      {\n        'fieldname': 'advanced_section',\n        'fieldtype': 'Section Break',\n        'label': 'Advanced Settings',\n        'collapsible': 1,\n      },\n      {\n        fieldname: 'topics_table',\n        fieldtype: 'Table',\n        label: 'Topics',\n        cannot_add_rows: false,\n        cannot_delete_rows: false,\n        in_place_edit: true,\n        data: [\n          { topic: '#', qos: '0' },\n          { topic: '$SYS/#', qos: '0' }\n        ],\n        fields: [\n          {\n            fieldtype: 'Data',\n            fieldname: 'topic',\n            label: 'Topic',\n            in_list_view: 1,\n            read_only: 0\n          },\n          {\n            fieldtype: 'Select',\n            fieldname: 'qos',\n            label: 'QoS',\n            options: '0\\n1\\n2',\n            in_list_view: 1,\n            read_only: 0\n          }\n        ]\n      },\n      {\n        'fieldname': 'cert_section',\n        'fieldtype': 'Section Break',\n        'label': 'Certificates',\n        'collapsible': 1,\n      },\n      {'fieldname': 'ca_cert', 'fieldtype': 'Attach', 'label': 'CA Certificate (ca.crt)', 'column': 1},\n      {'fieldname': 'cb5', 'fieldtype': 'Column Break'},\n      {'fieldname': 'client_cert', 'fieldtype': 'Attach', 'label': 'Client Certificate (client.crt)', 'column': 1},\n      {'fieldname': 'cb6', 'fieldtype': 'Column Break'},\n      {'fieldname': 'client_key', 'fieldtype': 'Attach', 'label': 'Client Key (client.key)', 'column': 1}\n    ],\n    primary_action_label: 'Connect',\n    primary_action(values) {\n      console.log(\"Connect button clicked with values\", values);\n      \n      frappe.call({\n        method: 'pibiconnect.pibiconnect.mqtt_client.start_mqtt_args',\n        args: {\n          data: values\n        },\n        callback: function(response) {\n          if (response && response.message) {\n            console.log(`MQTT connection started: ${response.message.status}`);\n            frappe.show_alert(`MQTT connection started: ${response.message.status} with job ID: ${response.message.job_id}`);\n            updateStatus();\n            dialog.hide();\n          } else {\n            console.error('Failed to start MQTT connection', response);\n            frappe.show_alert('Failed to start MQTT connection');\n          }\n        },\n        error: function(error) {\n          console.error('Failed to start MQTT connection', error);\n          frappe.show_alert('Failed to start MQTT connection');\n        }\n      });\n    }\n  });\n\n  dialog.show();\n};\n\ndisconnectBtn.onclick = function() {\n  console.log(\"Disconnect button clicked\");\n  frappe.call({\n    method: 'pibiconnect.pibiconnect.mqtt_client.stop_mqtt',\n    args: {\n      job_name: 'mqtt_start_job'\n    },\n    callback: function(response) {\n      if (response && response.message) {\n        console.log(`MQTT connection stopped: ${response.message.status}`);\n        frappe.show_alert(`MQTT connection stopped: ${response.message.status}`);\n        updateStatus();\n      } else {\n        console.error('Failed to stop MQTT connection', response);\n        frappe.show_alert('Failed to stop MQTT connection');\n      }\n    },\n    error: function(error) {\n      console.error('Failed to stop MQTT connection', error);\n      frappe.show_alert('Failed to stop MQTT connection');\n    }\n  });\n};\n\nfunction updateStatus() {\n  frappe.call({\n    method: 'pibiconnect.pibiconnect.mqtt_client.status',\n    callback: function(response) {\n      if (response && response.message) {\n        const status = response.message.status;\n        subscriberStatus.innerText = `Subscriber Status: ${status}`;\n      } else {\n        console.error('Failed to get MQTT status', response);\n        frappe.show_alert('Failed to get MQTT status');\n      }\n    },\n    error: function(error) {\n      console.error('Failed to get MQTT status', error);\n      frappe.show_alert('Failed to get MQTT status');\n    }\n  });\n}\n\nif (typeof frappe !== 'undefined' && frappe.socketio) {\n  const socket = frappe.socketio.socket;\n\n  if (socket) {\n    console.log('Socket connection status:', socket.connected);\n\n    socket.on('connect', function() {\n      console.log('Connected to Frappe socket.io server');\n    });\n\n    socket.on('mqtt_message', function(data) {\n      console.log('MQTT message received:', data);\n      displayMessage(data.topic, data.payload);\n    });\n\n    socket.on('disconnect', function() {\n      console.log('Disconnected from Frappe socket.io server');\n    });\n\n    socket.on('connect_error', function(error) {\n      console.error('Connection error:', error);\n    });\n\n    socket.on('reconnect', function(attemptNumber) {\n      console.log('Reconnected to Frappe socket.io server, attempt:', attemptNumber);\n    });\n  } else {\n    console.error('Frappe socket.io socket is not defined');\n  }\n} else {\n  console.error('Frappe socket.io is not available');\n}\n\nupdateStatus();\n",
  "style": "#custom-block {\n  position: relative;\n}\n#messages-container {\n  max-width: 100%;\n  max-height: 545px;\n  height: 768px;\n  overflow-y: auto;\n  padding: 3px;\n  margin: 0;\n  font-size: 9pt;\n  line-height: 1;\n}\n.message pre {\n  background-color: #f5f5f5;\n  padding: 3px;\n  border-radius: 6px;\n  overflow-x: auto;\n}\n.control-label,\n.form-group {\n  margin-bottom: 1px !important;\n}"
 },
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<link rel=\"stylesheet\" href=\"/assets/pibiconnect/css/leaflet.css\">\n<link rel=\"stylesheet\" href=\"/assets/pibiconnect/css/MarkerCluster.css\" />\n<link rel=\"stylesheet\" href=\"/assets/pibiconnect/css/MarkerCluster.Default.css\" />\n<div id=\"sensor-management-interface\" class=\"work-container\">\n  <div class=\"work-content\">\n    <div class=\"card works\" id=\"works\">\n      <div class=\"tab statements\">\n        <!-- Sidebar toggle button -->\n        <button class=\"tablinks hidden\" id=\"toggleSidebarButton\" title=\"Toggle Sidebar\">\n          <div class=\"icon-container\">\n            <img class=\"icon-img\" src=\"/assets/pibiconnect/images/menu-lateral.svg\"/>\n            <span class=\"icon-label\">Menú</span>\n          </div>\n        </button>\n        <!-- Existing tabs -->\n        <button class=\"tablinks\" data-tabname=\"General\" id=\"general\" title=\"General\">\n          <div class=\"icon-container\">\n            <!--<i class=\"fa fa-home\"></i>-->\n            <img class=\"icon-img\" src=\"/assets/pibiconnect/images/sensor-de-humedad.svg\"/>\n            <span class=\"icon-label\">Sensores</span>\n          </div>\n        </button>\n        <button class=\"tablinks\" data-tabname=\"LiveData\" id=\"liveData\" title=\"Live Data\">\n          <div class=\"icon-container\">\n            <img class=\"icon-img\" src=\"/assets/pibiconnect/images/analisis.svg\" />\n            <span class=\"icon-label\">Gráficas</span>\n          </div>\n        </button>\n        <button class=\"tablinks hidden\" data-tabname=\"Reports\" id=\"reports\" title=\"Reports\">\n          <div class=\"icon-container\">\n            <img class=\"icon-img\" src=\"/assets/pibiconnect/images/advertencia.svg\"/>\n            <span class=\"icon-label\">Info</span>\n          </div>\n        </button>\n        <button class=\"tablinks\" data-tabname=\"Setup\" id=\"setup\" title=\"Setup\">\n          <div class=\"icon-container\">\n            <img class=\"icon-img\" src=\"/assets/pibiconnect/images/ajustes.svg\"/>\n            <span class=\"icon-label\">Ajustes</span>\n          </div>\n        </button>\n        <button class=\"tablinks\" data-tabname=\"Location\" id=\"location\" title=\"Location\">\n          <div class=\"icon-container\">\n            <img class=\"icon-img\" src=\"/assets/pibiconnect/images/ruta.svg\"/>\n            <span class=\"icon-label\">Posición</span>\n          </div>\n        </button>\n      </div>\n      <div id=\"General\" class=\"tabcontent active\">\n        <h3>Gestión de Sensores</h3>\n        <div class=\"filters\">\n          <div class=\"filter-group\">\n            <label for=\"locationFilter\">Lugar</label>\n            <select id=\"locationFilter\" class=\"filter-dropdown\">\n              <option value=\"all\">Todos</option>\n            </select>\n          </div>\n          <div class=\"filter-group\">\n            <label for=\"typeFilter\">Tipo</label>\n            <select id=\"typeFilter\" class=\"filter-dropdown\">\n              <option value=\"all\">Todos</option>\n            </select>\n          </div>\n        </div>\n        <div id=\"deviceList\" class=\"device-list\"></div>\n      </div>\n      <div id=\"LiveData\" class=\"tabcontent\">\n        <h3>Datos en Tiempo Real</h3>\n        <div class=\"filter-group\">\n          <label for=\"deviceFilter\">Dispositivo</label>\n          <select id=\"deviceFilter\" class=\"filter-dropdown\">\n            <option value=\"all\">Todos</option>\n          </select>\n        </div>\n        <div class=\"live-data-container\">\n          <div id=\"liveChart\" class=\"chart-container\" style=\"width: 100%; height: 100%;\"></div>\n          <div id=\"messages-container\" class=\"messages-container\"></div>\n        </div>\n      </div>\n      <div id=\"Reports\" class=\"tabcontent\">\n        <h3>Información de Sensores</h3>\n        <div id=\"reportsList\"></div>\n      </div>\n      <div id=\"Setup\" class=\"tabcontent\">\n        <h3>Configuración</h3>\n        <div id=\"setupList\">\n        </div>\n      </div>\n      <div id=\"Location\" class=\"tabcontent\">\n        <h3>Localizaciones</h3>\n        <div id=\"map\"></div>\n      </div>\n    </div>\n  </div>\n</div>",
  "modified": "2024-11-15 18:33:52.392618",
  "name": "CN HydroSentinel",
  "private": 0,
  "roles": [
   {
    "parent": "CN HydroSentinel",
    "parentfield": "roles",
    "parenttype": "Custom HTML Block",
    "role": "MIoT Administrator"
   },
   {
    "parent": "CN HydroSentinel",
    "parentfield": "roles",
    "parenttype": "Custom HTML Block",
    "role": "MIoT User"
   }
  ],
  "script": "// Declare globals first\nlet chart = null;\nlet map = null;\nlet markersCluster = null;\nlet deviceAlertThresholds = {};\nlet currentDeviceData = {};\nlet maxValue = 0;\nlet deviceInfoInitialized = false;\nlet refreshInterval = null;\nlet lastLoadTime = 0;\nconst REFRESH_INTERVAL = 60000; // 60 seconds\nconst loadInterval = 60000; // 1 minute\nlet deviceSpans = {};\n//\n/************************/\n/* Initialization       */\n/************************/\nfunction initializeInterface() {\n  setupTabNavigation();\n  initializeFilters();\n  initializeLiveDataChart();\n  initializeMap();\n  fullScreen();\n\n  const urlParams = new URLSearchParams(window.location.search);\n  const tabToOpen = urlParams.get('tab');\n\n  if (tabToOpen) {\n    openTab(null, tabToOpen);\n  }\n}\n\nfunction setupTabNavigation() {\n  const tabs = root_element.querySelectorAll('.tablinks:not(#toggleSidebarButton)');\n  if (tabs.length === 0) {\n    console.error('No tab elements found');\n    return;\n  }\n  \n  tabs.forEach(tab => {\n    tab.addEventListener('click', function (event) {\n      const tabName = this.getAttribute('data-tabname');\n      openTab(event, tabName);\n      if (tabName === 'Location') {\n        setTimeout(function () {\n          initializeMap();\n        }, 100);\n      }\n    });\n  });\n\n  const defaultTab = root_element.querySelector('#general');\n  if (defaultTab) {\n    defaultTab.click();\n  } else {\n    console.error('Default tab not found');\n  }\n\n  window.addEventListener('resize', function () {\n    const activeTab = root_element.querySelector('.tablinks.active');\n    if (activeTab && activeTab.getAttribute('data-tabname') === 'Location') {\n      updateMap();\n    }\n  });\n}\n\nfunction openTab(evt, tabName) {\n  const tabcontent = root_element.querySelectorAll(\".tabcontent\");\n  tabcontent.forEach(tab => {\n    tab.style.display = \"none\";\n  });\n\n  const tablinks = root_element.querySelectorAll(\".tablinks:not(#toggleSidebarButton)\");\n  tablinks.forEach(tab => {\n    tab.classList.remove(\"active\");\n  });\n\n  const selectedTab = root_element.querySelector(`#${tabName}`);\n  if (selectedTab) {\n    selectedTab.style.display = \"block\";\n  } else {\n    console.error(`Tab content for ${tabName} not found`);\n  }\n\n  if (evt && evt.currentTarget) {\n    evt.currentTarget.classList.add(\"active\");\n  }\n\n  if (tabName === 'General') {\n    stopMQTTConnection();\n    startDeviceRefresh();\n  } else {\n    stopDeviceRefresh();\n\n    if (tabName === 'LiveData') {\n      deviceInfoInitialized = false;\n      startMQTTConnection();\n    } else if (tabName === 'Reports') {\n      stopMQTTConnection();\n      loadReports();\n    } else if (tabName === 'Location') {\n      stopMQTTConnection();\n      setTimeout(function () {\n        initializeMap();\n        updateMap();\n      }, 100);\n    } else if (tabName === 'Setup') {\n      stopMQTTConnection();\n      window.location.href = '/app/pibiconnect-settings';\n    }\n  }\n}\n\nfunction initializeFilters() {\n  loadFilterOptions('location');\n  loadFilterOptions('type');\n\n  const locationFilter = root_element.querySelector('#locationFilter');\n  const typeFilter = root_element.querySelector('#typeFilter');\n\n  if (locationFilter) {\n    locationFilter.addEventListener('change', function () {\n      loadDevices();\n    });\n  }\n\n  if (typeFilter) {\n    typeFilter.addEventListener('change', function () {\n      loadDevices();\n    });\n  }\n}\n\nfunction loadFilterOptions(filterType) {\n  let field = '';\n  if (filterType === 'location') {\n    field = 'place_name';\n  } else if (filterType === 'type') {\n    field = 'sensor_type';\n  } else if (filterType === 'device') {\n    field = 'name';\n  }\n\n  frappe.call({\n    method: 'frappe.client.get_list',\n    args: {\n      doctype: 'CN Device',\n      fields: [field],\n      distinct: true\n    },\n    callback: function (response) {\n      if (response.message) {\n        const filterElement = root_element.querySelector(`#${filterType}Filter`);\n        filterElement.innerHTML = '<option value=\"all\">Todos</option>';\n        const uniqueValues = new Set();\n        response.message.forEach(item => {\n          if (item[field]) {\n            uniqueValues.add(item[field]);\n          }\n        });\n        uniqueValues.forEach(value => {\n          filterElement.innerHTML += `<option value=\"${value}\">${value}</option>`;\n        });\n      }\n    }\n  });\n}\n\nfunction loadReports() {\n  const reportsList = root_element.querySelector('#reportsList');\n  if (reportsList) {\n    reportsList.innerHTML = `\n      <ul>\n        <li>Reports</li>\n      </ul>\n    `;\n  }\n}\n//\nasync function fetchDeviceSpans(deviceName) {\n  try {\n    const response = await frappe.call({\n      method: 'frappe.client.get_list',\n      args: {\n        doctype: 'CN Span',\n        fields: ['sensor_var', 'span_factor', 'lower_span', 'higher_span', 'scale'],\n        filters: [['device', '=', deviceName]]\n      }\n    });\n    \n    if (response.message) {\n      deviceSpans[deviceName] = {};\n      response.message.forEach(span => {\n        deviceSpans[deviceName][span.sensor_var] = span;\n      });\n    }\n  } catch (error) {\n    console.error('Error fetching device spans:', error);\n  }\n}\n// Initial require and initialization\nfrappe.require([\n  \"/assets/pibiconnect/js/echarts.min.js\",\n  \"/assets/pibiconnect/js/leaflet.js\",\n  \"/assets/pibiconnect/js/leaflet.markercluster-src.js\"\n], function () {\n  initializeInterface();\n});\n//\n/*****************/\n/* MQTT          */\n/*****************/\nfunction startMQTTConnection() {\n  frappe.call({\n    method: 'pibiconnect.pibiconnect.mqtt_client.start_mqtt',\n    callback: function (response) {\n      if (response && response.message) {\n        frappe.show_alert(`MQTT connection started: ${response.message.status} with job ID: ${response.message.job_id}`);\n\n        // Reconnect socket if it's disconnected\n        if (frappe.socketio && frappe.socketio.socket && !frappe.socketio.socket.connected) {\n          frappe.socketio.socket.connect();\n        }\n      } else {\n        console.error('Failed to start MQTT connection', response);\n        frappe.show_alert('Failed to start MQTT connection');\n      }\n    },\n    error: function (error) {\n      console.error('Failed to start MQTT connection', error);\n      frappe.show_alert('Failed to start MQTT connection');\n    }\n  });\n}\n\nfunction stopMQTTConnection() {\n  frappe.call({\n    method: 'pibiconnect.pibiconnect.mqtt_client.stop_mqtt',\n    args: {\n      job_name: 'mqtt_start_job'\n    },\n    callback: function (response) {\n      if (response && response.message) {\n        frappe.show_alert(`MQTT connection stopped: ${response.message.status}`);\n\n        // Disconnect the socket after stopping the MQTT connection\n        if (frappe.socketio && frappe.socketio.socket) {\n          frappe.socketio.socket.disconnect();\n        }\n      } else {\n        console.error('Failed to stop MQTT connection', response);\n        frappe.show_alert('Failed to stop MQTT connection');\n      }\n    },\n    error: function (error) {\n      console.error('Failed to stop MQTT connection', error);\n      frappe.show_alert('Failed to stop MQTT connection');\n    }\n  });\n}\n\nfunction displayMessage(topic, message) {\n  let parsedMessage;\n  try {\n    const jsonMessage = JSON.parse(message);\n    parsedMessage = jsonMessage;\n  } catch (e) {\n    parsedMessage = { reading: { value: parseFloat(message), data_date: new Date().toLocaleTimeString() } };\n  }\n\n  if (!parsedMessage.reading) return;\n\n  const selectedDevice = localStorage.getItem('selectedDevice') || 'all';\n  if (selectedDevice === 'all') {\n    const allDevices = JSON.parse(localStorage.getItem('allDevices')) || [];\n    for (const device of allDevices) {\n      if (topic.includes(device.hostname)) {\n        transformAndProcessMessage(parsedMessage, topic, device.name);\n      }\n    }\n  } else {\n    const selectedHostname = localStorage.getItem('selectedHostname');\n    if (selectedHostname && !topic.includes(selectedHostname)) {\n      return;\n    }\n    transformAndProcessMessage(parsedMessage, topic, selectedDevice);\n  }\n}\n//\nfunction updateDataCard(reading, deviceName) {\n  const deviceInfo = root_element.querySelector('#deviceInfo');\n  const sensorValues = root_element.querySelector('#sensorValues');\n\n  if (!deviceInfo || !sensorValues) return;\n\n  // Initialize device info only if empty and we have device data\n  if (!deviceInfoInitialized && currentDeviceData) {\n    deviceInfoInitialized = true;\n    deviceInfo.innerHTML = '';\n\n    let latitude = 'N/A';\n    let longitude = 'N/A';\n\n    if (currentDeviceData.location) {\n      try {\n        const locationData = JSON.parse(currentDeviceData.location);\n        if (\n          locationData.type === 'FeatureCollection' &&\n          locationData.features &&\n          locationData.features.length > 0 &&\n          locationData.features[0].geometry &&\n          locationData.features[0].geometry.type === 'Point'\n        ) {\n          const [lon, lat] = locationData.features[0].geometry.coordinates;\n          latitude = lat.toFixed(6);\n          longitude = lon.toFixed(6);\n        }\n      } catch (error) {\n        console.error('Error parsing location:', error);\n      }\n    }\n\n    const today = new Date().toISOString().split('T')[0];\n\n    frappe.db.get_value('CN Device Log',\n      {\n        'device': currentDeviceData.name,\n        'date': today\n      },\n      'name'\n    ).then(r => {\n      let deviceLogLink;\n      if (r.message && r.message.name) {\n        deviceLogLink = `/app/cn-device-log/${r.message.name}`;\n      } else {\n        deviceLogLink = `/app/cn-device-log?filters={\"device\":[\"=\",\"${encodeURIComponent(currentDeviceData.name)}\"],\"date\":[\"=\",\"${today}\"]}`;\n      }\n\n      const generalInfo = document.createElement('div');\n      generalInfo.classList.add('general-info');\n      generalInfo.innerHTML = `\n        <div class=\"info-row device-name\">\n          <a href=\"${deviceLogLink}\" target=\"_blank\">${currentDeviceData.name}</a>\n        </div>\n        <div class=\"info-row\">\n          <strong>Latitud:</strong> ${latitude}\n        </div>\n        <div class=\"info-row\">\n          <strong>Longitud:</strong> ${longitude}\n        </div>\n      `;\n      deviceInfo.innerHTML = '';\n      deviceInfo.appendChild(generalInfo);\n    });\n  }\n\n  // Update sensor values only if we have new readings\n  if (reading && Object.keys(reading).length > 0) {\n    const tempContainer = document.createElement('div');\n    const currentTime = new Date().toLocaleTimeString();\n\n    for (const [key, value] of Object.entries(reading)) {\n      if (key !== 'data_date' && key !== 'record') {\n        const thresholds = deviceAlertThresholds[key] || {};\n        const status = getValueStatus(value, thresholds);\n        const formattedValue = typeof value === 'number' ? value.toFixed(2) : value;\n\n        const sensorValueElement = document.createElement('div');\n        sensorValueElement.classList.add('sensor-data-item');\n        sensorValueElement.dataset.sensorVar = key;\n        sensorValueElement.dataset.value = formattedValue;\n        sensorValueElement.dataset.status = status;\n\n        sensorValueElement.innerHTML = `\n          <div class=\"sensor-icon\">\n            <i class=\"fa fa-${getIconForSensorVar(key)}\"></i>\n          </div>\n          <div class=\"sensor-info\">\n            <div class=\"sensor-main-info\">\n              <div class=\"sensor-header\">\n                <span class=\"sensor-name\">${key}</span>\n                <span class=\"sensor-value\">\n                  <span class=\"status-indicator status-${status}\"></span>\n                  <span class=\"value-text\">${formattedValue}</span>\n                  <span class=\"value-unit\">${thresholds.uom || ''}</span>\n                </span>\n              </div>\n            </div>\n            <div class=\"sensor-status-row\">\n              <span class=\"status-text\">${isInAlert(value, thresholds) ? 'En Alerta' : 'Normal'}</span>\n              <div class=\"sensor-status-circle status-circle-${isInAlert(value, thresholds) ? 'alert' : 'normal'} mb-3\"></div>\n            </div>\n          </div>\n        `;\n\n        tempContainer.appendChild(sensorValueElement);\n      }\n    }\n\n    if (tempContainer.children.length > 0) {\n      sensorValues.innerHTML = tempContainer.innerHTML;\n    }\n  }\n}\n//\nfunction transformAndProcessMessage(parsedMessage, topic, deviceName) {\n  const transformedMessage = {\n    ...parsedMessage,\n    reading: { ...parsedMessage.reading }\n  };\n\n  const deviceSpan = deviceSpans[deviceName];\n  if (deviceSpan) {\n    for (const [key, value] of Object.entries(parsedMessage.reading)) {\n      if (key !== 'data_date' && key !== 'record' && deviceSpan[key]) {\n        const span = deviceSpan[key];\n        const numValue = parseFloat(value);\n        \n        if (!isNaN(numValue)) {\n          if (span.lower_span !== null && span.higher_span !== null) {\n            // Apply span transformation\n            transformedMessage.reading[key] = span.lower_span + (numValue * span.span_factor);\n          }\n        }\n      }\n    }\n  }\n\n  processMessage(transformedMessage, topic, deviceName);\n}\n//\nfunction processMessage(parsedMessage, topic, deviceName) {\n  /*console.log(\"Processing message:\", {\n    message: parsedMessage,\n    topic: topic,\n    deviceName: deviceName\n  });*/\n  \n  updateLiveDataChart(parsedMessage, deviceName);\n  updateDataCard(parsedMessage.reading, deviceName);\n\n  // Messages container update\n  const messagesContainer = root_element.querySelector('#messages-container');\n  if (messagesContainer) {\n    const messageElement = document.createElement('div');\n    messageElement.classList.add('message-item');\n\n    const readings = Object.entries(parsedMessage.reading).map(([key, value]) => {\n      return `<span><strong>${key}:</strong> ${value} </span>`;\n    }).join('');\n\n    messageElement.innerHTML = `\n      <div style=\"color: #4682b4;\"><strong>Device:</strong> ${deviceName}</div>\n      <div style=\"color: #4682b4;\"><strong>Topic:</strong> ${topic}</div>\n      ${readings}\n    `;\n    messagesContainer.appendChild(messageElement);\n\n    if (window.innerWidth > 768) {\n      messageElement.scrollIntoView({ behavior: 'smooth', block: 'end' });\n    }\n  }\n}\n\n/*****************/\n/* Devices       */\n/*****************/\nfunction loadDevices() {\n  const locationFilter = root_element.querySelector('#locationFilter').value;\n  const typeFilter = root_element.querySelector('#typeFilter').value;\n\n  let filters = [];\n\n  if (locationFilter && locationFilter !== 'all') {\n    filters.push(['place_name', '=', locationFilter]);\n  }\n\n  if (typeFilter && typeFilter !== 'all') {\n    filters.push(['sensor_type', '=', typeFilter]);\n  }\n\n  frappe.call({\n    method: 'frappe.client.get_list',\n    args: {\n      doctype: 'CN Device',\n      fields: ['*'],\n      filters: filters\n    },\n    callback: function (response) {\n      if (response.message) {\n        displayDevices(response.message);\n      }\n    }\n  });\n}\n\nasync function displayDevices(devices) {\n  const deviceList = root_element.querySelector('#deviceList');\n  deviceList.innerHTML = '';\n  \n  const devicesWithData = await Promise.all(devices.map(device => fetchDeviceDetails(device.name)));\n\n  devicesWithData.forEach((device, index) => {\n    if (device) {\n      const lastSeenText = getLastSeenText(device.connected_at);\n      const deviceCard = `\n        <div class=\"device-card\" data-index=\"${index}\">\n          <div class=\"device-header\">\n            <input type=\"radio\" id=\"device-${index}\" name=\"deviceSelection\" class=\"device-radio\" data-name=\"${device.name}\">\n            <label for=\"device-${index}\">\n              <span><i class=\"fa fa-signal\"></i> <a href=\"/app/cn-device/${device.name}\" target=\"_blank\">${device.alias || device.device_shortcut}</a></span>\n            </label>\n            <span class=\"last-seen\">${lastSeenText}</span>\n            <span class=\"status-indicator ${device.connected ? 'status-connected' : 'status-disconnected'}\"></span>\n          </div>\n          <div class=\"device-body\">\n            <div class=\"device-info-column\">\n              <div class=\"device-info\"><span>${__('Hostname')}:</span> ${device.hostname}</div>\n              <div class=\"device-info\"><span>${__('Place')}:</span> ${device.place_name || 'N/A'}</div>\n              <div class=\"device-info\"><span>${__('Type')}:</span> ${device.sensor_type || 'N/A'}</div>\n            </div>\n            <div class=\"device-data-column\">\n              ${generateDataItemsHTML(device.data_item)}\n            </div>\n          </div>\n        </div>\n      `;\n      deviceList.innerHTML += deviceCard;\n    }\n  });\n\n  deviceList.querySelectorAll('.device-radio').forEach(radio => {\n    radio.addEventListener('change', (event) => {\n      if (event.target.checked) {\n        localStorage.setItem('currentDeviceSelection', JSON.stringify({\n          deviceName: event.target.dataset.name\n        }));\n      }\n    });\n  });\n}\n\nfunction generateDataItemsHTML(dataItems) {\n  return dataItems.map(item => `\n    <div class=\"data-item\">\n      <span class=\"data-value\">${item.value} ${item.uom}</span>\n      <i class=\"fa fa-${getIconForSensorVar(item.sensor_var)}\"></i>\n    </div>\n  `).join('');\n}\n\n/*****************/\n/* Live Data Chart */\n/*****************/\nfunction initializeLiveDataChart() {\n  const liveDataTab = root_element.querySelector('#LiveData');\n  if (!liveDataTab) return;\n\n  // Clear existing elements\n  const existingElements = ['filter-group', 'live-data-container'].forEach(className => {\n    const element = liveDataTab.querySelector(`.${className}`);\n    if (element) element.remove();\n  });\n\n  // Create filter and button container\n  const filterButtonContainer = document.createElement('div');\n  filterButtonContainer.classList.add('d-flex', 'justify-content-between', 'mb-1');\n\n  // Create device filter\n  const deviceFilterContainer = document.createElement('div');\n  deviceFilterContainer.classList.add('filter-group');\n  deviceFilterContainer.innerHTML = `\n    <label for=\"deviceFilter\">Dispositivo</label>\n    <select id=\"deviceFilter\" class=\"filter-dropdown\">\n      <option value=\"\">Seleccione un dispositivo</option>\n    </select>\n  `;\n\n  // Create button container\n  const buttonContainer = document.createElement('div');\n  buttonContainer.classList.add('d-flex');\n  buttonContainer.innerHTML = `\n    <button class=\"btn btn-primary btn-xs mx-1\" id=\"syncMQTT\" title=\"Sync MQTT\">\n      <i class=\"fa fa-refresh\"></i>\n    </button>\n    <button class=\"btn btn-danger btn-xs ml-1\" id=\"stopMQTT\" title=\"Stop MQTT\">\n      <i class=\"fa fa-stop\"></i>\n    </button>\n  `;\n\n  filterButtonContainer.appendChild(deviceFilterContainer);\n  filterButtonContainer.appendChild(buttonContainer);\n\n  // Insert after h3\n  const h3Element = liveDataTab.querySelector('h3');\n  h3Element.insertAdjacentElement('afterend', filterButtonContainer);\n\n  // Create main container with new layout\n  const mainContainer = document.createElement('div');\n  mainContainer.classList.add('live-data-container');\n  mainContainer.style.display = 'none';\n\n  // Chart container (full width)\n  const chartCard = document.createElement('div');\n  chartCard.classList.add('chart-card');\n  const chartContainer = document.createElement('div');\n  chartContainer.id = 'liveChart';\n  chartContainer.classList.add('chart-container');\n  chartCard.appendChild(chartContainer);\n\n  // Create container for the bottom cards\n  const bottomCardsContainer = document.createElement('div');\n  bottomCardsContainer.classList.add('bottom-cards-container');\n\n  // Thresholds Card\n  const thresholdsCard = document.createElement('div');\n  thresholdsCard.classList.add('thresholds-card');\n  thresholdsCard.innerHTML = `\n    <div class=\"card-header\">Umbrales de Alerta</div>\n    <div id=\"thresholdsContent\" class=\"card-content\"></div>\n  `;\n\n  // Values Card with separate containers\n  const valuesCard = document.createElement('div');\n  valuesCard.classList.add('values-card');\n  valuesCard.innerHTML = `\n    <div class=\"card-header\">Valores Actuales</div>\n    <div id=\"valuesContent\" class=\"card-content\">\n      <div id=\"deviceInfo\" class=\"general-data-container\"></div>\n      <div id=\"sensorValues\" class=\"sensor-data-container\"></div>\n    </div>\n  `;\n\n  // Logo Card\n  const logoCard = document.createElement('div');\n  logoCard.classList.add('logo-card');\n  logoCard.innerHTML = `\n    <div class=\"logo-container\">\n      <img src=\"/assets/pibiconnect/images/pibiCo_logo.svg\" alt=\"Logo\" style=\"max-width: 200px; opacity: 1;\">\n    </div>\n  `;\n\n  // Append all cards\n  bottomCardsContainer.appendChild(thresholdsCard);\n  bottomCardsContainer.appendChild(valuesCard);\n  bottomCardsContainer.appendChild(logoCard);\n\n  mainContainer.appendChild(chartCard);\n  mainContainer.appendChild(bottomCardsContainer);\n  liveDataTab.appendChild(mainContainer);\n\n  // Initialize handlers\n  initializeThresholdHandlers();\n  loadDevicesForFilter();\n  setupChartEventListeners();\n}\n//\nfunction setupChartEventListeners() {\n  const deviceFilter = root_element.querySelector('#deviceFilter');\n  const container = root_element.querySelector('.live-data-container');\n\n  deviceFilter.addEventListener('change', async function () {\n    const selectedDevice = this.value;\n\n    if (!selectedDevice) {\n      container.style.display = 'none';\n      if (chart) {\n        chart.dispose();\n        chart = null;\n      }\n      deviceInfoInitialized = false;\n      return;\n    }\n\n    deviceInfoInitialized = false;\n    container.style.display = 'flex';\n\n    if (chart) {\n      chart.dispose();\n      chart = null;\n    }\n\n    // Reset data\n    deviceAlertThresholds = {};\n    deviceSpans = {};\n    currentDeviceData = {};\n    maxValue = 0;\n\n    // Initialize components separately\n    currentDeviceData = await fetchDeviceGeneralData(selectedDevice);\n    await Promise.all([\n      initializeThresholds(selectedDevice),\n      fetchDeviceSpans(selectedDevice)\n    ]);\n    \n    initializeChart();\n\n    localStorage.setItem('selectedDevice', selectedDevice);\n    if (currentDeviceData && currentDeviceData.hostname) {\n      localStorage.setItem('selectedHostname', currentDeviceData.hostname);\n    }\n\n    // Clear data displays\n    const deviceInfo = root_element.querySelector('#deviceInfo');\n    const sensorValues = root_element.querySelector('#sensorValues');\n    if (deviceInfo) deviceInfo.innerHTML = '';\n    if (sensorValues) sensorValues.innerHTML = '';\n\n    updateDataCard({}, selectedDevice);\n    \n    const syncButton = root_element.querySelector('#syncMQTT');\n    const stopButton = root_element.querySelector('#stopMQTT');\n\n    syncButton.addEventListener('click', startMQTTConnection);\n    stopButton.addEventListener('click', stopMQTTConnection);\n  });\n}\n\n\n//\nfunction getValueStatus(value, thresholds) {\n  if (!thresholds) return 'normal';\n\n  const numValue = parseFloat(value);\n  const highValue = thresholds.high ? parseFloat(thresholds.high) : null;\n  const lowValue = thresholds.low ? parseFloat(thresholds.low) : null;\n\n  // Check alerts first\n  if ((highValue !== null && numValue >= highValue) ||\n    (lowValue !== null && numValue <= lowValue)) {\n    return 'alert';\n  }\n\n  // Check warning zones (within 10% of thresholds)\n  if (highValue !== null) {\n    const highWarningThreshold = highValue * 0.9;\n    if (numValue >= highWarningThreshold) return 'warning';\n  }\n\n  if (lowValue !== null) {\n    const lowWarningThreshold = lowValue * 1.1;\n    if (numValue <= lowWarningThreshold) return 'warning';\n  }\n\n  return 'normal';\n}\n// Chart Helper Functions\nfunction createMarkLine(sensorVar) {\n  const thresholds = deviceAlertThresholds[sensorVar] || {};\n  const markLine = {\n    silent: true,\n    symbol: ['none', 'none'],\n    data: []\n  };\n\n  if (thresholds.high !== null && thresholds.high !== undefined) {\n    markLine.data.push({\n      name: 'High Alert',\n      yAxis: thresholds.high,\n      label: {\n        show: true,\n        position: 'insideStartTop',  // Position inside the chart area, at the start, above the line\n        formatter: `High: ${thresholds.high}`,\n        color: '#ff0000',\n        fontSize: 11,\n        padding: [2, 4],\n        backgroundColor: 'rgba(255, 255, 255, 0.7)', // Semi-transparent white background\n        distance: 5  // Distance from the line\n      },\n      lineStyle: {\n        type: 'dashed',\n        width: 2,\n        color: '#ff0000',\n        dashOffset: 0,\n        cap: 'round',\n        dash: [6, 4]\n      }\n    });\n  }\n\n  if (thresholds.low !== null && thresholds.low !== undefined) {\n    markLine.data.push({\n      name: 'Threshold Low',\n      yAxis: thresholds.low,\n      label: {\n        show: true,\n        position: 'insideStartBottom',  // Position inside the chart area, at the start, below the line\n        formatter: `Low: ${thresholds.low}`,\n        color: '#00ff00',\n        fontSize: 11,\n        padding: [2, 4],\n        backgroundColor: 'rgba(255, 255, 255, 0.7)', // Semi-transparent white background\n        distance: 5  // Distance from the line\n      },\n      lineStyle: {\n        type: 'dashed',\n        width: 2,\n        color: '#00ff00',\n        dashOffset: 0,\n        cap: 'round',\n        dash: [6, 4]\n      }\n    });\n  }\n\n  return markLine;\n}\n\nfunction getUOMForSeries(seriesName) {\n  const sensorVar = seriesName.split(' - ')[1];\n  return deviceAlertThresholds[sensorVar]?.uom || '';\n}\n\nfunction initializeChart() {\n  const chartDom = root_element.querySelector('#liveChart');\n  if (!chartDom) return;\n\n  if (chart) {\n    chart.dispose();\n  }\n\n  chart = echarts.init(chartDom, null, {\n    renderer: 'canvas',\n    useDirtyRect: true\n  });\n\n  const option = {\n    //title: {\n    //  text: 'Tiempo Real',\n    //  left: 'center',\n    //  top: 'bottom'\n    //},\n    tooltip: {\n      trigger: 'axis',\n      formatter: function (params) {\n        let result = params[0].axisValue + '<br/>';\n        params.forEach(param => {\n          if (param.value !== null && param.value[1] !== undefined) {\n            result += `${param.marker} ${param.seriesName}: ${param.value[1]}${getUOMForSeries(param.seriesName)}<br/>`;\n          }\n        });\n        return result;\n      }\n    },\n    legend: {\n      type: 'scroll',\n      data: [],\n      top: 0,  // Position the legend at the top\n      left: 'center',\n      padding: [0, 10, 10, 10],  // Add padding [top, right, bottom, left]\n      textStyle: {\n        fontSize: 11,\n        color: '#333'\n      }\n    },\n    grid: {\n      top: 21,\n      bottom: 5,\n      left: '1%',    // Reduced left margin\n      right: '1%',   // Reduced right margin\n      backgroundColor: '#e6f7ff', // Light cyan background\n      containLabel: true,\n      show: true,\n      borderWidth: 0\n    },\n    xAxis: {\n      type: 'time',\n      splitLine: {\n        show: true,\n        lineStyle: {\n          type: 'solid',\n          color: '#d9d9d9',\n          width: 1\n        }\n      },\n      axisPointer: {\n        animation: false\n      },\n      axisLine: {\n        show: true,\n        lineStyle: {\n          color: '#333'\n        }\n      },\n      axisTick: {\n        alignWithLabel: true,\n        length: 3\n      },\n      splitNumber: 3,\n      maxTicks: 3,\n      axisLabel: {\n        formatter: function (value) {\n          const date = new Date(value);\n          return date.toLocaleTimeString('es-ES', {\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit'\n          });\n        },\n        fontSize: 11,\n        color: '#333',\n        // Add padding to prevent label overlap\n        padding: [3, 0, 0, 0]\n      }\n    },\n    yAxis: {\n      type: 'value',\n      splitLine: {\n        show: true,\n        lineStyle: {\n          type: 'solid',\n          color: '#d9d9d9'\n        }\n      },\n      axisLabel: {\n        fontSize: 11,\n        color: '#333'\n      },\n      axisLine: {\n        show: true,\n        lineStyle: {\n          color: '#333'\n        }\n      },\n      scale: true\n    },\n    series: [],\n    animation: false\n  };\n\n  chart.setOption(option, true);\n\n  const resizeHandler = debounce(() => {\n    chart && chart.resize();\n  }, 100);\n  window.addEventListener('resize', resizeHandler);\n}\n\nfunction refreshChartMarklines(sensorVar) {\n  if (!chart) return;\n\n  const option = chart.getOption();\n  const deviceName = localStorage.getItem('selectedDevice');\n  const seriesName = `${deviceName} - ${sensorVar}`;\n  const seriesIndex = option.series.findIndex(s => s.name === seriesName);\n\n  if (seriesIndex === -1) return;\n\n  const series = {...option.series[seriesIndex]};\n  series.markLine = createMarkLine(sensorVar);\n\n  // Calculate new y-axis max including thresholds and data\n  let maxY = Math.max(\n    ...series.data.map(point => point[1] || 0),\n    deviceAlertThresholds[sensorVar]?.high || 0,\n    deviceAlertThresholds[sensorVar]?.low || 0\n  );\n  maxY = Math.ceil(maxY * 1.1); // Add 10% padding\n\n  // Update chart with new settings\n  chart.setOption({\n    yAxis: [{\n      max: maxY\n    }],\n    series: [series]\n  }, {\n    replaceMerge: ['series']\n  });\n}\n\nfunction updateLiveDataChart(parsedMessage, deviceName) {\n  if (!chart) return;\n\n  const { reading } = parsedMessage;\n  let timestamp;\n  // Parse the date string properly\n  if (reading.data_date) {\n    timestamp = new Date(reading.data_date).getTime();\n  } else {\n    timestamp = new Date().getTime();\n  }\n\n  const option = chart.getOption();\n  const maxPointsToShow = 300;\n  let needsUpdate = false;\n\n  // Calculate current max value from existing data and thresholds\n  const thresholdMax = Math.max(\n    ...Object.values(deviceAlertThresholds).map(t => \n      Math.max(t.high || 0, t.low || 0)\n    ), 0\n  );\n\n  // Process each reading\n  for (const [key, value] of Object.entries(reading)) {\n    if (key !== 'data_date' && key !== 'record') {\n      const numValue = parseFloat(value);\n      const seriesName = `${deviceName} - ${key}`;\n      const seriesIndex = option.series.findIndex(s => s.name === seriesName);\n      \n      // When creating or updating series, add these style properties:\n  const seriesStyle = {\n    type: 'line',\n    showSymbol: false,\n    symbolSize: 0,\n    lineStyle: {\n      width: 2,\n      color: '#D4A017'  // Brown color for the value line\n    },\n    areaStyle: {\n      opacity: 0  // No area fill\n    }\n  };\n      \n      if (seriesIndex === -1) {\n        // Create new series\n        option.series.push({\n          name: seriesName,\n          ...seriesStyle,\n          data: [[timestamp, numValue]],\n          markLine: createMarkLine(key)\n        });\n        option.legend[0].data.push(seriesName);\n      } else {\n        // Update existing series\n        const currentData = [...option.series[seriesIndex].data];\n        currentData.push([timestamp, numValue]);\n        \n        // Keep only last N points\n        if (currentData.length > maxPointsToShow) {\n          option.series[seriesIndex].data = currentData.slice(-maxPointsToShow);\n        } else {\n          option.series[seriesIndex].data = currentData;\n        }\n      }\n      needsUpdate = true;\n    }\n  }\n\n  if (needsUpdate) {\n    // Calculate max value from all visible data points\n    let dataMax = -Infinity;\n    option.series.forEach(series => {\n      if (series.data && series.data.length > 0) {\n        const seriesMax = Math.max(...series.data.map(point => point[1]));\n        dataMax = Math.max(dataMax, seriesMax);\n      }\n    });\n\n    // Use either the data maximum or threshold maximum, whichever is larger\n    const maxValue = Math.max(dataMax, thresholdMax);\n    // Add padding and round to nice number\n    const yAxisMax = calculateNiceMaxValue(maxValue);\n\n    const allTimestamps = option.series.flatMap(series => \n      series.data.map(point => point[0])\n    );\n    const minTime = Math.min(...allTimestamps);\n    const maxTime = Math.max(...allTimestamps);\n    \n    // Update chart with stable axes\n    chart.setOption({\n      xAxis: {\n        min: minTime,\n        max: maxTime,\n        splitNumber: 3, // Force 3 splits\n        maxTicks: 3     // Maximum number of ticks\n      },\n      yAxis: [{\n        max: yAxisMax,\n        min: 0,\n        interval: yAxisMax / 5\n      }],\n      series: option.series,\n      legend: option.legend\n    }, {\n      lazyUpdate: true,\n      silent: true\n    });\n  }\n}\n// Helper function to calculate a \"nice\" maximum value for the y-axis\nfunction calculateNiceMaxValue(value) {\n  if (value <= 0) return 10;\n  \n  // Find the magnitude (10^n) just larger than the value\n  const magnitude = Math.pow(10, Math.floor(Math.log10(value)));\n  const normalized = value / magnitude;\n\n  // Choose a nice number slightly larger than the value\n  let niceNumber;\n  if (normalized <= 1.2) niceNumber = 1.2;\n  else if (normalized <= 1.5) niceNumber = 1.5;\n  else if (normalized <= 2) niceNumber = 2;\n  else if (normalized <= 2.5) niceNumber = 2.5;\n  else if (normalized <= 3) niceNumber = 3;\n  else if (normalized <= 4) niceNumber = 4;\n  else if (normalized <= 5) niceNumber = 5;\n  else if (normalized <= 6) niceNumber = 6;\n  else if (normalized <= 8) niceNumber = 8;\n  else niceNumber = 10;\n\n  return niceNumber * magnitude;\n}\n/*****************/\n/* Thresholds    */\n/*****************/\n\nasync function fetchAlertThresholds(deviceName) {\n  const response = await frappe.call({\n    method: 'frappe.client.get',\n    args: {\n      doctype: 'CN Device',\n      name: deviceName,\n      fields: ['alert_item']\n    }\n  });\n  \n  if (response.message && response.message.alert_item) {\n    deviceAlertThresholds = {};\n    response.message.alert_item.forEach(alert => {\n      deviceAlertThresholds[alert.sensor_var] = {\n        high: alert.high_value,\n        low: alert.low_value,\n        uom: alert.uom,\n        alert_high: alert.alert_high,\n        alert_low: alert.alert_low,\n        stability_span: alert.stability_span || 5\n      };\n    });\n  }\n}\n\nfunction initializeThresholdHandlers() {\n  const thresholdsContainer = root_element.querySelector('#thresholdsContent');\n  if (!thresholdsContainer) return;\n\n  // Remove any existing listeners by cloning and replacing\n  const newContainer = thresholdsContainer.cloneNode(true);\n  thresholdsContainer.parentNode.replaceChild(newContainer, thresholdsContainer);\n\n  // Add event listener to the new container\n  newContainer.addEventListener('change', async function(e) {\n    const input = e.target;\n    \n    // Check if it's a threshold input\n    if (!input.matches('.threshold-input')) return;\n    \n    const deviceName = localStorage.getItem('selectedDevice');\n    const sensorVar = input.dataset.sensorVar;\n    const thresholdType = input.dataset.thresholdType;\n    const value = parseFloat(input.value);\n\n    console.log('Threshold change detected:', {\n      deviceName,\n      sensorVar,\n      thresholdType,\n      value\n    });\n\n    if (isNaN(value)) {\n      frappe.show_alert({\n        message: __('Por favor ingrese un valor numérico válido'),\n        indicator: 'red'\n      });\n      input.value = deviceAlertThresholds[sensorVar]?.[thresholdType] || '';\n      return;\n    }\n\n    try {\n      // Show loading state\n      input.disabled = true;\n      input.style.backgroundColor = '#f5f5f5';\n\n      // Update the alert threshold\n      await frappe.call({\n        method: 'pibiconnect.pibiconnect.api.update_alert_threshold',\n        args: {\n          device: deviceName,\n          sensor_var: sensorVar,\n          threshold_type: thresholdType,\n          value: value\n        }\n      });\n\n      // Update local cache\n      if (!deviceAlertThresholds[sensorVar]) {\n        deviceAlertThresholds[sensorVar] = {};\n      }\n      deviceAlertThresholds[sensorVar][thresholdType] = value;\n\n      // Update chart marklines\n      refreshChartMarklines(sensorVar);\n\n      frappe.show_alert({\n        message: __('Umbral actualizado correctamente'),\n        indicator: 'green'\n      });\n\n    } catch (error) {\n      console.error('Error updating threshold:', error);\n      frappe.show_alert({\n        message: __('Error actualizando umbral'),\n        indicator: 'red'\n      });\n      // Revert to previous value\n      input.value = deviceAlertThresholds[sensorVar]?.[thresholdType] || '';\n    } finally {\n      // Reset input state\n      input.disabled = false;\n      input.style.backgroundColor = '';\n    }\n  });\n}\n\nasync function initializeThresholds(deviceName) {\n  try {\n    const thresholdsContainer = root_element.querySelector('#thresholdsContent');\n    if (!thresholdsContainer) return;\n\n    await fetchAlertThresholds(deviceName);\n    thresholdsContainer.innerHTML = '';\n\n    Object.entries(deviceAlertThresholds).forEach(([sensorVarName, thresholds]) => {\n      const thresholdElement = document.createElement('div');\n      thresholdElement.classList.add('threshold-group');\n      \n      // Explicitly parse the stability span value, defaulting to 5\n      const stabilitySpan = parseInt(thresholds.stability_span) || 5;\n      \n      thresholdElement.innerHTML = `\n        <div class=\"threshold-header\">\n          <i class=\"fa fa-${getIconForSensorVar(sensorVarName)}\"></i>\n          <span>${sensorVarName}</span>\n        </div>\n        <div class=\"threshold-inputs\">\n          <div class=\"threshold-input-group\">\n            <label>Baj@</label>\n            <div class=\"threshold-input-wrapper\">\n              <input type=\"number\" \n                     class=\"threshold-input\" \n                     data-sensor-var=\"${sensorVarName}\" \n                     data-threshold-type=\"low\" \n                     value=\"${thresholds.low || ''}\"\n                     min=\"0\"\n                     step=\"0.1\">\n              <span class=\"uom\">${thresholds.uom || ''}</span>\n            </div>\n          </div>\n          <div class=\"threshold-input-group\">\n            <label>Alt@</label>\n            <div class=\"threshold-input-wrapper\">\n              <input type=\"number\" \n                     class=\"threshold-input\" \n                     data-sensor-var=\"${sensorVarName}\" \n                     data-threshold-type=\"high\" \n                     value=\"${thresholds.high || ''}\"\n                     min=\"0\"\n                     step=\"0.1\">\n              <span class=\"uom\">${thresholds.uom || ''}</span>\n            </div>\n          </div>\n        </div>\n        <div class=\"threshold-stability-group\">\n          <div class=\"stability-header\">\n            <span class=\"stability-value\">${stabilitySpan}s</span>\n          </div>\n          <div class=\"stability-slider-container\">\n            <div class=\"stability-track\">\n              <div class=\"stability-progress\" style=\"width: 100%\"></div>\n            </div>\n            <input type=\"range\" \n                   class=\"stability-slider\" \n                   data-sensor-var=\"${sensorVarName}\"\n                   data-current-value=\"${stabilitySpan}\"\n                   value=\"${stabilitySpan}\"\n                   min=\"1\"\n                   max=\"60\"\n                   step=\"1\">\n            <div class=\"stability-marks\">\n              <span>1s</span>\n              <span>30s</span>\n              <span>60s</span>\n            </div>\n          </div>\n          <div class=\"stability-info\">\n            <span>Tiempo mínimo para confirmar alerta</span>\n          </div>\n        </div>\n      `;\n\n      thresholdsContainer.appendChild(thresholdElement);\n\n      // Get elements after they're added to DOM\n      const slider = thresholdElement.querySelector('.stability-slider');\n      const valueDisplay = thresholdElement.querySelector('.stability-value');\n      const progressBar = thresholdElement.querySelector('.stability-progress');\n      \n      // Set initial styles\n      updateSliderVisuals(slider, progressBar, valueDisplay);\n\n      // Add input event listener for live updates while sliding\n      slider.addEventListener('input', function() {\n        updateSliderVisuals(this, progressBar, valueDisplay);\n      });\n\n      // Add change event listener for when sliding stops\n      slider.addEventListener('change', async function() {\n        const newValue = parseInt(this.value);\n        const oldValue = parseInt(this.dataset.currentValue);\n\n        try {\n          this.disabled = true;\n          await frappe.call({\n            method: 'pibiconnect.pibiconnect.api.update_stability_span',\n            args: {\n              device: deviceName,\n              sensor_var: sensorVarName,\n              stability_span: newValue\n            }\n          });\n\n          // Update successful\n          this.dataset.currentValue = newValue.toString();\n          if (deviceAlertThresholds[sensorVarName]) {\n            deviceAlertThresholds[sensorVarName].stability_span = newValue;\n          }\n\n          frappe.show_alert({\n            message: __('Tiempo de estabilidad actualizado'),\n            indicator: 'green'\n          });\n        } catch (error) {\n          console.error('Error updating stability span:', error);\n          \n          // Revert to previous value\n          this.value = oldValue;\n          updateSliderVisuals(this, progressBar, valueDisplay);\n          \n          frappe.show_alert({\n            message: __('Error actualizando tiempo de estabilidad'),\n            indicator: 'red'\n          });\n        } finally {\n          this.disabled = false;\n        }\n      });\n    });\n  } catch (error) {\n    console.error('Error initializing thresholds:', error);\n    frappe.show_alert({\n      message: __('Error inicializando umbrales'),\n      indicator: 'red'\n    });\n  }\n}\n\n// Helper function to update slider visuals\nfunction updateSliderVisuals(slider, progressBar, valueDisplay) {\n  const value = parseInt(slider.value);\n  const percentage = ((value - 1) / 59) * 100;\n  \n  // Update progress bar width\n  if (progressBar) {\n    progressBar.style.width = `${percentage}%`;\n  }\n  \n  // Update value display\n  if (valueDisplay) {\n    valueDisplay.textContent = `${value}s`;\n  }\n}\n\nfunction initializeSliderListeners(slider, valueDisplay, sensorVarName, deviceName) {\n  slider.addEventListener('input', function() {\n    const value = this.value;\n    const percentage = ((value - 1) / 59) * 100;\n    this.style.background = `linear-gradient(to right, #ff6900 ${percentage}%, #e9ecef ${percentage}%)`;\n    valueDisplay.textContent = `${value}s`;\n  });\n\n  slider.addEventListener('change', async function() {\n    try {\n      const value = parseInt(this.value);\n      await updateStabilitySpan(deviceName, sensorVarName, value);\n      if (deviceAlertThresholds[sensorVarName]) {\n        deviceAlertThresholds[sensorVarName].stability_span = value;\n      }\n      \n      frappe.show_alert({\n        message: __('Tiempo de estabilidad actualizado'),\n        indicator: 'green'\n      });\n    } catch (error) {\n      console.error('Error updating stability span:', error);\n      frappe.show_alert({\n        message: __('Error actualizando tiempo de estabilidad'),\n        indicator: 'red'\n      });\n      // Revert to previous value\n      const prevValue = deviceAlertThresholds[sensorVarName]?.stability_span || 5;\n      this.value = prevValue;\n      const prevPercentage = ((prevValue - 1) / 59) * 100;\n      this.style.background = `linear-gradient(to right, #ff6900 ${prevPercentage}%, #e9ecef ${prevPercentage}%)`;\n      valueDisplay.textContent = `${prevValue}s`;\n    }\n  });\n}\n\n\n\n\n\n/*****************/\n/* Devices       */\n/*****************/\nasync function fetchDeviceGeneralData(deviceName) {\n  try {\n    const response = await frappe.call({\n      method: 'frappe.client.get',\n      args: {\n        doctype: 'CN Device',\n        name: deviceName,\n        fields: ['*']\n      }\n    });\n    return response.message;\n  } catch (error) {\n    console.error(\"Error fetching device general data:\", error);\n    return null;\n  }\n}\n\nasync function fetchDeviceDetails(deviceName) {\n  try {\n    const response = await frappe.call({\n      method: 'frappe.client.get',\n      args: {\n        doctype: 'CN Device',\n        name: deviceName,\n        fields: ['name', 'alias', 'device_shortcut', 'hostname', 'place_name', 'sensor_type', 'connected_at', 'connected', 'data_item']\n      }\n    });\n    return response.message;\n  } catch (error) {\n    console.error(\"Error fetching device details:\", error);\n    return null;\n  }\n}\n\nfunction loadDevicesForFilter() {\n  frappe.call({\n    method: 'frappe.client.get_list',\n    args: {\n      doctype: 'CN Device',\n      fields: ['name', 'device_shortcut', 'alias']\n    },\n    callback: function (response) {\n      if (response.message) {\n        const deviceFilter = root_element.querySelector('#deviceFilter');\n        const devices = response.message;\n        devices.forEach(device => {\n          const option = document.createElement('option');\n          option.value = device.name;\n          option.textContent = device.alias || device.device_shortcut;\n          deviceFilter.appendChild(option);\n        });\n      }\n    }\n  });\n}\n\nfunction startDeviceRefresh() {\n  if (refreshInterval) {\n    clearInterval(refreshInterval);\n  }\n  refreshInterval = setInterval(loadDevices, REFRESH_INTERVAL);\n  loadDevices();\n}\n\nfunction stopDeviceRefresh() {\n  if (refreshInterval) {\n    clearInterval(refreshInterval);\n    refreshInterval = null;\n  }\n}\n\nfunction resetDeviceDisplay() {\n  deviceInfoInitialized = false;\n}\n\nfunction fetchAllDevices() {\n  frappe.call({\n    method: 'frappe.client.get_list',\n    args: {\n      doctype: 'CN Device',\n      fields: ['name', 'hostname']\n    },\n    callback: function (response) {\n      if (response.message) {\n        localStorage.setItem('allDevices', JSON.stringify(response.message));\n      }\n    }\n  });\n}\n\n/*****************/\n/* Map           */\n/*****************/\nfunction initializeMap() {\n  try {\n    const mapElement = root_element.querySelector('#map');\n    if (!mapElement || typeof L === 'undefined') {\n      console.error('Map element not found or Leaflet not loaded');\n      return;\n    }\n\n    if (map) {\n      map.invalidateSize();\n      debouncedLoadDeviceLocations();\n      return;\n    }\n\n    map = L.map(mapElement).setView([43.5376186, -5.6595290], 13);\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '© OpenStreetMap contributors'\n    }).addTo(map);\n\n    markersCluster = L.markerClusterGroup({\n      spiderfyOnMaxZoom: true,\n      showCoverageOnHover: false,\n      zoomToBoundsOnClick: true,\n      iconCreateFunction: function (cluster) {\n        return L.divIcon({\n          html: `<div class=\"cluster-icon\">${cluster.getChildCount()}</div>`,\n          className: 'custom-cluster-icon',\n          iconSize: L.point(40, 40)\n        });\n      }\n    });\n\n    map.addLayer(markersCluster);\n    \n    window.addEventListener('orientationchange', debouncedUpdateMap);\n    window.addEventListener('resize', debouncedUpdateMap);\n    \n    debouncedLoadDeviceLocations();\n\n  } catch (error) {\n    console.error('Error initializing map:', error);\n  }\n}\n\nconst debouncedLoadDeviceLocations = debounce(() => {\n  const now = Date.now();\n  if (now - lastLoadTime > loadInterval) {\n    loadDeviceLocations();\n    lastLoadTime = now;\n  }\n}, 300);\n\nconst debouncedUpdateMap = debounce(() => {\n  if (map) {\n    map.invalidateSize();\n    debouncedLoadDeviceLocations();\n  }\n}, 300);\n\nfunction loadDeviceLocations() {\n  if (markersCluster) {\n    markersCluster.clearLayers();\n  }\n\n  frappe.call({\n    method: 'frappe.client.get_list',\n    args: {\n      doctype: 'CN Device',\n      fields: ['name', 'alias', 'device_shortcut', 'location']\n    },\n    callback: function (response) {\n      if (response.message) {\n        let validLocationsCount = 0;\n        const locationMap = new Map();\n\n        response.message.forEach(device => {\n          if (device.location) {\n            try {\n              const locationData = JSON.parse(device.location);\n              if (locationData.type === 'FeatureCollection' &&\n                locationData.features &&\n                locationData.features.length > 0 &&\n                locationData.features[0].geometry &&\n                locationData.features[0].geometry.type === 'Point') {\n\n                const [lon, lat] = locationData.features[0].geometry.coordinates;\n                if (!isNaN(lat) && !isNaN(lon)) {\n                  const locationKey = `${lat},${lon}`;\n                  if (!locationMap.has(locationKey)) {\n                    locationMap.set(locationKey, []);\n                  }\n                  locationMap.get(locationKey).push({\n                    name: device.name,\n                    alias: device.alias || device.device_shortcut\n                  });\n                }\n              }\n            } catch (error) {\n              console.warn(`Error parsing location for device ${device.name}: ${error.message}`);\n            }\n          }\n        });\n\n        const bounds = L.latLngBounds();\n\n        locationMap.forEach((devices, locationKey) => {\n          const [lat, lon] = locationKey.split(',').map(Number);\n\n          const customIcon = L.divIcon({\n            html: `<div class=\"custom-marker\">\n                     <span class=\"marker-pin\"></span>\n                     <span class=\"device-count\">${devices.length}</span>\n                   </div>`,\n            className: 'custom-icon',\n            iconSize: [30, 42],\n            iconAnchor: [15, 42]\n          });\n\n          const marker = L.marker([lat, lon], { icon: customIcon });\n\n          const popupContent = devices.map(device =>\n            `<b>${device.alias}</b> (${device.name})`\n          ).join('<br>');\n\n          marker.bindPopup(`<div style=\"max-height: 200px; overflow-y: auto;\">\n                              <h5>Dispositivos en este lugar:</h5>\n                              ${popupContent}\n                            </div>`);\n\n          markersCluster.addLayer(marker);\n          bounds.extend([lat, lon]);\n          validLocationsCount++;\n        });\n\n        if (validLocationsCount > 0) {\n          map.fitBounds(bounds.pad(0.1));\n        }\n      }\n    }\n  });\n}\n\nfunction updateMap() {\n  if (map) {\n    setTimeout(function () {\n      map.invalidateSize();\n      loadDeviceLocations();\n    }, 100);\n  }\n}\n\n/*****************/\n/* Utilities     */\n/*****************/\nfunction getIconForSensorVar(sensorVar) {\n  const iconMap = {\n    'temperature': 'thermometer-half',\n    'humidity': 'tint',\n    'pressure': 'tachometer',\n    'memory': 'microchip',\n    'disk': 'hdd-o',\n    'battery': 'battery-half',\n    'light': 'lightbulb-o',\n    'co2': 'cloud',\n    'sound': 'volume-up',\n    'motion': 'male',\n    'vibration': 'exchange',\n    'wind speed': 'flag',\n    'rainfall': 'tint',\n    'uv index': 'sun-o',\n    'voltage': 'bolt',\n    'fluorescence': 'bolt',\n  };\n\n  return iconMap[sensorVar] || 'question-circle';\n}\n\nfunction getLastSeenText(lastSeen) {\n  if (!lastSeen) return 'N/A';\n  const now = new Date();\n  const lastSeenDate = new Date(lastSeen);\n  const diffMinutes = Math.floor((now - lastSeenDate) / (1000 * 60));\n\n  if (diffMinutes < 60) {\n    return `${diffMinutes} min ago`;\n  } else if (diffMinutes < 1440) {\n    return `${Math.floor(diffMinutes / 60)} hours ago`;\n  } else {\n    return lastSeenDate.toLocaleString();\n  }\n}\n\nfunction isInAlert(value, thresholds) {\n  const numValue = parseFloat(value);\n  const highValue = thresholds.high ? parseFloat(thresholds.high) : null;\n  const lowValue = thresholds.low ? parseFloat(thresholds.low) : null;\n\n  return (highValue !== null && numValue >= highValue) ||\n    (lowValue !== null && numValue <= lowValue);\n}\n\nfunction debounce(func, wait) {\n  let timeout;\n  return function executedFunction(...args) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n}\n\nfunction fullScreen() {\n  let layoutMainSection = document.querySelector('.layout-main-section');\n  if (layoutMainSection) {\n    layoutMainSection.style.padding = \"0\";\n    layoutMainSection.style.border = \"none\";\n  }\n  let ceBlockContent = document.querySelector('.ce-block__content');\n  if (ceBlockContent) {\n    ceBlockContent.style.padding = \"0\";\n  }\n  let widget = document.querySelector('.widget.custom-block-widget-box.full-width');\n  if (widget) {\n    widget.style.padding = \"0\";\n  }\n}\n\n/************************/\n/* Socket Initialization */\n/************************/\n// Initialize socket connections\nif (typeof frappe !== 'undefined' && frappe.socketio) {\n  const socket = frappe.socketio.socket;\n\n  if (socket) {\n    socket.on('connect', function () {\n      socket.emit('subscribe', 'mqtt_message');\n    });\n\n    socket.on('mqtt_message', function (data) {\n      displayMessage(data.topic, data.payload);\n    });\n\n    socket.on('disconnect', function () {\n      // Handle disconnect if needed\n    });\n\n    socket.on('connect_error', function (error) {\n      console.error('Connection error:', error);\n    });\n  } else {\n    console.error('Frappe socket.io socket is not defined');\n  }\n} else {\n  console.error('Frappe socket.io is not available');\n}",
  "style": "/* Base Styles */\n#sensor-management-interface {\n  font-family: Helvetica, sans-serif;\n  width: 100%;\n  margin: 0;\n  background-color: #f5f7fa;\n}\n\n.work-content {\n  display: flex;\n  gap: 9px;\n  padding: 6px;\n}\n\n/* Card Base Styles */\n.card {\n  background-color: #ffffff;\n  border-radius: 6px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n}\n\n.card.works {\n  flex-grow: 1;\n  height: calc(100vh - 100px);\n  max-height: calc(100vh - 100px);\n  overflow-y: auto;\n  padding: 9px;\n  background-image: url(\"/assets/pibiconnect/images/bg_hydrosentinel.webp\");\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  position: relative;\n}\n\n.card.works::before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(255, 255, 255, 0.9);\n  z-index: 1;\n}\n\n.card.works > * {\n  position: relative;\n  z-index: 2;\n}\n\n/* Tab Navigation Styles */\n.tab.statements {\n  display: flex;\n  gap: 9px;\n  margin-bottom: 9px;\n  border-bottom: 1px solid #e0e0e0;\n  padding-bottom: 9px;\n}\n\n.tablinks {\n  background-color: transparent;\n  color: #333;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  padding: 6px;\n  transition: 0.3s;\n  font-size: 12px;\n  border-radius: 6px;\n}\n\n.tablinks:hover {\n  background-color: #f0f0f0;\n}\n\n.tablinks.active {\n  background-color: #ff6900;\n  color: #ffffff;\n}\n\n.tablinks.active .icon-img {\n  filter: brightness(0) invert(1);\n}\n\n.icon-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 3px;\n}\n\n.icon-img {\n  width: 21px;\n  height: 21px;\n}\n\n.icon-label {\n  font-size: 12px;\n}\n\n/* Tab Content Base Styles */\n.tabcontent {\n  display: none;\n  padding: 9px;\n  background-color: #fff;\n  border-radius: 6px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.tabcontent.active {\n  display: block;\n}\n\n/* Filter Styles */\n.filters {\n  display: flex;\n  gap: 9px;\n  margin-bottom: 9px;\n}\n\n.filter-group {\n  flex-grow: 1;\n  position: relative;\n}\n\n.filter-group label {\n  position: absolute;\n  top: -10px;\n  left: 10px;\n  background-color: #ffffff;\n  padding: 0 5px;\n  font-size: 12px;\n  color: #ff6900;\n  z-index: 1;\n}\n\n.filter-dropdown {\n  width: 100%;\n  padding: 3px;\n  border: 1px solid #ff6900;\n  border-radius: 6px;\n  background-color: #ffffff;\n  font-size: 12px;\n  color: #333;\n  appearance: none;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12'%3E%3Cpath fill='%2317a2b8' d='M10.293 3.293L6 7.586 1.707 3.293A1 1 0 00.293 4.707l5 5a1 1 0 001.414 0l5-5a1 1 0 10-1.414-1.414z'/%3E%3C/svg%3E\");\n  background-repeat: no-repeat;\n  background-position: right 10px center;\n}\n\n/* Device List Styles */\n.device-list {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 3px;\n}\n\n.device-card {\n  background-color: #ffffff;\n  border-radius: 6px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  padding: 9px;\n  transition: all 0.3s ease;\n}\n\n.device-card:hover {\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.15);\n}\n\n.device-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 6px;\n}\n\n.device-header label {\n  font-size: 13px;\n  font-weight: bold;\n  color: #ff6900;\n  max-width: 100%;\n  overflow: hidden;\n}\n\n.device-header label a {\n  display: inline-block;\n  max-width: 27ch;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: inherit;\n  text-decoration: none;\n}\n\n.device-header label a span {\n  font-weight: bold;\n}\n\n.last-seen {\n  font-size: 11px;\n  color: #666;\n  margin-left: auto;\n  margin-right: 5px;\n}\n\n/* Status Indicators */\n.status-indicator {\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n  flex-shrink: 0;\n}\n\n.status-connected { \n  background-color: #28a745; \n}\n\n.status-disconnected { \n  background-color: #dc3545; \n}\n\n.status-normal {\n  background-color: #52c41a;\n  width: 8px;\n  height: 8px;\n}\n\n.status-warning {\n  background-color: #faad14;\n  width: 8px;\n  height: 8px;\n}\n\n.status-alert {\n  background-color: #ff4d4f;\n  width: 16px;\n  height: 16px;\n}\n\n/* Status Circle */\n.status-circle {\n  width: 36px;\n  height: 36px;\n  border-radius: 50%;\n  transition: all 0.3s ease;\n  box-shadow: 0 1px 3px rgba(0,0,0,0.2);\n}\n\n.status-circle-normal {\n  background-color: #52c41a;\n  border: 2px solid #fff;\n}\n\n.status-circle-alert {\n  background-color: #ff4d4f;\n  border: 2px solid #fff;\n}\n\n.status-text {\n  font-size: 11px;\n  color: #666;\n  order: -1;\n  margin-right: 6px;\n}\n\n/* Device Body Layout */\n.device-body {\n  display: flex;\n  font-size: 12px;\n}\n\n.device-info-column {\n  flex: 0 0 70%;\n  padding-right: 9px;\n  line-height: 1;\n}\n\n.device-data-column {\n  flex: 0 0 30%;\n  border-left: 1px solid #e0e0e0;\n  padding-left: 9px;\n}\n\n.device-info, \n.data-item {\n  margin-bottom: 1px;\n}\n\n.device-info span {\n  font-weight: 600;\n}\n\n.data-item {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  font-size: 11px;\n}\n\n.data-value {\n  font-weight: bold;\n  color: #ff6900;\n  margin-right: 3px;\n}\n\n/* Live Data Container New Layout */\n.live-data-container {\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  margin-top: 9px;\n  width: 100%;\n}\n\n/* Chart Section */\n.chart-card {\n  width: 100%;\n  background-color: #fff;\n  border-radius: 9px;\n  padding: 15px;\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n}\n\n#liveChart {\n  width: 100%;\n  height: 400px;\n  border-radius: 6px;\n}\n\n/* Bottom Cards Layout */\n.bottom-cards-container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 6px;\n  width: 100%;\n}\n\n.thresholds-card,\n.values-card,\n.logo-card {\n  background-color: #fff;\n  border-radius: 9px;\n  padding: 3px;\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n  height: 100%;\n}\n\n.card-header {\n  font-size: 12px;\n  font-weight: 600;\n  color: #333;\n  margin-bottom: 12px;\n  padding: 3px;\n  border-bottom: 1px solid #eee;\n  background-color: #fff;\n}\n\n/* Threshold Controls */\n.threshold-group {\n  margin-bottom: 3px;\n  padding-bottom: 3px;\n  border-bottom: 1px solid #eee;\n}\n\n.threshold-group:last-child {\n  margin-bottom: 0;\n  padding-bottom: 0;\n  border-bottom: none;\n}\n\n.threshold-header {\n  display: flex;\n  align-items: center;\n  gap: 3px;\n  margin-bottom: 3px;\n  font-size: 12px;\n  color: #666;\n}\n\n.threshold-inputs {\n  display: grid;\n  gap: 3px;\n}\n\n.threshold-input-group {\n  display: grid;\n  grid-template-columns: 40px 1fr auto;\n  align-items: center;\n  gap: 3px;\n}\n\n.threshold-input-group label {\n  color: #666;\n  font-size: 12px;\n}\n\n.threshold-input {\n  width: 100%;\n  padding: 1px 3px;\n  border: 1px solid #ddd;\n  border-radius: 6px;\n  font-size: 12px;\n  text-align: right;\n}\n\n.threshold-input:focus {\n  border-color: #ff6900;\n  outline: none;\n}\n\n.uom {\n  font-size: 12px;\n  color: #666;\n  min-width: 20px;\n}\n\n/* Sensor Data Containers */\n.sensor-data-container {\n  display: flex;\n  flex-direction: column;\n  border-radius: 12px;\n  overflow: hidden;\n  background-color: #f8f9fa;\n}\n\n.sensor-data-item {\n  display: grid;\n  grid-template-columns: auto 1fr;\n  gap: 3px;\n  align-items: center;\n  padding: 3px;\n  background-color: #fff;\n}\n\n.sensor-data-item + .sensor-data-item {\n  border-top: 1px solid #e9ecef;\n}\n\n.sensor-data-item:first-child {\n  border-top-left-radius: 12px;\n  border-top-right-radius: 12px;\n}\n\n.sensor-data-item:last-child {\n  border-bottom-left-radius: 12px;\n  border-bottom-right-radius: 12px;\n}\n\n/* Sensor Information Display */\n.sensor-info {\n  display: grid;\n  gap: 3px;\n}\n\n.sensor-value {\n  font-size: 12px;\n  font-weight: 500;\n}\n\n.sensor-thresholds {\n  font-size: 12px;\n  color: #6c757d;\n}\n\n.sensor-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 4px;\n}\n\n.sensor-name {\n  font-size: 13px;\n  color: #666;\n}\n\n.sensor-timestamp {\n  font-size: 11px;\n  color: #999;\n}\n\n/* General Data Container */\n.general-data-container {\n  display: flex;\n  flex-direction: column;\n  border-radius: 12px;\n  overflow: hidden;\n  padding: 3px;\n  margin-bottom: 6px;\n}\n\n.general-data-item {\n  padding: 3px;\n  padding-left: 6px;\n  background-color: #fff;\n}\n\n.general-data-item + .general-data-item {\n  border-top: 1px solid #e9ecef;\n}\n\n.general-data-item:first-child {\n  border-top-left-radius: 12px;\n  border-top-right-radius: 12px;\n}\n\n.general-data-item:last-child {\n  border-bottom-left-radius: 12px;\n  border-bottom-right-radius: 12px;\n}\n\n.general-info {\n  font-size: 12px;\n}\n\n.general-info div {\n  margin-bottom: 1px;\n}\n\n.general-info strong {\n  color: #333;\n}\n\n/* Icon Styles */\n.sensor-icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n  background-color: #f5f5f5;\n  border-radius: 50%;\n  margin-right: 3px;\n}\n\n.sensor-icon i {\n  font-size: 16px;\n  color: #666;\n}\n\n/* Map Styles */\n#map {\n  width: 100%;\n  height: 400px;\n  border-radius: 6px;\n  overflow: hidden;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n/* Custom Marker Styles */\n.custom-marker {\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.marker-pin {\n  width: 30px;\n  height: 30px;\n  border-radius: 50% 50% 50% 0;\n  background: #c30b82;\n  position: absolute;\n  transform: rotate(-45deg);\n  left: 50%;\n  top: 50%;\n  margin: -15px 0 0 -15px;\n}\n\n.marker-pin::after {\n  content: '';\n  width: 24px;\n  height: 24px;\n  margin: 3px 0 0 3px;\n  background: #fff;\n  position: absolute;\n  border-radius: 50%;\n}\n\n.device-count {\n  width: 22px;\n  height: 22px;\n  line-height: 22px;\n  display: block;\n  color: #000;\n  text-align: center;\n  position: absolute;\n  font-size: 12px;\n  font-weight: bold;\n  z-index: 1;\n}\n\n.custom-cluster-icon {\n  background-color: #1978c8;\n  border-radius: 50%;\n  text-align: center;\n  color: white;\n  font-weight: bold;\n  border: 2px solid #fff;\n  font-size: 16px;\n}\n\n.cluster-icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n}\n\n/* Messages Container */\n.messages-container {\n  flex: 2;\n  min-height: 400px;\n  border: 1px solid #ddd;\n  border-radius: 6px;\n  padding: 9px;\n  background-color: #fff;\n  overflow-y: auto;\n  max-height: 400px;\n  display: none;\n}\n\n.message-item {\n  font-size: 10px;\n  padding: 1px;\n  margin: 1px;\n  line-height: 1;\n}\n\n/* Info Row Styles */\n.info-row {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  font-size: 12px;\n  line-height: 1.1;\n  margin-bottom: 3px;\n}\n\n.info-row strong {\n  min-width: 80px;\n  color: #666;\n}\n\n.info-row a {\n  color: #ff6900;\n  text-decoration: none;\n}\n\n.info-row a:hover {\n  text-decoration: underline;\n}\n\n/* Ensure the Location and LiveData tab content is visible */\n#Location, \n#LiveData {\n  display: block;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .work-content {\n    flex-direction: column;\n  }\n\n  .filters {\n    flex-direction: column;\n  }\n\n  .device-list {\n    grid-template-columns: 1fr;\n  }\n\n  .device-body {\n    flex-direction: column;\n  }\n\n  .device-data-column {\n    border-left: none;\n    border-top: 1px solid #e0e0e0;\n    padding-left: 0;\n    padding-top: 9px;\n    margin-top: 9px;\n  }\n\n  #map, \n  #liveChart {\n    height: 300px;\n  }\n\n  .bottom-cards-container {\n    grid-template-columns: 1fr;\n  }\n\n  .chart-container,\n  .messages-container {\n    width: 100%;\n  }\n\n  .threshold-input-group {\n    grid-template-columns: 30px 1fr auto;\n  }\n\n  .info-row strong {\n    min-width: 60px;\n  }\n\n  .logo-container img {\n    max-width: 150px;\n  }\n}\n\n@media (max-width: 480px) {\n  .device-header label a {\n    max-width: 20ch;\n  }\n\n  .threshold-input-group {\n    grid-template-columns: 25px 1fr auto;\n  }\n\n  .sensor-icon {\n    width: 24px;\n    height: 24px;\n  }\n\n  .sensor-icon i {\n    font-size: 14px;\n  }\n}\n\n/* Stability Slider Styles */\n.threshold-stability-group {\n    margin: 0;\n    padding: 0;\n    border-top: 1px dashed #eee;\n}\n\n.stability-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 0;\n    font-size: 11px;\n}\n\n.stability-value {\n    font-family: monospace;\n    font-size: 14px;\n    color: #ff6900;\n    font-weight: 500;\n}\n\n.stability-slider-container {\n    position: relative;\n    padding: 0;\n    margin: 0;\n    line-height: 1;\n}\n\n.stability-slider {\n    -webkit-appearance: none;\n    width: 100%;\n    height: 8px;\n    background: #e9ecef;\n    border-radius: 3px;\n    outline: none;\n    margin: 10px 0;\n}\n\n.stability-slider::-webkit-slider-thumb,\n.stability-slider::-moz-range-thumb {\n    width: 18px;\n    height: 18px;\n    border-radius: 50%;\n    background: #ff6900;\n    cursor: pointer;\n    border: 2px solid #fff;\n    box-shadow: 0 1px 3px rgba(0,0,0,0.2);\n    transition: all 0.2s ease;\n}\n\n.stability-slider::-webkit-slider-thumb:hover,\n.stability-slider::-moz-range-thumb:hover {\n    background: #138496;\n    transform: scale(1.5);\n}\n\n.stability-slider:active::-webkit-slider-thumb,\n.stability-slider:active::-moz-range-thumb {\n    background: #138496;\n    transform: scale(1.1);\n}\n\n.stability-slider::-webkit-slider-runnable-track,\n.stability-slider::-moz-range-track {\n    background: linear-gradient(to right, #ff6900 var(--value-percent, 50%), #e9ecef var(--value-percent, 50%));\n    height: 8px;\n    border-radius: 3px;\n}\n\n.stability-marks {\n    display: flex;\n    justify-content: space-between;\n    padding: 0;\n    margin-top: 0;\n    font-size: 11px;\n    color: #666;\n}\n\n.stability-info {\n    display: flex;\n    align-items: center;\n    margin-top: 6px;\n    font-size: 11px;\n    color: #666;\n}\n\n.stability-info span {\n    color: #666;\n}\n\n/* Update sensor info layout */\n.sensor-info {\n    display: flex;\n    flex-direction: column;\n    gap: 3px;\n    width: 100%; /* Ensure full width */\n}\n\n.sensor-data-row {\n    display: grid;\n    grid-template-columns: auto 1fr;\n    width: 100%;\n    gap: 6px;\n    align-items: center;\n}\n\n.sensor-name {\n    font-size: 13px;\n    color: #666;\n    text-align: left;\n}\n\n.sensor-value-group {\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n    gap: 6px;\n}\n\n.sensor-status-row {\n    display: flex;\n    align-items: center;\n    gap: 6px;\n    padding-top: 3px;\n    border-top: 1px dotted #eee;\n    justify-content: flex-end;\n}\n\n.sensor-status-circle {\n    width: 39px;\n    height: 39px;\n    /*border-radius: 50%;*/\n    transform: rotate(45deg);\n    margin-right: 9px;\n    transition: all 0.3s ease;\n    box-shadow: 0 1px 3px rgba(0,0,0,0.2);\n}\n\n.status-circle-normal {\n    background-color: #52c41a;\n    border: 2px solid #fff;\n}\n\n.status-circle-alert {\n    background-color: #ff4d4f;\n    border: 2px solid #fff;\n}\n/* Add to your existing CSS*/\n.stability-slider {\n  -webkit-appearance: none;\n  width: 100%;\n  height: 8px;\n  border-radius: 4px;\n  outline: none;\n  transition: background 0.2s;\n}\n\n.stability-slider::-webkit-slider-thumb {\n  -webkit-appearance: none;\n  appearance: none;\n  width: 16px;\n  height: 16px;\n  border-radius: 50%;\n  background: #ff6900;\n  cursor: pointer;\n  border: 2px solid #fff;\n  box-shadow: 0 1px 3px rgba(0,0,0,0.2);\n  transition: all 0.2s ease;\n}\n\n.stability-slider::-moz-range-thumb {\n  width: 16px;\n  height: 16px;\n  border-radius: 50%;\n  background: #ff6900;\n  cursor: pointer;\n  border: 2px solid #fff;\n  box-shadow: 0 1px 3px rgba(0,0,0,0.2);\n  transition: all 0.2s ease;\n}\n.threshold-input-group {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 4px;\n}\n\n.threshold-input {\n  width: 80px;\n  padding: 4px 8px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 14px;\n  text-align: right;\n}\n\n.threshold-input:focus {\n  border-color: #ff6900;\n  outline: none;\n}\n\n.threshold-input:disabled {\n  background-color: #f5f5f5;\n  cursor: not-allowed;\n}\n\n\n  .stability-track {\n    position: absolute;\n    top: 50%;\n    left: 0;\n    right: 0;\n    height: 4px;\n    background: #e9ecef;\n    transform: translateY(-50%);\n    border-radius: 2px;\n  }\n\n  .stability-progress {\n    position: absolute;\n    left: 0;\n    top: 0;\n    height: 100%;\n    background: #ff6900;\n    border-radius: 2px;\n    transition: width 0.1s ease;\n  }\n\n  .stability-slider {\n    position: relative;\n    width: 100%;\n    -webkit-appearance: none;\n    background: transparent;\n    z-index: 2;\n  }\n\n  .stability-slider::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    height: 16px;\n    width: 16px;\n    border-radius: 50%;\n    background: #ff6900;\n    cursor: pointer;\n    border: none;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n  }\n\n  .stability-slider::-moz-range-thumb {\n    height: 16px;\n    width: 16px;\n    border-radius: 50%;\n    background: #ff6900;\n    cursor: pointer;\n    border: none;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n  }\n\n  .stability-slider:focus {\n    outline: none;\n  }\n\n  .stability-marks {\n    display: flex;\n    justify-content: space-between;\n    margin-top: 8px;\n    padding: 0 2px;\n    font-size: 12px;\n    color: #666;\n  }\n\n/* Stability Slider Styles */\n\n.stability-track {\n  position: absolute;\n  top: 50%;\n  left: 0;\n  right: 0;\n  height: 4px;\n  background: #e9ecef;\n  transform: translateY(-50%);\n  border-radius: 2px;\n}\n\n.stability-progress {\n  position: absolute;\n  left: 0;\n  top: 0;\n  height: 100%;\n  background: #ff6900;\n  border-radius: 2px;\n  transition: width 0.1s ease;\n}\n\n.stability-slider {\n  position: relative;\n  width: 100%;\n  height: 4px; /* Match track height */\n  -webkit-appearance: none;\n  background: transparent;\n  z-index: 2;\n  margin: 0;\n  cursor: pointer;\n}\n\n/* Center the slider thumb vertically */\n.stability-slider::-webkit-slider-thumb {\n  -webkit-appearance: none;\n  appearance: none;\n  height: 16px;\n  width: 16px;\n  border-radius: 50%;\n  background: #ff6900;\n  cursor: pointer;\n  border: 2px solid #fff;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n  transform: translateY(-6px); /* Adjust to perfectly center on the track */\n}\n\n.stability-slider::-moz-range-thumb {\n  height: 16px;\n  width: 16px;\n  border-radius: 50%;\n  background: #ff6900;\n  cursor: pointer;\n  border: 2px solid #fff;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n  transform: translateY(-6px); /* Adjust to perfectly center on the track */\n}\n\n.stability-slider:focus {\n  outline: none;\n}\n\n/* Input Styles Adjustment */\n.threshold-input-group {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  margin-bottom: 4px;\n  width: 50%; /* Set each group to take 50% width */\n}\n\n.threshold-input {\n  width: calc(100% - 50px);\n  padding: 2px 4px; /* Reduce padding */\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 12px; /* Match the rest of the UI font size */\n  text-align: right;\n}\n\n.threshold-input:focus {\n  border-color: #ff6900;\n  outline: none;\n}\n\n.threshold-input:disabled {\n  background-color: #f5f5f5;\n  cursor: not-allowed;\n}\n\n.uom {\n  font-size: 12px;\n  color: #666;\n  margin-left: 4px;\n}\n\n/* Marks Adjustment */\n.stability-marks {\n  display: flex;\n  justify-content: space-between;\n  padding: 0;\n  margin-top: 5px;\n  font-size: 11px;\n  color: #666;\n}\n\n.stability-value {\n  font-family: monospace;\n  font-size: 12px; /* Adjust to match the label size */\n  color: #ff6900;\n  font-weight: 500;\n}\n\n/* Threshold Group Container */\n.threshold-group {\n  padding: 8px;\n  border-bottom: 1px solid #eee;\n}\n\n.threshold-group:last-child {\n  border-bottom: none;\n}\n\n/* Threshold Header */\n.threshold-header {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  margin-bottom: 8px;\n}\n\n.threshold-header i {\n  color: #666;\n  font-size: 14px;\n}\n\n.threshold-header span {\n  color: #666;\n  font-size: 12px;\n  font-weight: 500;\n}\n\n/* Threshold Inputs Container */\n.threshold-inputs {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n  margin-bottom: 8px;\n}\n\n/* Individual Input Groups */\n.threshold-input-group {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  width: calc(50% - 4px);\n}\n\n/* Label Styling */\n.threshold-input-group label {\n  min-width: 36px;\n  font-size: 12px;\n  color: #666;\n}\n\n/* Input Wrapper */\n.threshold-input-wrapper {\n  display: flex;\n  align-items: center;\n  flex: 1;\n  min-width: 0;\n}\n\n/* Input Field */\n.threshold-input {\n  width: 100%;\n  padding: 4px 6px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 12px;\n  text-align: right;\n}\n\n.threshold-input:focus {\n  border-color: #ff6900;\n  outline: none;\n}\n\n/* Unit of Measurement */\n.uom {\n  margin-left: 4px;\n  font-size: 11px;\n  color: #666;\n  white-space: nowrap;\n}\n\n/* Mobile Responsiveness */\n@media screen and (max-width: 768px) {\n  .threshold-inputs {\n    flex-direction: column;\n    gap: 6px;\n  }\n\n  .threshold-input-group {\n    width: 100%;\n  }\n}\n/* Logo Card Container */\n.logo-card {\n  background-color: #fff;\n  border-radius: 9px;\n  padding: 3px;\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n  height: 100%;\n  /* Add display flex to enable centering */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n/* Logo Container */\n.logo-container {\n  /* Remove any default margins that might affect centering */\n  margin: 0;\n  padding: 0;\n  /* Add flex display to center the img */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  /* Take up full space of parent */\n  width: 100%;\n  height: 100%;\n}\n\n.logo-container img {\n  max-width: 200px;\n  opacity: 1;\n  /* Remove any default margins/padding */\n  margin: 0;\n  padding: 0;\n  /* Maintain aspect ratio */\n  object-fit: contain;\n}\n\n/* Responsive adjustments */\n@media (max-width: 768px) {\n  .logo-container img {\n    max-width: 150px;\n  }\n}\n\n.threshold-stability-group {\n  display: none;  \n}"
 },
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<link rel=\"stylesheet\" href=\"/assets/pibiconnect/css/leaflet.css\">\n<link rel=\"stylesheet\" href=\"/assets/pibiconnect/css/MarkerCluster.css\" />\n<link rel=\"stylesheet\" href=\"/assets/pibiconnect/css/MarkerCluster.Default.css\" />\n<div id=\"sensor-management-interface\" class=\"work-container\">\n  <div class=\"work-content\">\n    <div class=\"card works\" id=\"works\">\n      <div class=\"tab statements\">\n        <!-- Sidebar toggle button -->\n        <button class=\"tablinks hidden\" id=\"toggleSidebarButton\" title=\"Toggle Sidebar\">\n          <div class=\"icon-container\">\n            <img class=\"icon-img\" src=\"/assets/pibiconnect/images/menu-lateral.svg\"/>\n            <span class=\"icon-label\">Menú</span>\n          </div>\n        </button>\n        <!-- Existing tabs -->\n        <button class=\"tablinks\" data-tabname=\"General\" id=\"general\" title=\"General\">\n          <div class=\"icon-container\">\n            <!--<i class=\"fa fa-home\"></i>-->\n            <img class=\"icon-img\" src=\"/assets/pibiconnect/images/sensor-de-humedad.svg\"/>\n            <span class=\"icon-label\">Sensores</span>\n          </div>\n        </button>\n        <button class=\"tablinks\" data-tabname=\"LiveData\" id=\"liveData\" title=\"Live Data\">\n          <div class=\"icon-container\">\n            <img class=\"icon-img\" src=\"/assets/pibiconnect/images/analisis.svg\" />\n            <span class=\"icon-label\">Gráficas</span>\n          </div>\n        </button>\n        <button class=\"tablinks hidden\" data-tabname=\"Reports\" id=\"reports\" title=\"Reports\">\n          <div class=\"icon-container\">\n            <img class=\"icon-img\" src=\"/assets/pibiconnect/images/advertencia.svg\"/>\n            <span class=\"icon-label\">Info</span>\n          </div>\n        </button>\n        <button class=\"tablinks\" data-tabname=\"Setup\" id=\"setup\" title=\"Setup\">\n          <div class=\"icon-container\">\n            <img class=\"icon-img\" src=\"/assets/pibiconnect/images/ajustes.svg\"/>\n            <span class=\"icon-label\">Ajustes</span>\n          </div>\n        </button>\n        <button class=\"tablinks\" data-tabname=\"Location\" id=\"location\" title=\"Location\">\n          <div class=\"icon-container\">\n            <img class=\"icon-img\" src=\"/assets/pibiconnect/images/ruta.svg\"/>\n            <span class=\"icon-label\">Posición</span>\n          </div>\n        </button>\n      </div>\n      <div id=\"General\" class=\"tabcontent active\">\n        <h3>Gestión de Sensores</h3>\n        <div class=\"filters\">\n          <div class=\"filter-group\">\n            <label for=\"locationFilter\">Lugar</label>\n            <select id=\"locationFilter\" class=\"filter-dropdown\">\n              <option value=\"all\">Todos</option>\n            </select>\n          </div>\n          <div class=\"filter-group\">\n            <label for=\"typeFilter\">Tipo</label>\n            <select id=\"typeFilter\" class=\"filter-dropdown\">\n              <option value=\"all\">Todos</option>\n            </select>\n          </div>\n        </div>\n        <div id=\"deviceList\" class=\"device-list\"></div>\n      </div>\n      <div id=\"LiveData\" class=\"tabcontent\">\n        <h3>Datos en Tiempo Real</h3>\n        <div class=\"filter-group\">\n          <label for=\"deviceFilter\">Dispositivo</label>\n          <select id=\"deviceFilter\" class=\"filter-dropdown\">\n            <option value=\"all\">Todos</option>\n          </select>\n        </div>\n        <div class=\"live-data-container\">\n          <div id=\"liveChart\" class=\"chart-container\" style=\"width: 100%; height: 100%;\"></div>\n          <div id=\"messages-container\" class=\"messages-container\"></div>\n        </div>\n      </div>\n      <div id=\"Reports\" class=\"tabcontent\">\n        <h3>Información de Sensores</h3>\n        <div id=\"reportsList\"></div>\n      </div>\n      <div id=\"Setup\" class=\"tabcontent\">\n        <h3>Configuración</h3>\n        <div id=\"setupList\">\n        </div>\n      </div>\n      <div id=\"Location\" class=\"tabcontent\">\n        <h3>Localizaciones</h3>\n        <div id=\"map\"></div>\n      </div>\n    </div>\n  </div>\n</div>",
  "modified": "2024-11-15 01:05:48.869475",
  "name": "CN Sensor Manager",
  "private": 0,
  "roles": [
   {
    "parent": "CN Sensor Manager",
    "parentfield": "roles",
    "parenttype": "Custom HTML Block",
    "role": "MIoT Administrator"
   },
   {
    "parent": "CN Sensor Manager",
    "parentfield": "roles",
    "parenttype": "Custom HTML Block",
    "role": "MIoT User"
   }
  ],
  "script": "// Declare globals first\nlet chart = null;\nlet map = null;\nlet markersCluster = null;\nlet deviceAlertThresholds = {};\nlet currentDeviceData = {};\nlet maxValue = 0;\nlet deviceInfoInitialized = false;\nlet refreshInterval = null;\nlet lastLoadTime = 0;\nconst REFRESH_INTERVAL = 60000; // 60 seconds\nconst loadInterval = 60000; // 1 minute\n//\n/************************/\n/* Initialization       */\n/************************/\nfunction initializeInterface() {\n  setupTabNavigation();\n  initializeFilters();\n  initializeLiveDataChart();\n  initializeMap();\n  fullScreen();\n\n  const urlParams = new URLSearchParams(window.location.search);\n  const tabToOpen = urlParams.get('tab');\n\n  if (tabToOpen) {\n    openTab(null, tabToOpen);\n  }\n}\n\nfunction setupTabNavigation() {\n  const tabs = root_element.querySelectorAll('.tablinks:not(#toggleSidebarButton)');\n  if (tabs.length === 0) {\n    console.error('No tab elements found');\n    return;\n  }\n  \n  tabs.forEach(tab => {\n    tab.addEventListener('click', function (event) {\n      const tabName = this.getAttribute('data-tabname');\n      openTab(event, tabName);\n      if (tabName === 'Location') {\n        setTimeout(function () {\n          initializeMap();\n        }, 100);\n      }\n    });\n  });\n\n  const defaultTab = root_element.querySelector('#general');\n  if (defaultTab) {\n    defaultTab.click();\n  } else {\n    console.error('Default tab not found');\n  }\n\n  window.addEventListener('resize', function () {\n    const activeTab = root_element.querySelector('.tablinks.active');\n    if (activeTab && activeTab.getAttribute('data-tabname') === 'Location') {\n      updateMap();\n    }\n  });\n}\n\nfunction openTab(evt, tabName) {\n  const tabcontent = root_element.querySelectorAll(\".tabcontent\");\n  tabcontent.forEach(tab => {\n    tab.style.display = \"none\";\n  });\n\n  const tablinks = root_element.querySelectorAll(\".tablinks:not(#toggleSidebarButton)\");\n  tablinks.forEach(tab => {\n    tab.classList.remove(\"active\");\n  });\n\n  const selectedTab = root_element.querySelector(`#${tabName}`);\n  if (selectedTab) {\n    selectedTab.style.display = \"block\";\n  } else {\n    console.error(`Tab content for ${tabName} not found`);\n  }\n\n  if (evt && evt.currentTarget) {\n    evt.currentTarget.classList.add(\"active\");\n  }\n\n  if (tabName === 'General') {\n    stopMQTTConnection();\n    startDeviceRefresh();\n  } else {\n    stopDeviceRefresh();\n\n    if (tabName === 'LiveData') {\n      deviceInfoInitialized = false;\n      startMQTTConnection();\n    } else if (tabName === 'Reports') {\n      stopMQTTConnection();\n      loadReports();\n    } else if (tabName === 'Location') {\n      stopMQTTConnection();\n      setTimeout(function () {\n        initializeMap();\n        updateMap();\n      }, 100);\n    } else if (tabName === 'Setup') {\n      stopMQTTConnection();\n      window.location.href = '/app/pibiconnect-settings';\n    }\n  }\n}\n\nfunction initializeFilters() {\n  loadFilterOptions('location');\n  loadFilterOptions('type');\n\n  const locationFilter = root_element.querySelector('#locationFilter');\n  const typeFilter = root_element.querySelector('#typeFilter');\n\n  if (locationFilter) {\n    locationFilter.addEventListener('change', function () {\n      loadDevices();\n    });\n  }\n\n  if (typeFilter) {\n    typeFilter.addEventListener('change', function () {\n      loadDevices();\n    });\n  }\n}\n\nfunction loadFilterOptions(filterType) {\n  let field = '';\n  if (filterType === 'location') {\n    field = 'place_name';\n  } else if (filterType === 'type') {\n    field = 'sensor_type';\n  } else if (filterType === 'device') {\n    field = 'name';\n  }\n\n  frappe.call({\n    method: 'frappe.client.get_list',\n    args: {\n      doctype: 'CN Device',\n      fields: [field],\n      distinct: true\n    },\n    callback: function (response) {\n      if (response.message) {\n        const filterElement = root_element.querySelector(`#${filterType}Filter`);\n        filterElement.innerHTML = '<option value=\"all\">Todos</option>';\n        const uniqueValues = new Set();\n        response.message.forEach(item => {\n          if (item[field]) {\n            uniqueValues.add(item[field]);\n          }\n        });\n        uniqueValues.forEach(value => {\n          filterElement.innerHTML += `<option value=\"${value}\">${value}</option>`;\n        });\n      }\n    }\n  });\n}\n\nfunction loadReports() {\n  const reportsList = root_element.querySelector('#reportsList');\n  if (reportsList) {\n    reportsList.innerHTML = `\n      <ul>\n        <li>Reports</li>\n      </ul>\n    `;\n  }\n}\n// Initial require and initialization\nfrappe.require([\n  \"/assets/pibiconnect/js/echarts.min.js\",\n  \"/assets/pibiconnect/js/leaflet.js\",\n  \"/assets/pibiconnect/js/leaflet.markercluster-src.js\"\n], function () {\n  initializeInterface();\n});\n//\n/*****************/\n/* MQTT          */\n/*****************/\nfunction startMQTTConnection() {\n  frappe.call({\n    method: 'pibiconnect.pibiconnect.mqtt_client.start_mqtt',\n    callback: function (response) {\n      if (response && response.message) {\n        frappe.show_alert(`MQTT connection started: ${response.message.status} with job ID: ${response.message.job_id}`);\n\n        // Reconnect socket if it's disconnected\n        if (frappe.socketio && frappe.socketio.socket && !frappe.socketio.socket.connected) {\n          frappe.socketio.socket.connect();\n        }\n      } else {\n        console.error('Failed to start MQTT connection', response);\n        frappe.show_alert('Failed to start MQTT connection');\n      }\n    },\n    error: function (error) {\n      console.error('Failed to start MQTT connection', error);\n      frappe.show_alert('Failed to start MQTT connection');\n    }\n  });\n}\n\nfunction stopMQTTConnection() {\n  frappe.call({\n    method: 'pibiconnect.pibiconnect.mqtt_client.stop_mqtt',\n    args: {\n      job_name: 'mqtt_start_job'\n    },\n    callback: function (response) {\n      if (response && response.message) {\n        frappe.show_alert(`MQTT connection stopped: ${response.message.status}`);\n\n        // Disconnect the socket after stopping the MQTT connection\n        if (frappe.socketio && frappe.socketio.socket) {\n          frappe.socketio.socket.disconnect();\n        }\n      } else {\n        console.error('Failed to stop MQTT connection', response);\n        frappe.show_alert('Failed to stop MQTT connection');\n      }\n    },\n    error: function (error) {\n      console.error('Failed to stop MQTT connection', error);\n      frappe.show_alert('Failed to stop MQTT connection');\n    }\n  });\n}\n\nfunction displayMessage(topic, message) {\n  let parsedMessage;\n  try {\n    const jsonMessage = JSON.parse(message);\n    parsedMessage = jsonMessage;\n  } catch (e) {\n    parsedMessage = { reading: { value: parseFloat(message), data_date: new Date().toLocaleTimeString() } };\n  }\n\n  if (!parsedMessage.reading) return;\n\n  const selectedDevice = localStorage.getItem('selectedDevice') || 'all';\n  if (selectedDevice === 'all') {\n    const allDevices = JSON.parse(localStorage.getItem('allDevices')) || [];\n    for (const device of allDevices) {\n      if (topic.includes(device.hostname)) {\n        processMessage(parsedMessage, topic, device.name);\n      }\n    }\n  } else {\n    const selectedHostname = localStorage.getItem('selectedHostname');\n    if (selectedHostname && !topic.includes(selectedHostname)) {\n      return;\n    }\n    processMessage(parsedMessage, topic, selectedDevice);\n  }\n}\n//\nfunction updateDataCard(reading, deviceName) {\n  const deviceInfo = root_element.querySelector('#deviceInfo');\n  const sensorValues = root_element.querySelector('#sensorValues');\n\n  if (!deviceInfo || !sensorValues) return;\n\n  // Initialize device info only if empty and we have device data\n  if (!deviceInfoInitialized && currentDeviceData) {\n    deviceInfoInitialized = true;\n    deviceInfo.innerHTML = '';\n\n    let latitude = 'N/A';\n    let longitude = 'N/A';\n\n    if (currentDeviceData.location) {\n      try {\n        const locationData = JSON.parse(currentDeviceData.location);\n        if (\n          locationData.type === 'FeatureCollection' &&\n          locationData.features &&\n          locationData.features.length > 0 &&\n          locationData.features[0].geometry &&\n          locationData.features[0].geometry.type === 'Point'\n        ) {\n          const [lon, lat] = locationData.features[0].geometry.coordinates;\n          latitude = lat.toFixed(6);\n          longitude = lon.toFixed(6);\n        }\n      } catch (error) {\n        console.error('Error parsing location:', error);\n      }\n    }\n\n    const today = new Date().toISOString().split('T')[0];\n\n    frappe.db.get_value('CN Device Log',\n      {\n        'device': currentDeviceData.name,\n        'date': today\n      },\n      'name'\n    ).then(r => {\n      let deviceLogLink;\n      if (r.message && r.message.name) {\n        deviceLogLink = `/app/cn-device-log/${r.message.name}`;\n      } else {\n        deviceLogLink = `/app/cn-device-log?filters={\"device\":[\"=\",\"${encodeURIComponent(currentDeviceData.name)}\"],\"date\":[\"=\",\"${today}\"]}`;\n      }\n\n      const generalInfo = document.createElement('div');\n      generalInfo.classList.add('general-info');\n      generalInfo.innerHTML = `\n        <div class=\"info-row device-name\">\n          <a href=\"${deviceLogLink}\" target=\"_blank\">${currentDeviceData.name}</a>\n        </div>\n        <div class=\"info-row\">\n          <strong>Latitud:</strong> ${latitude}\n        </div>\n        <div class=\"info-row\">\n          <strong>Longitud:</strong> ${longitude}\n        </div>\n      `;\n      deviceInfo.innerHTML = '';\n      deviceInfo.appendChild(generalInfo);\n    });\n  }\n\n  // Update sensor values only if we have new readings\n  if (reading && Object.keys(reading).length > 0) {\n    const tempContainer = document.createElement('div');\n    const currentTime = new Date().toLocaleTimeString();\n\n    for (const [key, value] of Object.entries(reading)) {\n      if (key !== 'data_date' && key !== 'record') {\n        const thresholds = deviceAlertThresholds[key] || {};\n        const status = getValueStatus(value, thresholds);\n        const formattedValue = typeof value === 'number' ? value.toFixed(2) : value;\n\n        const sensorValueElement = document.createElement('div');\n        sensorValueElement.classList.add('sensor-data-item');\n        sensorValueElement.dataset.sensorVar = key;\n        sensorValueElement.dataset.value = formattedValue;\n        sensorValueElement.dataset.status = status;\n\n        sensorValueElement.innerHTML = `\n          <div class=\"sensor-icon\">\n            <i class=\"fa fa-${getIconForSensorVar(key)}\"></i>\n          </div>\n          <div class=\"sensor-info\">\n            <div class=\"sensor-main-info\">\n              <div class=\"sensor-header\">\n                <span class=\"sensor-name\">${key}</span>\n                <span class=\"sensor-value\">\n                  <span class=\"status-indicator status-${status}\"></span>\n                  <span class=\"value-text\">${formattedValue}</span>\n                  <span class=\"value-unit\">${thresholds.uom || ''}</span>\n                </span>\n              </div>\n            </div>\n            <div class=\"sensor-status-row\">\n              <span class=\"status-text\">${isInAlert(value, thresholds) ? 'En Alerta' : 'Normal'}</span>\n              <div class=\"sensor-status-circle status-circle-${isInAlert(value, thresholds) ? 'alert' : 'normal'} mb-3\"></div>\n            </div>\n          </div>\n        `;\n\n        tempContainer.appendChild(sensorValueElement);\n      }\n    }\n\n    if (tempContainer.children.length > 0) {\n      sensorValues.innerHTML = tempContainer.innerHTML;\n    }\n  }\n}\n//\nfunction processMessage(parsedMessage, topic, deviceName) {\n  /*console.log(\"Processing message:\", {\n    message: parsedMessage,\n    topic: topic,\n    deviceName: deviceName\n  });*/\n  \n  updateLiveDataChart(parsedMessage, deviceName);\n  updateDataCard(parsedMessage.reading, deviceName);\n\n  // Messages container update\n  const messagesContainer = root_element.querySelector('#messages-container');\n  if (messagesContainer) {\n    const messageElement = document.createElement('div');\n    messageElement.classList.add('message-item');\n\n    const readings = Object.entries(parsedMessage.reading).map(([key, value]) => {\n      return `<span><strong>${key}:</strong> ${value} </span>`;\n    }).join('');\n\n    messageElement.innerHTML = `\n      <div style=\"color: #4682b4;\"><strong>Device:</strong> ${deviceName}</div>\n      <div style=\"color: #4682b4;\"><strong>Topic:</strong> ${topic}</div>\n      ${readings}\n    `;\n    messagesContainer.appendChild(messageElement);\n\n    if (window.innerWidth > 768) {\n      messageElement.scrollIntoView({ behavior: 'smooth', block: 'end' });\n    }\n  }\n}\n\n/*****************/\n/* Devices       */\n/*****************/\nfunction loadDevices() {\n  const locationFilter = root_element.querySelector('#locationFilter').value;\n  const typeFilter = root_element.querySelector('#typeFilter').value;\n\n  let filters = [];\n\n  if (locationFilter && locationFilter !== 'all') {\n    filters.push(['place_name', '=', locationFilter]);\n  }\n\n  if (typeFilter && typeFilter !== 'all') {\n    filters.push(['sensor_type', '=', typeFilter]);\n  }\n\n  frappe.call({\n    method: 'frappe.client.get_list',\n    args: {\n      doctype: 'CN Device',\n      fields: ['*'],\n      filters: filters\n    },\n    callback: function (response) {\n      if (response.message) {\n        displayDevices(response.message);\n      }\n    }\n  });\n}\n\nasync function displayDevices(devices) {\n  const deviceList = root_element.querySelector('#deviceList');\n  deviceList.innerHTML = '';\n  \n  const devicesWithData = await Promise.all(devices.map(device => fetchDeviceDetails(device.name)));\n\n  devicesWithData.forEach((device, index) => {\n    if (device) {\n      const lastSeenText = getLastSeenText(device.connected_at);\n      const deviceCard = `\n        <div class=\"device-card\" data-index=\"${index}\">\n          <div class=\"device-header\">\n            <input type=\"radio\" id=\"device-${index}\" name=\"deviceSelection\" class=\"device-radio\" data-name=\"${device.name}\">\n            <label for=\"device-${index}\">\n              <span><i class=\"fa fa-signal\"></i> <a href=\"/app/cn-device/${device.name}\" target=\"_blank\">${device.alias || device.device_shortcut}</a></span>\n            </label>\n            <span class=\"last-seen\">${lastSeenText}</span>\n            <span class=\"status-indicator ${device.connected ? 'status-connected' : 'status-disconnected'}\"></span>\n          </div>\n          <div class=\"device-body\">\n            <div class=\"device-info-column\">\n              <div class=\"device-info\"><span>${__('Hostname')}:</span> ${device.hostname}</div>\n              <div class=\"device-info\"><span>${__('Place')}:</span> ${device.place_name || 'N/A'}</div>\n              <div class=\"device-info\"><span>${__('Type')}:</span> ${device.sensor_type || 'N/A'}</div>\n            </div>\n            <div class=\"device-data-column\">\n              ${generateDataItemsHTML(device.data_item)}\n            </div>\n          </div>\n        </div>\n      `;\n      deviceList.innerHTML += deviceCard;\n    }\n  });\n\n  deviceList.querySelectorAll('.device-radio').forEach(radio => {\n    radio.addEventListener('change', (event) => {\n      if (event.target.checked) {\n        localStorage.setItem('currentDeviceSelection', JSON.stringify({\n          deviceName: event.target.dataset.name\n        }));\n      }\n    });\n  });\n}\n\nfunction generateDataItemsHTML(dataItems) {\n  return dataItems.map(item => `\n    <div class=\"data-item\">\n      <span class=\"data-value\">${item.value} ${item.uom}</span>\n      <i class=\"fa fa-${getIconForSensorVar(item.sensor_var)}\"></i>\n    </div>\n  `).join('');\n}\n\n/*****************/\n/* Live Data Chart */\n/*****************/\nfunction initializeLiveDataChart() {\n  const liveDataTab = root_element.querySelector('#LiveData');\n  if (!liveDataTab) return;\n\n  // Clear existing elements\n  const existingElements = ['filter-group', 'live-data-container'].forEach(className => {\n    const element = liveDataTab.querySelector(`.${className}`);\n    if (element) element.remove();\n  });\n\n  // Create filter and button container\n  const filterButtonContainer = document.createElement('div');\n  filterButtonContainer.classList.add('d-flex', 'justify-content-between', 'mb-1');\n\n  // Create device filter\n  const deviceFilterContainer = document.createElement('div');\n  deviceFilterContainer.classList.add('filter-group');\n  deviceFilterContainer.innerHTML = `\n    <label for=\"deviceFilter\">Dispositivo</label>\n    <select id=\"deviceFilter\" class=\"filter-dropdown\">\n      <option value=\"\">Seleccione un dispositivo</option>\n    </select>\n  `;\n\n  // Create button container\n  const buttonContainer = document.createElement('div');\n  buttonContainer.classList.add('d-flex');\n  buttonContainer.innerHTML = `\n    <button class=\"btn btn-primary btn-xs mx-1\" id=\"syncMQTT\" title=\"Sync MQTT\">\n      <i class=\"fa fa-refresh\"></i>\n    </button>\n    <button class=\"btn btn-danger btn-xs ml-1\" id=\"stopMQTT\" title=\"Stop MQTT\">\n      <i class=\"fa fa-stop\"></i>\n    </button>\n  `;\n\n  filterButtonContainer.appendChild(deviceFilterContainer);\n  filterButtonContainer.appendChild(buttonContainer);\n\n  // Insert after h3\n  const h3Element = liveDataTab.querySelector('h3');\n  h3Element.insertAdjacentElement('afterend', filterButtonContainer);\n\n  // Create main container with new layout\n  const mainContainer = document.createElement('div');\n  mainContainer.classList.add('live-data-container');\n  mainContainer.style.display = 'none';\n\n  // Chart container (full width)\n  const chartCard = document.createElement('div');\n  chartCard.classList.add('chart-card');\n  const chartContainer = document.createElement('div');\n  chartContainer.id = 'liveChart';\n  chartContainer.classList.add('chart-container');\n  chartCard.appendChild(chartContainer);\n\n  // Create container for the bottom cards\n  const bottomCardsContainer = document.createElement('div');\n  bottomCardsContainer.classList.add('bottom-cards-container');\n\n  // Thresholds Card\n  const thresholdsCard = document.createElement('div');\n  thresholdsCard.classList.add('thresholds-card');\n  thresholdsCard.innerHTML = `\n    <div class=\"card-header\">Umbrales de Alerta</div>\n    <div id=\"thresholdsContent\" class=\"card-content\"></div>\n  `;\n\n  // Values Card with separate containers\n  const valuesCard = document.createElement('div');\n  valuesCard.classList.add('values-card');\n  valuesCard.innerHTML = `\n    <div class=\"card-header\">Valores Actuales</div>\n    <div id=\"valuesContent\" class=\"card-content\">\n      <div id=\"deviceInfo\" class=\"general-data-container\"></div>\n      <div id=\"sensorValues\" class=\"sensor-data-container\"></div>\n    </div>\n  `;\n\n  // Logo Card\n  const logoCard = document.createElement('div');\n  logoCard.classList.add('logo-card');\n  logoCard.innerHTML = `\n    <div class=\"logo-container\">\n      <img src=\"/assets/pibiconnect/images/pibiCo_logo.svg\" alt=\"Logo\" style=\"max-width: 200px; opacity: 1;\">\n    </div>\n  `;\n\n  // Append all cards\n  bottomCardsContainer.appendChild(thresholdsCard);\n  bottomCardsContainer.appendChild(valuesCard);\n  bottomCardsContainer.appendChild(logoCard);\n\n  mainContainer.appendChild(chartCard);\n  mainContainer.appendChild(bottomCardsContainer);\n  liveDataTab.appendChild(mainContainer);\n\n  // Initialize handlers\n  initializeThresholdHandlers();\n  loadDevicesForFilter();\n  setupChartEventListeners();\n}\n//\nfunction setupChartEventListeners() {\n  const deviceFilter = root_element.querySelector('#deviceFilter');\n  const container = root_element.querySelector('.live-data-container');\n\n  deviceFilter.addEventListener('change', async function () {\n    const selectedDevice = this.value;\n\n    if (!selectedDevice) {\n      container.style.display = 'none';\n      if (chart) {\n        chart.dispose();\n        chart = null;\n      }\n      deviceInfoInitialized = false;\n      return;\n    }\n\n    deviceInfoInitialized = false;\n    container.style.display = 'flex';\n\n    if (chart) {\n      chart.dispose();\n      chart = null;\n    }\n\n    // Reset data\n    deviceAlertThresholds = {};\n    currentDeviceData = {};\n    maxValue = 0;\n\n    // Initialize components separately\n    currentDeviceData = await fetchDeviceGeneralData(selectedDevice);\n    await initializeThresholds(selectedDevice);\n    initializeChart();\n\n    localStorage.setItem('selectedDevice', selectedDevice);\n    if (currentDeviceData && currentDeviceData.hostname) {\n      localStorage.setItem('selectedHostname', currentDeviceData.hostname);\n    }\n\n    // Clear data displays\n    const deviceInfo = root_element.querySelector('#deviceInfo');\n    const sensorValues = root_element.querySelector('#sensorValues');\n    if (deviceInfo) deviceInfo.innerHTML = '';\n    if (sensorValues) sensorValues.innerHTML = '';\n\n    updateDataCard({}, selectedDevice);\n    \n    const syncButton = root_element.querySelector('#syncMQTT');\n    const stopButton = root_element.querySelector('#stopMQTT');\n\n    syncButton.addEventListener('click', startMQTTConnection);\n    stopButton.addEventListener('click', stopMQTTConnection);\n  });\n}\n\n\n//\nfunction getValueStatus(value, thresholds) {\n  if (!thresholds) return 'normal';\n\n  const numValue = parseFloat(value);\n  const highValue = thresholds.high ? parseFloat(thresholds.high) : null;\n  const lowValue = thresholds.low ? parseFloat(thresholds.low) : null;\n\n  // Check alerts first\n  if ((highValue !== null && numValue >= highValue) ||\n    (lowValue !== null && numValue <= lowValue)) {\n    return 'alert';\n  }\n\n  // Check warning zones (within 10% of thresholds)\n  if (highValue !== null) {\n    const highWarningThreshold = highValue * 0.9;\n    if (numValue >= highWarningThreshold) return 'warning';\n  }\n\n  if (lowValue !== null) {\n    const lowWarningThreshold = lowValue * 1.1;\n    if (numValue <= lowWarningThreshold) return 'warning';\n  }\n\n  return 'normal';\n}\n// Chart Helper Functions\nfunction createMarkLine(sensorVar) {\n  const thresholds = deviceAlertThresholds[sensorVar] || {};\n  const markLine = {\n    silent: true,\n    symbol: ['none', 'none'],\n    data: []\n  };\n\n  if (thresholds.high !== null && thresholds.high !== undefined) {\n    markLine.data.push({\n      name: 'High Alert',\n      yAxis: thresholds.high,\n      label: {\n        show: true,\n        position: 'insideStartTop',  // Position inside the chart area, at the start, above the line\n        formatter: `High: ${thresholds.high}`,\n        color: '#ff0000',\n        fontSize: 11,\n        padding: [2, 4],\n        backgroundColor: 'rgba(255, 255, 255, 0.7)', // Semi-transparent white background\n        distance: 5  // Distance from the line\n      },\n      lineStyle: {\n        type: 'dashed',\n        width: 2,\n        color: '#ff0000',\n        dashOffset: 0,\n        cap: 'round',\n        dash: [6, 4]\n      }\n    });\n  }\n\n  if (thresholds.low !== null && thresholds.low !== undefined) {\n    markLine.data.push({\n      name: 'Threshold Low',\n      yAxis: thresholds.low,\n      label: {\n        show: true,\n        position: 'insideStartBottom',  // Position inside the chart area, at the start, below the line\n        formatter: `Low: ${thresholds.low}`,\n        color: '#00ff00',\n        fontSize: 11,\n        padding: [2, 4],\n        backgroundColor: 'rgba(255, 255, 255, 0.7)', // Semi-transparent white background\n        distance: 5  // Distance from the line\n      },\n      lineStyle: {\n        type: 'dashed',\n        width: 2,\n        color: '#00ff00',\n        dashOffset: 0,\n        cap: 'round',\n        dash: [6, 4]\n      }\n    });\n  }\n\n  return markLine;\n}\n\nfunction getUOMForSeries(seriesName) {\n  const sensorVar = seriesName.split(' - ')[1];\n  return deviceAlertThresholds[sensorVar]?.uom || '';\n}\n\nfunction initializeChart() {\n  const chartDom = root_element.querySelector('#liveChart');\n  if (!chartDom) return;\n\n  if (chart) {\n    chart.dispose();\n  }\n\n  chart = echarts.init(chartDom, null, {\n    renderer: 'canvas',\n    useDirtyRect: true\n  });\n\n  const option = {\n    //title: {\n    //  text: 'Tiempo Real',\n    //  left: 'center',\n    //  top: 'bottom'\n    //},\n    tooltip: {\n      trigger: 'axis',\n      formatter: function (params) {\n        let result = params[0].axisValue + '<br/>';\n        params.forEach(param => {\n          if (param.value !== null && param.value[1] !== undefined) {\n            result += `${param.marker} ${param.seriesName}: ${param.value[1]}${getUOMForSeries(param.seriesName)}<br/>`;\n          }\n        });\n        return result;\n      }\n    },\n    legend: {\n      type: 'scroll',\n      data: [],\n      top: 0,  // Position the legend at the top\n      left: 'center',\n      padding: [0, 10, 10, 10],  // Add padding [top, right, bottom, left]\n      textStyle: {\n        fontSize: 11,\n        color: '#333'\n      }\n    },\n    grid: {\n      top: 21,\n      bottom: 5,\n      left: '1%',    // Reduced left margin\n      right: '1%',   // Reduced right margin\n      backgroundColor: '#e6f7ff', // Light cyan background\n      containLabel: true,\n      show: true,\n      borderWidth: 0\n    },\n    xAxis: {\n      type: 'time',\n      splitLine: {\n        show: true,\n        lineStyle: {\n          type: 'solid',\n          color: '#d9d9d9',\n          width: 1\n        }\n      },\n      axisPointer: {\n        animation: false\n      },\n      axisLine: {\n        show: true,\n        lineStyle: {\n          color: '#333'\n        }\n      },\n      axisTick: {\n        alignWithLabel: true,\n        length: 3\n      },\n      splitNumber: 3,\n      maxTicks: 3,\n      axisLabel: {\n        formatter: function (value) {\n          const date = new Date(value);\n          return date.toLocaleTimeString('es-ES', {\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit'\n          });\n        },\n        fontSize: 11,\n        color: '#333',\n        // Add padding to prevent label overlap\n        padding: [3, 0, 0, 0]\n      }\n    },\n    yAxis: {\n      type: 'value',\n      splitLine: {\n        show: true,\n        lineStyle: {\n          type: 'solid',\n          color: '#d9d9d9'\n        }\n      },\n      axisLabel: {\n        fontSize: 11,\n        color: '#333'\n      },\n      axisLine: {\n        show: true,\n        lineStyle: {\n          color: '#333'\n        }\n      },\n      scale: true\n    },\n    series: [],\n    animation: false\n  };\n\n  chart.setOption(option, true);\n\n  const resizeHandler = debounce(() => {\n    chart && chart.resize();\n  }, 100);\n  window.addEventListener('resize', resizeHandler);\n}\n\nfunction refreshChartMarklines(sensorVar) {\n  if (!chart) return;\n\n  const option = chart.getOption();\n  const deviceName = localStorage.getItem('selectedDevice');\n  const seriesName = `${deviceName} - ${sensorVar}`;\n  const seriesIndex = option.series.findIndex(s => s.name === seriesName);\n\n  if (seriesIndex === -1) return;\n\n  const series = {...option.series[seriesIndex]};\n  series.markLine = createMarkLine(sensorVar);\n\n  // Calculate new y-axis max including thresholds and data\n  let maxY = Math.max(\n    ...series.data.map(point => point[1] || 0),\n    deviceAlertThresholds[sensorVar]?.high || 0,\n    deviceAlertThresholds[sensorVar]?.low || 0\n  );\n  maxY = Math.ceil(maxY * 1.1); // Add 10% padding\n\n  // Update chart with new settings\n  chart.setOption({\n    yAxis: [{\n      max: maxY\n    }],\n    series: [series]\n  }, {\n    replaceMerge: ['series']\n  });\n}\n\nfunction updateLiveDataChart(parsedMessage, deviceName) {\n  if (!chart) return;\n\n  const { reading } = parsedMessage;\n  let timestamp;\n  // Parse the date string properly\n  if (reading.data_date) {\n    timestamp = new Date(reading.data_date).getTime();\n  } else {\n    timestamp = new Date().getTime();\n  }\n\n  const option = chart.getOption();\n  const maxPointsToShow = 300;\n  let needsUpdate = false;\n\n  // Calculate current max value from existing data and thresholds\n  const thresholdMax = Math.max(\n    ...Object.values(deviceAlertThresholds).map(t => \n      Math.max(t.high || 0, t.low || 0)\n    ), 0\n  );\n\n  // Process each reading\n  for (const [key, value] of Object.entries(reading)) {\n    if (key !== 'data_date' && key !== 'record') {\n      const numValue = parseFloat(value);\n      const seriesName = `${deviceName} - ${key}`;\n      const seriesIndex = option.series.findIndex(s => s.name === seriesName);\n      \n      // When creating or updating series, add these style properties:\n  const seriesStyle = {\n    type: 'line',\n    showSymbol: false,\n    symbolSize: 0,\n    lineStyle: {\n      width: 2,\n      color: '#D4A017'  // Brown color for the value line\n    },\n    areaStyle: {\n      opacity: 0  // No area fill\n    }\n  };\n      \n      if (seriesIndex === -1) {\n        // Create new series\n        option.series.push({\n          name: seriesName,\n          ...seriesStyle,\n          data: [[timestamp, numValue]],\n          markLine: createMarkLine(key)\n        });\n        option.legend[0].data.push(seriesName);\n      } else {\n        // Update existing series\n        const currentData = [...option.series[seriesIndex].data];\n        currentData.push([timestamp, numValue]);\n        \n        // Keep only last N points\n        if (currentData.length > maxPointsToShow) {\n          option.series[seriesIndex].data = currentData.slice(-maxPointsToShow);\n        } else {\n          option.series[seriesIndex].data = currentData;\n        }\n      }\n      needsUpdate = true;\n    }\n  }\n\n  if (needsUpdate) {\n    // Calculate max value from all visible data points\n    let dataMax = -Infinity;\n    option.series.forEach(series => {\n      if (series.data && series.data.length > 0) {\n        const seriesMax = Math.max(...series.data.map(point => point[1]));\n        dataMax = Math.max(dataMax, seriesMax);\n      }\n    });\n\n    // Use either the data maximum or threshold maximum, whichever is larger\n    const maxValue = Math.max(dataMax, thresholdMax);\n    // Add padding and round to nice number\n    const yAxisMax = calculateNiceMaxValue(maxValue);\n\n    const allTimestamps = option.series.flatMap(series => \n      series.data.map(point => point[0])\n    );\n    const minTime = Math.min(...allTimestamps);\n    const maxTime = Math.max(...allTimestamps);\n    \n    // Update chart with stable axes\n    chart.setOption({\n      xAxis: {\n        min: minTime,\n        max: maxTime,\n        splitNumber: 3, // Force 3 splits\n        maxTicks: 3     // Maximum number of ticks\n      },\n      yAxis: [{\n        max: yAxisMax,\n        min: 0,\n        interval: yAxisMax / 5\n      }],\n      series: option.series,\n      legend: option.legend\n    }, {\n      lazyUpdate: true,\n      silent: true\n    });\n  }\n}\n// Helper function to calculate a \"nice\" maximum value for the y-axis\nfunction calculateNiceMaxValue(value) {\n  if (value <= 0) return 10;\n  \n  // Find the magnitude (10^n) just larger than the value\n  const magnitude = Math.pow(10, Math.floor(Math.log10(value)));\n  const normalized = value / magnitude;\n\n  // Choose a nice number slightly larger than the value\n  let niceNumber;\n  if (normalized <= 1.2) niceNumber = 1.2;\n  else if (normalized <= 1.5) niceNumber = 1.5;\n  else if (normalized <= 2) niceNumber = 2;\n  else if (normalized <= 2.5) niceNumber = 2.5;\n  else if (normalized <= 3) niceNumber = 3;\n  else if (normalized <= 4) niceNumber = 4;\n  else if (normalized <= 5) niceNumber = 5;\n  else if (normalized <= 6) niceNumber = 6;\n  else if (normalized <= 8) niceNumber = 8;\n  else niceNumber = 10;\n\n  return niceNumber * magnitude;\n}\n/*****************/\n/* Thresholds    */\n/*****************/\n\nasync function fetchAlertThresholds(deviceName) {\n  const response = await frappe.call({\n    method: 'frappe.client.get',\n    args: {\n      doctype: 'CN Device',\n      name: deviceName,\n      fields: ['alert_item']\n    }\n  });\n  \n  if (response.message && response.message.alert_item) {\n    deviceAlertThresholds = {};\n    response.message.alert_item.forEach(alert => {\n      deviceAlertThresholds[alert.sensor_var] = {\n        high: alert.high_value,\n        low: alert.low_value,\n        uom: alert.uom,\n        alert_high: alert.alert_high,\n        alert_low: alert.alert_low,\n        stability_span: alert.stability_span || 5\n      };\n    });\n  }\n}\n\nfunction initializeThresholdHandlers() {\n  const thresholdsContainer = root_element.querySelector('#thresholdsContent');\n  if (!thresholdsContainer) return;\n\n  // Remove any existing listeners by cloning and replacing\n  const newContainer = thresholdsContainer.cloneNode(true);\n  thresholdsContainer.parentNode.replaceChild(newContainer, thresholdsContainer);\n\n  // Add event listener to the new container\n  newContainer.addEventListener('change', async function(e) {\n    const input = e.target;\n    \n    // Check if it's a threshold input\n    if (!input.matches('.threshold-input')) return;\n    \n    const deviceName = localStorage.getItem('selectedDevice');\n    const sensorVar = input.dataset.sensorVar;\n    const thresholdType = input.dataset.thresholdType;\n    const value = parseFloat(input.value);\n\n    console.log('Threshold change detected:', {\n      deviceName,\n      sensorVar,\n      thresholdType,\n      value\n    });\n\n    if (isNaN(value)) {\n      frappe.show_alert({\n        message: __('Por favor ingrese un valor numérico válido'),\n        indicator: 'red'\n      });\n      input.value = deviceAlertThresholds[sensorVar]?.[thresholdType] || '';\n      return;\n    }\n\n    try {\n      // Show loading state\n      input.disabled = true;\n      input.style.backgroundColor = '#f5f5f5';\n\n      // Update the alert threshold\n      await frappe.call({\n        method: 'pibiconnect.pibiconnect.api.update_alert_threshold',\n        args: {\n          device: deviceName,\n          sensor_var: sensorVar,\n          threshold_type: thresholdType,\n          value: value\n        }\n      });\n\n      // Update local cache\n      if (!deviceAlertThresholds[sensorVar]) {\n        deviceAlertThresholds[sensorVar] = {};\n      }\n      deviceAlertThresholds[sensorVar][thresholdType] = value;\n\n      // Update chart marklines\n      refreshChartMarklines(sensorVar);\n\n      frappe.show_alert({\n        message: __('Umbral actualizado correctamente'),\n        indicator: 'green'\n      });\n\n    } catch (error) {\n      console.error('Error updating threshold:', error);\n      frappe.show_alert({\n        message: __('Error actualizando umbral'),\n        indicator: 'red'\n      });\n      // Revert to previous value\n      input.value = deviceAlertThresholds[sensorVar]?.[thresholdType] || '';\n    } finally {\n      // Reset input state\n      input.disabled = false;\n      input.style.backgroundColor = '';\n    }\n  });\n}\n\nasync function initializeThresholds(deviceName) {\n  try {\n    const thresholdsContainer = root_element.querySelector('#thresholdsContent');\n    if (!thresholdsContainer) return;\n\n    await fetchAlertThresholds(deviceName);\n    thresholdsContainer.innerHTML = '';\n\n    Object.entries(deviceAlertThresholds).forEach(([sensorVarName, thresholds]) => {\n      const thresholdElement = document.createElement('div');\n      thresholdElement.classList.add('threshold-group');\n      \n      // Explicitly parse the stability span value, defaulting to 5\n      const stabilitySpan = parseInt(thresholds.stability_span) || 5;\n      \n      thresholdElement.innerHTML = `\n        <div class=\"threshold-header\">\n          <i class=\"fa fa-${getIconForSensorVar(sensorVarName)}\"></i>\n          <span>${sensorVarName}</span>\n        </div>\n        <div class=\"threshold-inputs\">\n          <div class=\"threshold-input-group\">\n            <label>Baj@</label>\n            <div class=\"threshold-input-wrapper\">\n              <input type=\"number\" \n                     class=\"threshold-input\" \n                     data-sensor-var=\"${sensorVarName}\" \n                     data-threshold-type=\"low\" \n                     value=\"${thresholds.low || ''}\"\n                     min=\"0\"\n                     step=\"0.1\">\n              <span class=\"uom\">${thresholds.uom || ''}</span>\n            </div>\n          </div>\n          <div class=\"threshold-input-group\">\n            <label>Alt@</label>\n            <div class=\"threshold-input-wrapper\">\n              <input type=\"number\" \n                     class=\"threshold-input\" \n                     data-sensor-var=\"${sensorVarName}\" \n                     data-threshold-type=\"high\" \n                     value=\"${thresholds.high || ''}\"\n                     min=\"0\"\n                     step=\"0.1\">\n              <span class=\"uom\">${thresholds.uom || ''}</span>\n            </div>\n          </div>\n        </div>\n        <div class=\"threshold-stability-group\">\n          <div class=\"stability-header\">\n            <span class=\"stability-value\">${stabilitySpan}s</span>\n          </div>\n          <div class=\"stability-slider-container\">\n            <div class=\"stability-track\">\n              <div class=\"stability-progress\" style=\"width: 100%\"></div>\n            </div>\n            <input type=\"range\" \n                   class=\"stability-slider\" \n                   data-sensor-var=\"${sensorVarName}\"\n                   data-current-value=\"${stabilitySpan}\"\n                   value=\"${stabilitySpan}\"\n                   min=\"1\"\n                   max=\"60\"\n                   step=\"1\">\n            <div class=\"stability-marks\">\n              <span>1s</span>\n              <span>30s</span>\n              <span>60s</span>\n            </div>\n          </div>\n          <div class=\"stability-info\">\n            <span>Tiempo mínimo para confirmar alerta</span>\n          </div>\n        </div>\n      `;\n\n      thresholdsContainer.appendChild(thresholdElement);\n\n      // Get elements after they're added to DOM\n      const slider = thresholdElement.querySelector('.stability-slider');\n      const valueDisplay = thresholdElement.querySelector('.stability-value');\n      const progressBar = thresholdElement.querySelector('.stability-progress');\n      \n      // Set initial styles\n      updateSliderVisuals(slider, progressBar, valueDisplay);\n\n      // Add input event listener for live updates while sliding\n      slider.addEventListener('input', function() {\n        updateSliderVisuals(this, progressBar, valueDisplay);\n      });\n\n      // Add change event listener for when sliding stops\n      slider.addEventListener('change', async function() {\n        const newValue = parseInt(this.value);\n        const oldValue = parseInt(this.dataset.currentValue);\n\n        try {\n          this.disabled = true;\n          await frappe.call({\n            method: 'pibiconnect.pibiconnect.api.update_stability_span',\n            args: {\n              device: deviceName,\n              sensor_var: sensorVarName,\n              stability_span: newValue\n            }\n          });\n\n          // Update successful\n          this.dataset.currentValue = newValue.toString();\n          if (deviceAlertThresholds[sensorVarName]) {\n            deviceAlertThresholds[sensorVarName].stability_span = newValue;\n          }\n\n          frappe.show_alert({\n            message: __('Tiempo de estabilidad actualizado'),\n            indicator: 'green'\n          });\n        } catch (error) {\n          console.error('Error updating stability span:', error);\n          \n          // Revert to previous value\n          this.value = oldValue;\n          updateSliderVisuals(this, progressBar, valueDisplay);\n          \n          frappe.show_alert({\n            message: __('Error actualizando tiempo de estabilidad'),\n            indicator: 'red'\n          });\n        } finally {\n          this.disabled = false;\n        }\n      });\n    });\n  } catch (error) {\n    console.error('Error initializing thresholds:', error);\n    frappe.show_alert({\n      message: __('Error inicializando umbrales'),\n      indicator: 'red'\n    });\n  }\n}\n\n// Helper function to update slider visuals\nfunction updateSliderVisuals(slider, progressBar, valueDisplay) {\n  const value = parseInt(slider.value);\n  const percentage = ((value - 1) / 59) * 100;\n  \n  // Update progress bar width\n  if (progressBar) {\n    progressBar.style.width = `${percentage}%`;\n  }\n  \n  // Update value display\n  if (valueDisplay) {\n    valueDisplay.textContent = `${value}s`;\n  }\n}\n\nfunction initializeSliderListeners(slider, valueDisplay, sensorVarName, deviceName) {\n  slider.addEventListener('input', function() {\n    const value = this.value;\n    const percentage = ((value - 1) / 59) * 100;\n    this.style.background = `linear-gradient(to right, #ff6900 ${percentage}%, #e9ecef ${percentage}%)`;\n    valueDisplay.textContent = `${value}s`;\n  });\n\n  slider.addEventListener('change', async function() {\n    try {\n      const value = parseInt(this.value);\n      await updateStabilitySpan(deviceName, sensorVarName, value);\n      if (deviceAlertThresholds[sensorVarName]) {\n        deviceAlertThresholds[sensorVarName].stability_span = value;\n      }\n      \n      frappe.show_alert({\n        message: __('Tiempo de estabilidad actualizado'),\n        indicator: 'green'\n      });\n    } catch (error) {\n      console.error('Error updating stability span:', error);\n      frappe.show_alert({\n        message: __('Error actualizando tiempo de estabilidad'),\n        indicator: 'red'\n      });\n      // Revert to previous value\n      const prevValue = deviceAlertThresholds[sensorVarName]?.stability_span || 5;\n      this.value = prevValue;\n      const prevPercentage = ((prevValue - 1) / 59) * 100;\n      this.style.background = `linear-gradient(to right, #ff6900 ${prevPercentage}%, #e9ecef ${prevPercentage}%)`;\n      valueDisplay.textContent = `${prevValue}s`;\n    }\n  });\n}\n\n\n\n\n\n/*****************/\n/* Devices       */\n/*****************/\nasync function fetchDeviceGeneralData(deviceName) {\n  try {\n    const response = await frappe.call({\n      method: 'frappe.client.get',\n      args: {\n        doctype: 'CN Device',\n        name: deviceName,\n        fields: ['*']\n      }\n    });\n    return response.message;\n  } catch (error) {\n    console.error(\"Error fetching device general data:\", error);\n    return null;\n  }\n}\n\nasync function fetchDeviceDetails(deviceName) {\n  try {\n    const response = await frappe.call({\n      method: 'frappe.client.get',\n      args: {\n        doctype: 'CN Device',\n        name: deviceName,\n        fields: ['name', 'alias', 'device_shortcut', 'hostname', 'place_name', 'sensor_type', 'connected_at', 'connected', 'data_item']\n      }\n    });\n    return response.message;\n  } catch (error) {\n    console.error(\"Error fetching device details:\", error);\n    return null;\n  }\n}\n\nfunction loadDevicesForFilter() {\n  frappe.call({\n    method: 'frappe.client.get_list',\n    args: {\n      doctype: 'CN Device',\n      fields: ['name', 'device_shortcut', 'alias']\n    },\n    callback: function (response) {\n      if (response.message) {\n        const deviceFilter = root_element.querySelector('#deviceFilter');\n        const devices = response.message;\n        devices.forEach(device => {\n          const option = document.createElement('option');\n          option.value = device.name;\n          option.textContent = device.alias || device.device_shortcut;\n          deviceFilter.appendChild(option);\n        });\n      }\n    }\n  });\n}\n\nfunction startDeviceRefresh() {\n  if (refreshInterval) {\n    clearInterval(refreshInterval);\n  }\n  refreshInterval = setInterval(loadDevices, REFRESH_INTERVAL);\n  loadDevices();\n}\n\nfunction stopDeviceRefresh() {\n  if (refreshInterval) {\n    clearInterval(refreshInterval);\n    refreshInterval = null;\n  }\n}\n\nfunction resetDeviceDisplay() {\n  deviceInfoInitialized = false;\n}\n\nfunction fetchAllDevices() {\n  frappe.call({\n    method: 'frappe.client.get_list',\n    args: {\n      doctype: 'CN Device',\n      fields: ['name', 'hostname']\n    },\n    callback: function (response) {\n      if (response.message) {\n        localStorage.setItem('allDevices', JSON.stringify(response.message));\n      }\n    }\n  });\n}\n\n/*****************/\n/* Map           */\n/*****************/\nfunction initializeMap() {\n  try {\n    const mapElement = root_element.querySelector('#map');\n    if (!mapElement || typeof L === 'undefined') {\n      console.error('Map element not found or Leaflet not loaded');\n      return;\n    }\n\n    if (map) {\n      map.invalidateSize();\n      debouncedLoadDeviceLocations();\n      return;\n    }\n\n    map = L.map(mapElement).setView([43.5376186, -5.6595290], 13);\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '© OpenStreetMap contributors'\n    }).addTo(map);\n\n    markersCluster = L.markerClusterGroup({\n      spiderfyOnMaxZoom: true,\n      showCoverageOnHover: false,\n      zoomToBoundsOnClick: true,\n      iconCreateFunction: function (cluster) {\n        return L.divIcon({\n          html: `<div class=\"cluster-icon\">${cluster.getChildCount()}</div>`,\n          className: 'custom-cluster-icon',\n          iconSize: L.point(40, 40)\n        });\n      }\n    });\n\n    map.addLayer(markersCluster);\n    \n    window.addEventListener('orientationchange', debouncedUpdateMap);\n    window.addEventListener('resize', debouncedUpdateMap);\n    \n    debouncedLoadDeviceLocations();\n\n  } catch (error) {\n    console.error('Error initializing map:', error);\n  }\n}\n\nconst debouncedLoadDeviceLocations = debounce(() => {\n  const now = Date.now();\n  if (now - lastLoadTime > loadInterval) {\n    loadDeviceLocations();\n    lastLoadTime = now;\n  }\n}, 300);\n\nconst debouncedUpdateMap = debounce(() => {\n  if (map) {\n    map.invalidateSize();\n    debouncedLoadDeviceLocations();\n  }\n}, 300);\n\nfunction loadDeviceLocations() {\n  if (markersCluster) {\n    markersCluster.clearLayers();\n  }\n\n  frappe.call({\n    method: 'frappe.client.get_list',\n    args: {\n      doctype: 'CN Device',\n      fields: ['name', 'alias', 'device_shortcut', 'location']\n    },\n    callback: function (response) {\n      if (response.message) {\n        let validLocationsCount = 0;\n        const locationMap = new Map();\n\n        response.message.forEach(device => {\n          if (device.location) {\n            try {\n              const locationData = JSON.parse(device.location);\n              if (locationData.type === 'FeatureCollection' &&\n                locationData.features &&\n                locationData.features.length > 0 &&\n                locationData.features[0].geometry &&\n                locationData.features[0].geometry.type === 'Point') {\n\n                const [lon, lat] = locationData.features[0].geometry.coordinates;\n                if (!isNaN(lat) && !isNaN(lon)) {\n                  const locationKey = `${lat},${lon}`;\n                  if (!locationMap.has(locationKey)) {\n                    locationMap.set(locationKey, []);\n                  }\n                  locationMap.get(locationKey).push({\n                    name: device.name,\n                    alias: device.alias || device.device_shortcut\n                  });\n                }\n              }\n            } catch (error) {\n              console.warn(`Error parsing location for device ${device.name}: ${error.message}`);\n            }\n          }\n        });\n\n        const bounds = L.latLngBounds();\n\n        locationMap.forEach((devices, locationKey) => {\n          const [lat, lon] = locationKey.split(',').map(Number);\n\n          const customIcon = L.divIcon({\n            html: `<div class=\"custom-marker\">\n                     <span class=\"marker-pin\"></span>\n                     <span class=\"device-count\">${devices.length}</span>\n                   </div>`,\n            className: 'custom-icon',\n            iconSize: [30, 42],\n            iconAnchor: [15, 42]\n          });\n\n          const marker = L.marker([lat, lon], { icon: customIcon });\n\n          const popupContent = devices.map(device =>\n            `<b>${device.alias}</b> (${device.name})`\n          ).join('<br>');\n\n          marker.bindPopup(`<div style=\"max-height: 200px; overflow-y: auto;\">\n                              <h5>Dispositivos en este lugar:</h5>\n                              ${popupContent}\n                            </div>`);\n\n          markersCluster.addLayer(marker);\n          bounds.extend([lat, lon]);\n          validLocationsCount++;\n        });\n\n        if (validLocationsCount > 0) {\n          map.fitBounds(bounds.pad(0.1));\n        }\n      }\n    }\n  });\n}\n\nfunction updateMap() {\n  if (map) {\n    setTimeout(function () {\n      map.invalidateSize();\n      loadDeviceLocations();\n    }, 100);\n  }\n}\n\n/*****************/\n/* Utilities     */\n/*****************/\nfunction getIconForSensorVar(sensorVar) {\n  const iconMap = {\n    'temperature': 'thermometer-half',\n    'humidity': 'tint',\n    'pressure': 'tachometer',\n    'memory': 'microchip',\n    'disk': 'hdd-o',\n    'battery': 'battery-half',\n    'light': 'lightbulb-o',\n    'co2': 'cloud',\n    'sound': 'volume-up',\n    'motion': 'male',\n    'vibration': 'exchange',\n    'wind speed': 'flag',\n    'rainfall': 'tint',\n    'uv index': 'sun-o',\n    'voltage': 'bolt',\n    'fluorescence': 'bolt',\n  };\n\n  return iconMap[sensorVar] || 'question-circle';\n}\n\nfunction getLastSeenText(lastSeen) {\n  if (!lastSeen) return 'N/A';\n  const now = new Date();\n  const lastSeenDate = new Date(lastSeen);\n  const diffMinutes = Math.floor((now - lastSeenDate) / (1000 * 60));\n\n  if (diffMinutes < 60) {\n    return `${diffMinutes} min ago`;\n  } else if (diffMinutes < 1440) {\n    return `${Math.floor(diffMinutes / 60)} hours ago`;\n  } else {\n    return lastSeenDate.toLocaleString();\n  }\n}\n\nfunction isInAlert(value, thresholds) {\n  const numValue = parseFloat(value);\n  const highValue = thresholds.high ? parseFloat(thresholds.high) : null;\n  const lowValue = thresholds.low ? parseFloat(thresholds.low) : null;\n\n  return (highValue !== null && numValue >= highValue) ||\n    (lowValue !== null && numValue <= lowValue);\n}\n\nfunction debounce(func, wait) {\n  let timeout;\n  return function executedFunction(...args) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n}\n\nfunction fullScreen() {\n  let layoutMainSection = document.querySelector('.layout-main-section');\n  if (layoutMainSection) {\n    layoutMainSection.style.padding = \"0\";\n    layoutMainSection.style.border = \"none\";\n  }\n  let ceBlockContent = document.querySelector('.ce-block__content');\n  if (ceBlockContent) {\n    ceBlockContent.style.padding = \"0\";\n  }\n  let widget = document.querySelector('.widget.custom-block-widget-box.full-width');\n  if (widget) {\n    widget.style.padding = \"0\";\n  }\n}\n\n/************************/\n/* Socket Initialization */\n/************************/\n// Initialize socket connections\nif (typeof frappe !== 'undefined' && frappe.socketio) {\n  const socket = frappe.socketio.socket;\n\n  if (socket) {\n    socket.on('connect', function () {\n      socket.emit('subscribe', 'mqtt_message');\n    });\n\n    socket.on('mqtt_message', function (data) {\n      displayMessage(data.topic, data.payload);\n    });\n\n    socket.on('disconnect', function () {\n      // Handle disconnect if needed\n    });\n\n    socket.on('connect_error', function (error) {\n      console.error('Connection error:', error);\n    });\n  } else {\n    console.error('Frappe socket.io socket is not defined');\n  }\n} else {\n  console.error('Frappe socket.io is not available');\n}",
  "style": "/* Base Styles */\n#sensor-management-interface {\n  font-family: Helvetica, sans-serif;\n  width: 100%;\n  margin: 0;\n  background-color: #f5f7fa;\n}\n\n.work-content {\n  display: flex;\n  gap: 9px;\n  padding: 6px;\n}\n\n/* Card Base Styles */\n.card {\n  background-color: #ffffff;\n  border-radius: 6px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n}\n\n.card.works {\n  flex-grow: 1;\n  height: calc(100vh - 100px);\n  max-height: calc(100vh - 100px);\n  overflow-y: auto;\n  padding: 9px;\n  background-image: url(\"/assets/pibiconnect/images/bg_hydrosentinel.webp\");\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  position: relative;\n}\n\n.card.works::before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(255, 255, 255, 0.9);\n  z-index: 1;\n}\n\n.card.works > * {\n  position: relative;\n  z-index: 2;\n}\n\n/* Tab Navigation Styles */\n.tab.statements {\n  display: flex;\n  gap: 9px;\n  margin-bottom: 9px;\n  border-bottom: 1px solid #e0e0e0;\n  padding-bottom: 9px;\n}\n\n.tablinks {\n  background-color: transparent;\n  color: #333;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  padding: 6px;\n  transition: 0.3s;\n  font-size: 12px;\n  border-radius: 6px;\n}\n\n.tablinks:hover {\n  background-color: #f0f0f0;\n}\n\n.tablinks.active {\n  background-color: #21b7bb;\n  color: #ffffff;\n}\n\n.tablinks.active .icon-img {\n  filter: brightness(0) invert(1);\n}\n\n.icon-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 3px;\n}\n\n.icon-img {\n  width: 21px;\n  height: 21px;\n}\n\n.icon-label {\n  font-size: 12px;\n}\n\n/* Tab Content Base Styles */\n.tabcontent {\n  display: none;\n  padding: 9px;\n  background-color: #fff;\n  border-radius: 6px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.tabcontent.active {\n  display: block;\n}\n\n/* Filter Styles */\n.filters {\n  display: flex;\n  gap: 9px;\n  margin-bottom: 9px;\n}\n\n.filter-group {\n  flex-grow: 1;\n  position: relative;\n}\n\n.filter-group label {\n  position: absolute;\n  top: -10px;\n  left: 10px;\n  background-color: #ffffff;\n  padding: 0 5px;\n  font-size: 12px;\n  color: #21b7bb;\n  z-index: 1;\n}\n\n.filter-dropdown {\n  width: 100%;\n  padding: 3px;\n  border: 1px solid #21b7bb;\n  border-radius: 6px;\n  background-color: #ffffff;\n  font-size: 12px;\n  color: #333;\n  appearance: none;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12'%3E%3Cpath fill='%2317a2b8' d='M10.293 3.293L6 7.586 1.707 3.293A1 1 0 00.293 4.707l5 5a1 1 0 001.414 0l5-5a1 1 0 10-1.414-1.414z'/%3E%3C/svg%3E\");\n  background-repeat: no-repeat;\n  background-position: right 10px center;\n}\n\n/* Device List Styles */\n.device-list {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 3px;\n}\n\n.device-card {\n  background-color: #ffffff;\n  border-radius: 6px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  padding: 9px;\n  transition: all 0.3s ease;\n}\n\n.device-card:hover {\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.15);\n}\n\n.device-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 6px;\n}\n\n.device-header label {\n  font-size: 13px;\n  font-weight: bold;\n  color: #21b7bb;\n  max-width: 100%;\n  overflow: hidden;\n}\n\n.device-header label a {\n  display: inline-block;\n  max-width: 27ch;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: inherit;\n  text-decoration: none;\n}\n\n.device-header label a span {\n  font-weight: bold;\n}\n\n.last-seen {\n  font-size: 11px;\n  color: #666;\n  margin-left: auto;\n  margin-right: 5px;\n}\n\n/* Status Indicators */\n.status-indicator {\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n  flex-shrink: 0;\n}\n\n.status-connected { \n  background-color: #28a745; \n}\n\n.status-disconnected { \n  background-color: #dc3545; \n}\n\n.status-normal {\n  background-color: #52c41a;\n  width: 8px;\n  height: 8px;\n}\n\n.status-warning {\n  background-color: #faad14;\n  width: 8px;\n  height: 8px;\n}\n\n.status-alert {\n  background-color: #ff4d4f;\n  width: 16px;\n  height: 16px;\n}\n\n/* Status Circle */\n.status-circle {\n  width: 36px;\n  height: 36px;\n  border-radius: 50%;\n  transition: all 0.3s ease;\n  box-shadow: 0 1px 3px rgba(0,0,0,0.2);\n}\n\n.status-circle-normal {\n  background-color: #52c41a;\n  border: 2px solid #fff;\n}\n\n.status-circle-alert {\n  background-color: #ff4d4f;\n  border: 2px solid #fff;\n}\n\n.status-text {\n  font-size: 11px;\n  color: #666;\n  order: -1;\n  margin-right: 6px;\n}\n\n/* Device Body Layout */\n.device-body {\n  display: flex;\n  font-size: 12px;\n}\n\n.device-info-column {\n  flex: 0 0 70%;\n  padding-right: 9px;\n  line-height: 1;\n}\n\n.device-data-column {\n  flex: 0 0 30%;\n  border-left: 1px solid #e0e0e0;\n  padding-left: 9px;\n}\n\n.device-info, \n.data-item {\n  margin-bottom: 1px;\n}\n\n.device-info span {\n  font-weight: 600;\n}\n\n.data-item {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  font-size: 11px;\n}\n\n.data-value {\n  font-weight: bold;\n  color: #21b7bb;\n  margin-right: 3px;\n}\n\n/* Live Data Container New Layout */\n.live-data-container {\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  margin-top: 9px;\n  width: 100%;\n}\n\n/* Chart Section */\n.chart-card {\n  width: 100%;\n  background-color: #fff;\n  border-radius: 9px;\n  padding: 15px;\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n}\n\n#liveChart {\n  width: 100%;\n  height: 400px;\n  border-radius: 6px;\n}\n\n/* Bottom Cards Layout */\n.bottom-cards-container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 6px;\n  width: 100%;\n}\n\n.thresholds-card,\n.values-card,\n.logo-card {\n  background-color: #fff;\n  border-radius: 9px;\n  padding: 3px;\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n  height: 100%;\n}\n\n.card-header {\n  font-size: 12px;\n  font-weight: 600;\n  color: #333;\n  margin-bottom: 12px;\n  padding: 3px;\n  border-bottom: 1px solid #eee;\n  background-color: #fff;\n}\n\n/* Threshold Controls */\n.threshold-group {\n  margin-bottom: 3px;\n  padding-bottom: 3px;\n  border-bottom: 1px solid #eee;\n}\n\n.threshold-group:last-child {\n  margin-bottom: 0;\n  padding-bottom: 0;\n  border-bottom: none;\n}\n\n.threshold-header {\n  display: flex;\n  align-items: center;\n  gap: 3px;\n  margin-bottom: 3px;\n  font-size: 12px;\n  color: #666;\n}\n\n.threshold-inputs {\n  display: grid;\n  gap: 3px;\n}\n\n.threshold-input-group {\n  display: grid;\n  grid-template-columns: 40px 1fr auto;\n  align-items: center;\n  gap: 3px;\n}\n\n.threshold-input-group label {\n  color: #666;\n  font-size: 12px;\n}\n\n.threshold-input {\n  width: 100%;\n  padding: 1px 3px;\n  border: 1px solid #ddd;\n  border-radius: 6px;\n  font-size: 12px;\n  text-align: right;\n}\n\n.threshold-input:focus {\n  border-color: #21b7bb;\n  outline: none;\n}\n\n.uom {\n  font-size: 12px;\n  color: #666;\n  min-width: 20px;\n}\n\n/* Sensor Data Containers */\n.sensor-data-container {\n  display: flex;\n  flex-direction: column;\n  border-radius: 12px;\n  overflow: hidden;\n  background-color: #f8f9fa;\n}\n\n.sensor-data-item {\n  display: grid;\n  grid-template-columns: auto 1fr;\n  gap: 3px;\n  align-items: center;\n  padding: 3px;\n  background-color: #fff;\n}\n\n.sensor-data-item + .sensor-data-item {\n  border-top: 1px solid #e9ecef;\n}\n\n.sensor-data-item:first-child {\n  border-top-left-radius: 12px;\n  border-top-right-radius: 12px;\n}\n\n.sensor-data-item:last-child {\n  border-bottom-left-radius: 12px;\n  border-bottom-right-radius: 12px;\n}\n\n/* Sensor Information Display */\n.sensor-info {\n  display: grid;\n  gap: 3px;\n}\n\n.sensor-value {\n  font-size: 12px;\n  font-weight: 500;\n}\n\n.sensor-thresholds {\n  font-size: 12px;\n  color: #6c757d;\n}\n\n.sensor-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 4px;\n}\n\n.sensor-name {\n  font-size: 13px;\n  color: #666;\n}\n\n.sensor-timestamp {\n  font-size: 11px;\n  color: #999;\n}\n\n/* General Data Container */\n.general-data-container {\n  display: flex;\n  flex-direction: column;\n  border-radius: 12px;\n  overflow: hidden;\n  padding: 3px;\n  margin-bottom: 6px;\n}\n\n.general-data-item {\n  padding: 3px;\n  padding-left: 6px;\n  background-color: #fff;\n}\n\n.general-data-item + .general-data-item {\n  border-top: 1px solid #e9ecef;\n}\n\n.general-data-item:first-child {\n  border-top-left-radius: 12px;\n  border-top-right-radius: 12px;\n}\n\n.general-data-item:last-child {\n  border-bottom-left-radius: 12px;\n  border-bottom-right-radius: 12px;\n}\n\n.general-info {\n  font-size: 12px;\n}\n\n.general-info div {\n  margin-bottom: 1px;\n}\n\n.general-info strong {\n  color: #333;\n}\n\n/* Icon Styles */\n.sensor-icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n  background-color: #f5f5f5;\n  border-radius: 50%;\n  margin-right: 3px;\n}\n\n.sensor-icon i {\n  font-size: 16px;\n  color: #666;\n}\n\n/* Map Styles */\n#map {\n  width: 100%;\n  height: 400px;\n  border-radius: 6px;\n  overflow: hidden;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n/* Custom Marker Styles */\n.custom-marker {\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.marker-pin {\n  width: 30px;\n  height: 30px;\n  border-radius: 50% 50% 50% 0;\n  background: #c30b82;\n  position: absolute;\n  transform: rotate(-45deg);\n  left: 50%;\n  top: 50%;\n  margin: -15px 0 0 -15px;\n}\n\n.marker-pin::after {\n  content: '';\n  width: 24px;\n  height: 24px;\n  margin: 3px 0 0 3px;\n  background: #fff;\n  position: absolute;\n  border-radius: 50%;\n}\n\n.device-count {\n  width: 22px;\n  height: 22px;\n  line-height: 22px;\n  display: block;\n  color: #000;\n  text-align: center;\n  position: absolute;\n  font-size: 12px;\n  font-weight: bold;\n  z-index: 1;\n}\n\n.custom-cluster-icon {\n  background-color: #1978c8;\n  border-radius: 50%;\n  text-align: center;\n  color: white;\n  font-weight: bold;\n  border: 2px solid #fff;\n  font-size: 16px;\n}\n\n.cluster-icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n}\n\n/* Messages Container */\n.messages-container {\n  flex: 2;\n  min-height: 400px;\n  border: 1px solid #ddd;\n  border-radius: 6px;\n  padding: 9px;\n  background-color: #fff;\n  overflow-y: auto;\n  max-height: 400px;\n  display: none;\n}\n\n.message-item {\n  font-size: 10px;\n  padding: 1px;\n  margin: 1px;\n  line-height: 1;\n}\n\n/* Info Row Styles */\n.info-row {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  font-size: 12px;\n  line-height: 1.1;\n  margin-bottom: 3px;\n}\n\n.info-row strong {\n  min-width: 80px;\n  color: #666;\n}\n\n.info-row a {\n  color: #21b7bb;\n  text-decoration: none;\n}\n\n.info-row a:hover {\n  text-decoration: underline;\n}\n\n/* Ensure the Location and LiveData tab content is visible */\n#Location, \n#LiveData {\n  display: block;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .work-content {\n    flex-direction: column;\n  }\n\n  .filters {\n    flex-direction: column;\n  }\n\n  .device-list {\n    grid-template-columns: 1fr;\n  }\n\n  .device-body {\n    flex-direction: column;\n  }\n\n  .device-data-column {\n    border-left: none;\n    border-top: 1px solid #e0e0e0;\n    padding-left: 0;\n    padding-top: 9px;\n    margin-top: 9px;\n  }\n\n  #map, \n  #liveChart {\n    height: 300px;\n  }\n\n  .bottom-cards-container {\n    grid-template-columns: 1fr;\n  }\n\n  .chart-container,\n  .messages-container {\n    width: 100%;\n  }\n\n  .threshold-input-group {\n    grid-template-columns: 30px 1fr auto;\n  }\n\n  .info-row strong {\n    min-width: 60px;\n  }\n\n  .logo-container img {\n    max-width: 150px;\n  }\n}\n\n@media (max-width: 480px) {\n  .device-header label a {\n    max-width: 20ch;\n  }\n\n  .threshold-input-group {\n    grid-template-columns: 25px 1fr auto;\n  }\n\n  .sensor-icon {\n    width: 24px;\n    height: 24px;\n  }\n\n  .sensor-icon i {\n    font-size: 14px;\n  }\n}\n\n/* Stability Slider Styles */\n.threshold-stability-group {\n    margin: 0;\n    padding: 0;\n    border-top: 1px dashed #eee;\n}\n\n.stability-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 0;\n    font-size: 11px;\n}\n\n.stability-value {\n    font-family: monospace;\n    font-size: 14px;\n    color: #21b7bb;\n    font-weight: 500;\n}\n\n.stability-slider-container {\n    position: relative;\n    padding: 0;\n    margin: 0;\n    line-height: 1;\n}\n\n.stability-slider {\n    -webkit-appearance: none;\n    width: 100%;\n    height: 8px;\n    background: #e9ecef;\n    border-radius: 3px;\n    outline: none;\n    margin: 10px 0;\n}\n\n.stability-slider::-webkit-slider-thumb,\n.stability-slider::-moz-range-thumb {\n    width: 18px;\n    height: 18px;\n    border-radius: 50%;\n    background: #21b7bb;\n    cursor: pointer;\n    border: 2px solid #fff;\n    box-shadow: 0 1px 3px rgba(0,0,0,0.2);\n    transition: all 0.2s ease;\n}\n\n.stability-slider::-webkit-slider-thumb:hover,\n.stability-slider::-moz-range-thumb:hover {\n    background: #138496;\n    transform: scale(1.5);\n}\n\n.stability-slider:active::-webkit-slider-thumb,\n.stability-slider:active::-moz-range-thumb {\n    background: #138496;\n    transform: scale(1.1);\n}\n\n.stability-slider::-webkit-slider-runnable-track,\n.stability-slider::-moz-range-track {\n    background: linear-gradient(to right, #21b7bb var(--value-percent, 50%), #e9ecef var(--value-percent, 50%));\n    height: 8px;\n    border-radius: 3px;\n}\n\n.stability-marks {\n    display: flex;\n    justify-content: space-between;\n    padding: 0;\n    margin-top: 0;\n    font-size: 11px;\n    color: #666;\n}\n\n.stability-info {\n    display: flex;\n    align-items: center;\n    margin-top: 6px;\n    font-size: 11px;\n    color: #666;\n}\n\n.stability-info span {\n    color: #666;\n}\n\n/* Update sensor info layout */\n.sensor-info {\n    display: flex;\n    flex-direction: column;\n    gap: 3px;\n    width: 100%; /* Ensure full width */\n}\n\n.sensor-data-row {\n    display: grid;\n    grid-template-columns: auto 1fr;\n    width: 100%;\n    gap: 6px;\n    align-items: center;\n}\n\n.sensor-name {\n    font-size: 13px;\n    color: #666;\n    text-align: left;\n}\n\n.sensor-value-group {\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n    gap: 6px;\n}\n\n.sensor-status-row {\n    display: flex;\n    align-items: center;\n    gap: 6px;\n    padding-top: 3px;\n    border-top: 1px dotted #eee;\n    justify-content: flex-end;\n}\n\n.sensor-status-circle {\n    width: 39px;\n    height: 39px;\n    /*border-radius: 50%;*/\n    transform: rotate(45deg);\n    margin-right: 9px;\n    transition: all 0.3s ease;\n    box-shadow: 0 1px 3px rgba(0,0,0,0.2);\n}\n\n.status-circle-normal {\n    background-color: #52c41a;\n    border: 2px solid #fff;\n}\n\n.status-circle-alert {\n    background-color: #ff4d4f;\n    border: 2px solid #fff;\n}\n/* Add to your existing CSS*/\n.stability-slider {\n  -webkit-appearance: none;\n  width: 100%;\n  height: 8px;\n  border-radius: 4px;\n  outline: none;\n  transition: background 0.2s;\n}\n\n.stability-slider::-webkit-slider-thumb {\n  -webkit-appearance: none;\n  appearance: none;\n  width: 16px;\n  height: 16px;\n  border-radius: 50%;\n  background: #21b7bb;\n  cursor: pointer;\n  border: 2px solid #fff;\n  box-shadow: 0 1px 3px rgba(0,0,0,0.2);\n  transition: all 0.2s ease;\n}\n\n.stability-slider::-moz-range-thumb {\n  width: 16px;\n  height: 16px;\n  border-radius: 50%;\n  background: #21b7bb;\n  cursor: pointer;\n  border: 2px solid #fff;\n  box-shadow: 0 1px 3px rgba(0,0,0,0.2);\n  transition: all 0.2s ease;\n}\n.threshold-input-group {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 4px;\n}\n\n.threshold-input {\n  width: 80px;\n  padding: 4px 8px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 14px;\n  text-align: right;\n}\n\n.threshold-input:focus {\n  border-color: #21b7bb;\n  outline: none;\n}\n\n.threshold-input:disabled {\n  background-color: #f5f5f5;\n  cursor: not-allowed;\n}\n\n\n  .stability-track {\n    position: absolute;\n    top: 50%;\n    left: 0;\n    right: 0;\n    height: 4px;\n    background: #e9ecef;\n    transform: translateY(-50%);\n    border-radius: 2px;\n  }\n\n  .stability-progress {\n    position: absolute;\n    left: 0;\n    top: 0;\n    height: 100%;\n    background: #21b7bb;\n    border-radius: 2px;\n    transition: width 0.1s ease;\n  }\n\n  .stability-slider {\n    position: relative;\n    width: 100%;\n    -webkit-appearance: none;\n    background: transparent;\n    z-index: 2;\n  }\n\n  .stability-slider::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    height: 16px;\n    width: 16px;\n    border-radius: 50%;\n    background: #21b7bb;\n    cursor: pointer;\n    border: none;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n  }\n\n  .stability-slider::-moz-range-thumb {\n    height: 16px;\n    width: 16px;\n    border-radius: 50%;\n    background: #21b7bb;\n    cursor: pointer;\n    border: none;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n  }\n\n  .stability-slider:focus {\n    outline: none;\n  }\n\n  .stability-marks {\n    display: flex;\n    justify-content: space-between;\n    margin-top: 8px;\n    padding: 0 2px;\n    font-size: 12px;\n    color: #666;\n  }\n\n/* Stability Slider Styles */\n\n.stability-track {\n  position: absolute;\n  top: 50%;\n  left: 0;\n  right: 0;\n  height: 4px;\n  background: #e9ecef;\n  transform: translateY(-50%);\n  border-radius: 2px;\n}\n\n.stability-progress {\n  position: absolute;\n  left: 0;\n  top: 0;\n  height: 100%;\n  background: #21b7bb;\n  border-radius: 2px;\n  transition: width 0.1s ease;\n}\n\n.stability-slider {\n  position: relative;\n  width: 100%;\n  height: 4px; /* Match track height */\n  -webkit-appearance: none;\n  background: transparent;\n  z-index: 2;\n  margin: 0;\n  cursor: pointer;\n}\n\n/* Center the slider thumb vertically */\n.stability-slider::-webkit-slider-thumb {\n  -webkit-appearance: none;\n  appearance: none;\n  height: 16px;\n  width: 16px;\n  border-radius: 50%;\n  background: #21b7bb;\n  cursor: pointer;\n  border: 2px solid #fff;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n  transform: translateY(-6px); /* Adjust to perfectly center on the track */\n}\n\n.stability-slider::-moz-range-thumb {\n  height: 16px;\n  width: 16px;\n  border-radius: 50%;\n  background: #21b7bb;\n  cursor: pointer;\n  border: 2px solid #fff;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n  transform: translateY(-6px); /* Adjust to perfectly center on the track */\n}\n\n.stability-slider:focus {\n  outline: none;\n}\n\n/* Input Styles Adjustment */\n.threshold-input-group {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  margin-bottom: 4px;\n  width: 50%; /* Set each group to take 50% width */\n}\n\n.threshold-input {\n  width: calc(100% - 50px);\n  padding: 2px 4px; /* Reduce padding */\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 12px; /* Match the rest of the UI font size */\n  text-align: right;\n}\n\n.threshold-input:focus {\n  border-color: #21b7bb;\n  outline: none;\n}\n\n.threshold-input:disabled {\n  background-color: #f5f5f5;\n  cursor: not-allowed;\n}\n\n.uom {\n  font-size: 12px;\n  color: #666;\n  margin-left: 4px;\n}\n\n/* Marks Adjustment */\n.stability-marks {\n  display: flex;\n  justify-content: space-between;\n  padding: 0;\n  margin-top: 5px;\n  font-size: 11px;\n  color: #666;\n}\n\n.stability-value {\n  font-family: monospace;\n  font-size: 12px; /* Adjust to match the label size */\n  color: #21b7bb;\n  font-weight: 500;\n}\n\n/* Threshold Group Container */\n.threshold-group {\n  padding: 8px;\n  border-bottom: 1px solid #eee;\n}\n\n.threshold-group:last-child {\n  border-bottom: none;\n}\n\n/* Threshold Header */\n.threshold-header {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  margin-bottom: 8px;\n}\n\n.threshold-header i {\n  color: #666;\n  font-size: 14px;\n}\n\n.threshold-header span {\n  color: #666;\n  font-size: 12px;\n  font-weight: 500;\n}\n\n/* Threshold Inputs Container */\n.threshold-inputs {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n  margin-bottom: 8px;\n}\n\n/* Individual Input Groups */\n.threshold-input-group {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  width: calc(50% - 4px);\n}\n\n/* Label Styling */\n.threshold-input-group label {\n  min-width: 36px;\n  font-size: 12px;\n  color: #666;\n}\n\n/* Input Wrapper */\n.threshold-input-wrapper {\n  display: flex;\n  align-items: center;\n  flex: 1;\n  min-width: 0;\n}\n\n/* Input Field */\n.threshold-input {\n  width: 100%;\n  padding: 4px 6px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 12px;\n  text-align: right;\n}\n\n.threshold-input:focus {\n  border-color: #21b7bb;\n  outline: none;\n}\n\n/* Unit of Measurement */\n.uom {\n  margin-left: 4px;\n  font-size: 11px;\n  color: #666;\n  white-space: nowrap;\n}\n\n/* Mobile Responsiveness */\n@media screen and (max-width: 768px) {\n  .threshold-inputs {\n    flex-direction: column;\n    gap: 6px;\n  }\n\n  .threshold-input-group {\n    width: 100%;\n  }\n}\n/* Logo Card Container */\n.logo-card {\n  background-color: #fff;\n  border-radius: 9px;\n  padding: 3px;\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n  height: 100%;\n  /* Add display flex to enable centering */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n/* Logo Container */\n.logo-container {\n  /* Remove any default margins that might affect centering */\n  margin: 0;\n  padding: 0;\n  /* Add flex display to center the img */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  /* Take up full space of parent */\n  width: 100%;\n  height: 100%;\n}\n\n.logo-container img {\n  max-width: 200px;\n  opacity: 1;\n  /* Remove any default margins/padding */\n  margin: 0;\n  padding: 0;\n  /* Maintain aspect ratio */\n  object-fit: contain;\n}\n\n/* Responsive adjustments */\n@media (max-width: 768px) {\n  .logo-container img {\n    max-width: 150px;\n  }\n}\n\n.threshold-stability-group {\n  display: none;  \n}"
 }
]