[
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<div id=\"custom-block\">\n  <button id=\"conn-btn\" class=\"btn btn-sm btn-primary\">Connect</button>\n  <button id=\"disconnect-btn\" class=\"btn btn-sm btn-primary\">Disconnect</button>\n  <div id=\"mqtt-messages\" class=\"mt-3\">\n    <h3>MQTT Messages</h3>\n    <div id=\"messages-container\"></div>\n  </div>\n  <div id=\"subscriber-status\"></div>\n</div>",
  "modified": "2024-05-27 08:50:39.881560",
  "name": "CN MQTT",
  "private": 0,
  "roles": [],
  "script": "const messagesContainer = root_element.querySelector('#messages-container');\nconst subscriberStatus = root_element.querySelector('#subscriber-status');\nconst connectBtn = root_element.querySelector('#conn-btn');\nconst disconnectBtn = root_element.querySelector('#disconnect-btn');\n\nfunction displayMessage(topic, message) {\n  const messageElement = document.createElement('div');\n  messageElement.classList.add('message');\n\n  // Check if the message is a JSON string and try to parse it\n  let formattedMessage;\n  try {\n    const jsonMessage = JSON.parse(message);\n    formattedMessage = `<pre class=\"mt-1\">${JSON.stringify(jsonMessage, null, 2)}</pre>`;\n  } catch (e) {\n    // If parsing fails, use the raw message\n    formattedMessage = message;\n  }\n\n  messageElement.innerHTML = `<strong>${topic}:</strong> ${formattedMessage}`;\n  messagesContainer.appendChild(messageElement);\n}\n\nconnectBtn.onclick = function() {\n  console.log(\"Connect button clicked\");\n  frappe.call({\n    method: 'pibiconnect.pibiconnect.mqtt_client.start_mqtt',\n    callback: function(response) {\n      if (response && response.message) {\n        console.log(`MQTT connection started: ${response.message.status}`);\n        frappe.show_alert(`MQTT connection started: ${response.message.status} with job ID: ${response.message.job_id}`);\n        updateStatus();\n      } else {\n        console.error('Failed to start MQTT connection', response);\n        frappe.show_alert('Failed to start MQTT connection');\n      }\n    },\n    error: function(error) {\n      console.error('Failed to start MQTT connection', error);\n      frappe.show_alert('Failed to start MQTT connection');\n    }\n  });\n};\n\ndisconnectBtn.onclick = function() {\n  console.log(\"Disconnect button clicked\");\n  frappe.call({\n    method: 'pibiconnect.pibiconnect.mqtt_client.stop_mqtt',\n    args: {\n      job_name: 'mqtt_start_job'\n    },\n    callback: function(response) {\n      if (response && response.message) {\n        console.log(`MQTT connection stopped: ${response.message.status}`);\n        frappe.show_alert(`MQTT connection stopped: ${response.message.status}`);\n        updateStatus();\n      } else {\n        console.error('Failed to stop MQTT connection', response);\n        frappe.show_alert('Failed to stop MQTT connection');\n      }\n    },\n    error: function(error) {\n      console.error('Failed to stop MQTT connection', error);\n      frappe.show_alert('Failed to stop MQTT connection');\n    }\n  });\n};\n\nfunction updateStatus() {\n  frappe.call({\n    method: 'pibiconnect.pibiconnect.mqtt_client.status',\n    callback: function(response) {\n      if (response && response.message) {\n        const status = response.message.status;\n        subscriberStatus.innerText = `Subscriber Status: ${status}`;\n      } else {\n        console.error('Failed to get MQTT status', response);\n        frappe.show_alert('Failed to get MQTT status');\n      }\n    },\n    error: function(error) {\n      console.error('Failed to get MQTT status', error);\n      frappe.show_alert('Failed to get MQTT status');\n    }\n  });\n}\n\n// Ensure Frappe socket.io is loaded and initialized\nif (typeof frappe !== 'undefined' && frappe.socketio) {\n  const socket = frappe.socketio.socket;\n\n  if (socket) {\n    // Debug: Check if socket connection is established\n    console.log('Socket connection status:', socket.connected);\n\n    socket.on('connect', function() {\n      console.log('Connected to Frappe socket.io server');\n    });\n\n    socket.on('mqtt_message', function(data) {\n      console.log('MQTT message received:', data); // Debugging line\n      displayMessage(data.topic, data.payload);\n    });\n\n    socket.on('disconnect', function() {\n      console.log('Disconnected from Frappe socket.io server');\n    });\n\n    socket.on('connect_error', function(error) {\n      console.error('Connection error:', error);\n    });\n\n    socket.on('reconnect', function(attemptNumber) {\n      console.log('Reconnected to Frappe socket.io server, attempt:', attemptNumber);\n    });\n  } else {\n    console.error('Frappe socket.io socket is not defined');\n  }\n} else {\n  console.error('Frappe socket.io is not available');\n}\n\n// Automatically update status on initialization\nupdateStatus();\n",
  "style": "#custom-block {\n  position: relative;\n}\n#messages-container {\n  max-width: 100%;\n  max-height: 800px;\n  height: 800px;\n  overflow-y: auto;\n  padding: 3px;\n  margin: 0;\n  font-size: 9pt;\n  line-height: 1;\n}\n@media only screen and (max-width: 600px) {\n  #messages-container {\n    max-height: 445px; /* Set max height for smartphones */\n    height: 445px;\n    width: 100%; /* Ensure it uses full width on small screens */\n  }\n}\n.message pre {\n  background-color: #f5f5f5;\n  padding: 3px;\n  border-radius: 6px;\n  overflow-x: auto;\n}\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<div id=\"custom-block\">\n  <button id=\"conn-btn\" class=\"btn btn-sm btn-primary\">Connect</button>\n  <button id=\"disconnect-btn\" class=\"btn btn-sm btn-primary\">Disconnect</button>\n  <div id=\"mqtt-messages\" class=\"mt-3\">\n    <h3>MQTT Messages</h3>\n    <div id=\"messages-container\"></div>\n  </div>\n  <div id=\"subscriber-status\"></div>\n</div>",
  "modified": "2024-05-27 22:33:17.496420",
  "name": "CN MQTT Explorer",
  "private": 0,
  "roles": [],
  "script": "const messagesContainer = root_element.querySelector('#messages-container');\nconst subscriberStatus = root_element.querySelector('#subscriber-status');\nconst connectBtn = root_element.querySelector('#conn-btn');\nconst disconnectBtn = root_element.querySelector('#disconnect-btn');\n\nfunction displayMessage(topic, message) {\n  const messageElement = document.createElement('div');\n  messageElement.classList.add('message');\n\n  let formattedMessage;\n  try {\n    const jsonMessage = JSON.parse(message);\n    formattedMessage = `<pre class=\"mt-1\">${JSON.stringify(jsonMessage, null, 2)}</pre>`;\n  } catch (e) {\n    formattedMessage = message;\n  }\n\n  messageElement.innerHTML = `<strong>${topic}:</strong> ${formattedMessage}`;\n  messagesContainer.appendChild(messageElement);\n}\n\nconnectBtn.onclick = function() {\n  const dialog = new frappe.ui.Dialog({\n    title: 'MQTT Connection',\n    size: 'large',\n    fields: [\n      {'fieldname': 'name', 'fieldtype': 'Data', 'label': 'Name', 'reqd': 1},\n      {'fieldname': 'host', 'fieldtype': 'Data', 'label': 'Host', 'reqd': 1},\n      {'fieldname': 'username', 'fieldtype': 'Data', 'label': 'Username',},\n      {'fieldname': 'validate_cert', 'fieldtype': 'Check', 'label': 'Validate Certificate', 'default': 0},\n      {'fieldname': 'encryption', 'fieldtype': 'Check', 'label': 'Encryption (TLS)', 'default': 0},\n      {'fieldname': 'cb1', 'fieldtype': 'Column Break'},\n      {'fieldname': 'protocol', 'fieldtype': 'Select', 'label': 'Protocol', 'options': 'mqtt://\\nmqtts://', 'reqd': 1},\n      {'fieldname': 'port', 'fieldtype': 'Int', 'label': 'Port', 'reqd': 1},\n      {'fieldname': 'password', 'fieldtype': 'Password', 'label': 'Password'},\n      {'fieldname': 'client_id', 'fieldtype': 'Data', 'label': 'MQTT Client ID', 'default': `mqtt-explorer-${Math.random().toString(16).substr(2, 8)}`, 'read_only': 1},\n      {\n        'fieldname': 'advanced_section',\n        'fieldtype': 'Section Break',\n        'label': 'Advanced Settings',\n        'collapsible': 1,\n      },\n      {\n        fieldname: 'topics_table',\n        fieldtype: 'Table',\n        label: 'Topics',\n        cannot_add_rows: false,\n        cannot_delete_rows: false,\n        in_place_edit: true,\n        data: [\n          { topic: '#', qos: '0' },\n          { topic: '$SYS/#', qos: '0' }\n        ],\n        fields: [\n          {\n            fieldtype: 'Data',\n            fieldname: 'topic',\n            label: 'Topic',\n            in_list_view: 1,\n            read_only: 0\n          },\n          {\n            fieldtype: 'Select',\n            fieldname: 'qos',\n            label: 'QoS',\n            options: '0\\n1\\n2',\n            in_list_view: 1,\n            read_only: 0\n          }\n        ]\n      },\n      {\n        'fieldname': 'cert_section',\n        'fieldtype': 'Section Break',\n        'label': 'Certificates',\n        'collapsible': 1,\n      },\n      {'fieldname': 'ca_cert', 'fieldtype': 'Attach', 'label': 'CA Certificate (ca.crt)', 'column': 1},\n      {'fieldname': 'cb5', 'fieldtype': 'Column Break'},\n      {'fieldname': 'client_cert', 'fieldtype': 'Attach', 'label': 'Client Certificate (client.crt)', 'column': 1},\n      {'fieldname': 'cb6', 'fieldtype': 'Column Break'},\n      {'fieldname': 'client_key', 'fieldtype': 'Attach', 'label': 'Client Key (client.key)', 'column': 1}\n    ],\n    primary_action_label: 'Connect',\n    primary_action(values) {\n      console.log(\"Connect button clicked with values\", values);\n      \n      frappe.call({\n        method: 'pibiconnect.pibiconnect.mqtt_client.start_mqtt_args',\n        args: {\n          data: values\n        },\n        callback: function(response) {\n          if (response && response.message) {\n            console.log(`MQTT connection started: ${response.message.status}`);\n            frappe.show_alert(`MQTT connection started: ${response.message.status} with job ID: ${response.message.job_id}`);\n            updateStatus();\n            dialog.hide();\n          } else {\n            console.error('Failed to start MQTT connection', response);\n            frappe.show_alert('Failed to start MQTT connection');\n          }\n        },\n        error: function(error) {\n          console.error('Failed to start MQTT connection', error);\n          frappe.show_alert('Failed to start MQTT connection');\n        }\n      });\n    }\n  });\n\n  dialog.show();\n};\n\ndisconnectBtn.onclick = function() {\n  console.log(\"Disconnect button clicked\");\n  frappe.call({\n    method: 'pibiconnect.pibiconnect.mqtt_client.stop_mqtt',\n    args: {\n      job_name: 'mqtt_start_job'\n    },\n    callback: function(response) {\n      if (response && response.message) {\n        console.log(`MQTT connection stopped: ${response.message.status}`);\n        frappe.show_alert(`MQTT connection stopped: ${response.message.status}`);\n        updateStatus();\n      } else {\n        console.error('Failed to stop MQTT connection', response);\n        frappe.show_alert('Failed to stop MQTT connection');\n      }\n    },\n    error: function(error) {\n      console.error('Failed to stop MQTT connection', error);\n      frappe.show_alert('Failed to stop MQTT connection');\n    }\n  });\n};\n\nfunction updateStatus() {\n  frappe.call({\n    method: 'pibiconnect.pibiconnect.mqtt_client.status',\n    callback: function(response) {\n      if (response && response.message) {\n        const status = response.message.status;\n        subscriberStatus.innerText = `Subscriber Status: ${status}`;\n      } else {\n        console.error('Failed to get MQTT status', response);\n        frappe.show_alert('Failed to get MQTT status');\n      }\n    },\n    error: function(error) {\n      console.error('Failed to get MQTT status', error);\n      frappe.show_alert('Failed to get MQTT status');\n    }\n  });\n}\n\nif (typeof frappe !== 'undefined' && frappe.socketio) {\n  const socket = frappe.socketio.socket;\n\n  if (socket) {\n    console.log('Socket connection status:', socket.connected);\n\n    socket.on('connect', function() {\n      console.log('Connected to Frappe socket.io server');\n    });\n\n    socket.on('mqtt_message', function(data) {\n      console.log('MQTT message received:', data);\n      displayMessage(data.topic, data.payload);\n    });\n\n    socket.on('disconnect', function() {\n      console.log('Disconnected from Frappe socket.io server');\n    });\n\n    socket.on('connect_error', function(error) {\n      console.error('Connection error:', error);\n    });\n\n    socket.on('reconnect', function(attemptNumber) {\n      console.log('Reconnected to Frappe socket.io server, attempt:', attemptNumber);\n    });\n  } else {\n    console.error('Frappe socket.io socket is not defined');\n  }\n} else {\n  console.error('Frappe socket.io is not available');\n}\n\nupdateStatus();\n",
  "style": "#custom-block {\n  position: relative;\n}\n#messages-container {\n  max-width: 100%;\n  max-height: 545px;\n  height: 768px;\n  overflow-y: auto;\n  padding: 3px;\n  margin: 0;\n  font-size: 9pt;\n  line-height: 1;\n}\n.message pre {\n  background-color: #f5f5f5;\n  padding: 3px;\n  border-radius: 6px;\n  overflow-x: auto;\n}\n.control-label,\n.form-group {\n  margin-bottom: 1px !important;\n}"
 }
]