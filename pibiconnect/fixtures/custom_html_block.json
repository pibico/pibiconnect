[
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<link rel=\"stylesheet\" href=\"/assets/pibiconnect/css/leaflet.css\">\n<link rel=\"stylesheet\" href=\"/assets/pibiconnect/css/MarkerCluster.css\" />\n<link rel=\"stylesheet\" href=\"/assets/pibiconnect/css/MarkerCluster.Default.css\" />\n<!--<link rel=\"stylesheet\" href=\"/assets/pibiconnect/css/ol.css\">-->\n\n<div id=\"sensor-management-interface\" class=\"work-container\">\n  <div class=\"work-content\">\n    <div class=\"card works\" id=\"works\">\n      <div class=\"tab statements\">\n        <!-- Sidebar toggle button -->\n        <button class=\"tablinks hidden\" id=\"toggleSidebarButton\" title=\"Toggle Sidebar\">\n          <div class=\"icon-container\">\n            <img class=\"icon-img\" src=\"/assets/pibiconnect/images/menu-lateral.svg\"/>\n            <span class=\"icon-label\">Menú</span>\n          </div>\n        </button>\n        <!-- Existing tabs -->\n        <button class=\"tablinks\" data-tabname=\"General\" id=\"general\" title=\"General\">\n          <div class=\"icon-container\">\n            <!--<i class=\"fa fa-home\"></i>-->\n            <img class=\"icon-img\" src=\"/assets/pibiconnect/images/sensor-de-humedad.svg\"/>\n            <span class=\"icon-label\">Sensores</span>\n          </div>\n        </button>\n        <button class=\"tablinks\" data-tabname=\"LiveData\" id=\"liveData\" title=\"Live Data\">\n          <div class=\"icon-container\">\n            <img class=\"icon-img\" src=\"/assets/pibiconnect/images/analisis.svg\" />\n            <span class=\"icon-label\">Gráficas</span>\n          </div>\n        </button>\n        <button class=\"tablinks\" data-tabname=\"Reports\" id=\"reports\" title=\"Reports\">\n          <div class=\"icon-container\">\n            <img class=\"icon-img\" src=\"/assets/pibiconnect/images/advertencia.svg\"/>\n            <span class=\"icon-label\">Info</span>\n          </div>\n        </button>\n        <button class=\"tablinks\" data-tabname=\"Setup\" id=\"setup\" title=\"Setup\">\n          <div class=\"icon-container\">\n            <img class=\"icon-img\" src=\"/assets/pibiconnect/images/ajustes.svg\"/>\n            <span class=\"icon-label\">Ajustes</span>\n          </div>\n        </button>\n        <button class=\"tablinks\" data-tabname=\"Location\" id=\"location\" title=\"Location\">\n          <div class=\"icon-container\">\n            <img class=\"icon-img\" src=\"/assets/pibiconnect/images/ruta.svg\"/>\n            <span class=\"icon-label\">Posición</span>\n          </div>\n        </button>\n      </div>\n      <div id=\"General\" class=\"tabcontent active\">\n        <h3>Gestión de Sensores</h3>\n        <div class=\"filters\">\n          <div class=\"filter-group\">\n            <label for=\"locationFilter\">Lugar</label>\n            <select id=\"locationFilter\" class=\"filter-dropdown\">\n              <option value=\"all\">Todos</option>\n            </select>\n          </div>\n          <div class=\"filter-group\">\n            <label for=\"typeFilter\">Tipo</label>\n            <select id=\"typeFilter\" class=\"filter-dropdown\">\n              <option value=\"all\">Todos</option>\n            </select>\n          </div>\n        </div>\n        <div id=\"deviceList\" class=\"device-list\"></div>\n      </div>\n      <div id=\"LiveData\" class=\"tabcontent\">\n        <h3>Datos en Tiempo Real</h3>\n        <div class=\"filter-group\">\n          <label for=\"deviceFilter\">Dispositivo</label>\n          <select id=\"deviceFilter\" class=\"filter-dropdown\">\n            <option value=\"all\">Todos</option>\n          </select>\n        </div>\n        <div class=\"live-data-container\">\n          <div id=\"liveChart\" class=\"chart-container\" style=\"width: 100%; height: 100%;\"></div>\n          <div id=\"messages-container\" class=\"messages-container\"></div>\n        </div>\n      </div>\n      <div id=\"Reports\" class=\"tabcontent\">\n        <h3>Información de Sensores</h3>\n        <div id=\"reportsList\"></div>\n      </div>\n      <div id=\"Setup\" class=\"tabcontent\">\n        <h3>Configuración</h3>\n        <div id=\"setupList\">\n          <!--<iframe src=\"/app/pibiconnect-settings\" width=\"100%\" style=\"border: none; border-radius: 6px;\"></iframe>-->\n        </div>\n      </div>\n      <div id=\"Location\" class=\"tabcontent\">\n        <h3>Localizaciones</h3>\n        <div id=\"map\"></div>\n      </div>\n    </div>\n  </div>\n</div>",
  "modified": "2024-08-08 12:25:47.232453",
  "name": "CN Sensor Manager",
  "private": 0,
  "roles": [
   {
    "parent": "CN Sensor Manager",
    "parentfield": "roles",
    "parenttype": "Custom HTML Block",
    "role": "MIoT Administrator"
   },
   {
    "parent": "CN Sensor Manager",
    "parentfield": "roles",
    "parenttype": "Custom HTML Block",
    "role": "MIoT User"
   }
  ],
  "script": "frappe.require([\n    \"/assets/pibiconnect/js/echarts.min.js\",\n    \"/assets/pibiconnect/js/leaflet.js\",\n    \"/assets/pibiconnect/js/leaflet.markercluster-src.js\",\n    //\"/assets/pibiconnect/js/ol.js\"\n    ], function () {\n  initializeInterface();\n});\n//\nfunction initializeInterface() {\n  setupFullScreen();\n  //adjustPageHeaderVisibility();\n  setupTabNavigation();\n  setupSidebarToggle();\n  //\n  initializeFilters();\n  initializeLiveDataChart();\n  initializeMap();\n}\n//\nfunction debounce(func, wait) {\n  let timeout;\n  return function executedFunction(...args) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n}\n//\nfunction setupFullScreen() {\n  /*\n  let sidebarToggleButton = document.querySelector('.sidebar-toggle-btn');\n  if (sidebarToggleButton) {\n    let close = document.querySelector(\".close-sidebar\");\n    let osbar = document.querySelector(\".overlay-sidebar\");\n    let lssection = document.querySelector(\".layout-side-section\");\n    if ((close && close.style.display != \"none\") ||\n      (osbar && osbar.classList.contains('opened')) ||\n      (lssection && lssection.offsetWidth > 0 && lssection.offsetHeight > 0 && lssection.style.display != \"none\")) {\n      sidebarToggleButton.click();\n    }\n  }\n  */\n  let layoutMainSection = document.querySelector('.layout-main-section');\n  if (layoutMainSection) {\n    layoutMainSection.style.padding = \"0\";\n    layoutMainSection.style.border = \"none\";\n  }\n  let ceBlockContent = document.querySelector('.ce-block__content');\n  if (ceBlockContent) {\n    ceBlockContent.style.padding = \"0\";\n  }\n  let widget = document.querySelector('.widget.custom-block-widget-box.full-width');\n  if (widget) {\n    widget.style.padding = \"0\";\n  }\n}\n//\nfunction adjustPageHeaderVisibility() {\n  let pageHead = document.querySelector('.page-head-content');\n  if (pageHead) {\n    if (window.innerWidth <= 767) {\n      pageHead.style.display = \"none\";\n      adjustMainContentLayout(true);\n    } else {\n      pageHead.style.display = \"\";\n      adjustMainContentLayout(false);\n    }\n  }\n}\n//\nfunction adjustMainContentLayout(isHeaderHidden) {\n  let pageContent = document.querySelector('.page-content');\n  let mainSection = document.querySelector('.layout-main-section');\n  let mainSectionWrapper = document.querySelector('.layout-main-section-wrapper');\n\n  if (isHeaderHidden) {\n    if (pageContent) pageContent.style.paddingTop = \"0\";\n    if (mainSection) mainSection.style.marginTop = \"0\";\n    if (mainSectionWrapper) mainSectionWrapper.style.paddingTop = \"10px\";\n  } else {\n    if (pageContent) pageContent.style.paddingTop = \"\";\n    if (mainSection) mainSection.style.marginTop = \"\";\n    if (mainSectionWrapper) mainSectionWrapper.style.paddingTop = \"\";\n  }\n}\n//\nfunction setupTabNavigation() {\n  const tabs = root_element.querySelectorAll('.tablinks:not(#toggleSidebarButton)');\n  if (tabs.length === 0) {\n    console.error('No tab elements found');\n    return;\n  }\n  tabs.forEach(tab => {\n    tab.addEventListener('click', function (event) {\n      const tabName = this.getAttribute('data-tabname');\n      openTab(event, tabName);\n      if (tabName === 'Location') {\n        console.log('Switching to Location tab...');\n        setTimeout(function() {\n          initializeMap();\n        }, 100);\n      }\n    });\n  });\n\n  const defaultTab = root_element.querySelector('#general');\n  if (defaultTab) {\n    defaultTab.click();\n  } else {\n    console.error('Default tab not found');\n  }\n\n  window.addEventListener('resize', function() {\n    const activeTab = root_element.querySelector('.tablinks.active');\n    if (activeTab && activeTab.getAttribute('data-tabname') === 'Location') {\n      updateMap();\n    }\n  });\n}\n//\nfunction setupSidebarToggle() {\n  const toggleSidebarButton = root_element.querySelector('#toggleSidebarButton');\n  if (toggleSidebarButton) {\n    toggleSidebarButton.addEventListener('click', function (event) {\n      event.preventDefault();\n      toggleSidebar();\n    });\n  } else {\n    console.error('Sidebar toggle button not found');\n  }\n}\n//\nfunction toggleSidebar() {\n  const sidebarToggleBtn = document.querySelector('.sidebar-toggle-btn');\n  if (sidebarToggleBtn) {\n    sidebarToggleBtn.click();\n  } else {\n    console.error('Sidebar toggle button not found in the Frappe layout');\n  }\n}\n//\nfunction openTab(evt, tabName) {\n  const tabcontent = root_element.querySelectorAll(\".tabcontent\");\n  tabcontent.forEach(tab => {\n    tab.style.display = \"none\";\n  });\n\n  const tablinks = root_element.querySelectorAll(\".tablinks:not(#toggleSidebarButton)\");\n  tablinks.forEach(tab => {\n    tab.classList.remove(\"active\");\n  });\n\n  const selectedTab = root_element.querySelector(`#${tabName}`);\n  if (selectedTab) {\n    selectedTab.style.display = \"block\";\n  } else {\n    console.error(`Tab content for ${tabName} not found`);\n  }\n\n  if (evt && evt.currentTarget) {\n    evt.currentTarget.classList.add(\"active\");\n  }\n\n  if (tabName === 'General') {\n    stopMQTTConnection();\n    loadDevices();\n  } else if (tabName === 'LiveData') {\n    startMQTTConnection();\n    updateLiveDataChart();\n  } else if (tabName === 'Reports') {\n    stopMQTTConnection();\n    loadReports();\n  } else if (tabName === 'Location') {\n    stopMQTTConnection();\n    setTimeout(function() {\n      initializeMap();\n      updateMap();\n    }, 100);\n  } else if (tabName === 'Setup') {\n    stopMQTTConnection();\n    window.location.href = '/app/pibiconnect-settings';\n  }\n}\n\n/*****************/\n/* Devices       */\n/*****************/\n// General Tab\nfunction initializeFilters() {\n  loadFilterOptions('location');\n  loadFilterOptions('type');\n\n  const locationFilter = root_element.querySelector('#locationFilter');\n  const typeFilter = root_element.querySelector('#typeFilter');\n\n  if (locationFilter) {\n    locationFilter.addEventListener('change', function () {\n      loadDevices(); // Reload devices when filter changes\n    });\n  }\n\n  if (typeFilter) {\n    typeFilter.addEventListener('change', function () {\n      loadDevices(); // Reload devices when filter changes\n    });\n  }\n}\n\n// New function to load filter options\nfunction initializeFilters() {\n  loadFilterOptions('location');\n  loadFilterOptions('type');\n\n  const locationFilter = root_element.querySelector('#locationFilter');\n  const typeFilter = root_element.querySelector('#typeFilter');\n\n  if (locationFilter) {\n    locationFilter.addEventListener('change', function () {\n      loadDevices(); // Reload devices when filter changes\n    });\n  }\n\n  if (typeFilter) {\n    typeFilter.addEventListener('change', function () {\n      loadDevices(); // Reload devices when filter changes\n    });\n  }\n}\n// New function to load filter options with unique values\nfunction loadFilterOptions(filterType) {\n  let field = '';\n  if (filterType === 'location') {\n    field = 'place_name';\n  } else if (filterType === 'type') {\n    field = 'sensor_type';\n  } else if (filterType === 'device') {\n    field = 'name';    \n  }\n\n  frappe.call({\n    method: 'frappe.client.get_list',\n    args: {\n      doctype: 'CN Device',\n      fields: [field],\n      distinct: true // Get distinct values\n    },\n    callback: function (response) {\n      if (response.message) {\n        const filterElement = root_element.querySelector(`#${filterType}Filter`);\n        filterElement.innerHTML = '<option value=\"all\">Todos</option>'; // Reset options\n        const uniqueValues = new Set();\n        response.message.forEach(item => {\n          if (item[field]) {\n            uniqueValues.add(item[field]);\n          }\n        });\n        uniqueValues.forEach(value => {\n          filterElement.innerHTML += `<option value=\"${value}\">${value}</option>`;\n        });\n      }\n    }\n  });\n}\n\nfunction loadDevices() {\n  const locationFilter = root_element.querySelector('#locationFilter').value;\n  const typeFilter = root_element.querySelector('#typeFilter').value;\n\n  let filters = [];\n\n  if (locationFilter && locationFilter !== 'all') {\n    filters.push(['place_name', '=', locationFilter]);\n  }\n\n  if (typeFilter && typeFilter !== 'all') {\n    filters.push(['sensor_type', '=', typeFilter]);\n  }\n\n  frappe.call({\n    method: 'frappe.client.get_list',\n    args: {\n      doctype: 'CN Device',\n      fields: ['*'],\n      filters: filters\n    },\n    callback: function(response) {\n      if (response.message) {\n        displayDevices(response.message);\n      }\n    }\n  });\n}\n//\nasync function fetchDeviceDetails(deviceName) {\n  try {\n    const response = await frappe.call({\n      method: 'frappe.client.get',\n      args: {\n        doctype: 'CN Device',\n        name: deviceName,\n        fields: ['name', 'alias', 'device_shortcut', 'hostname', 'place_name', 'sensor_type', 'connected_at', 'connected', 'data_item']\n      }\n    });\n    return response.message;\n  } catch (error) {\n    console.error(\"Error fetching device details:\", error);\n    return null;\n  }\n}\n// Display devices in cards\nasync function displayDevices(devices) {\n  const deviceList = root_element.querySelector('#deviceList');\n  deviceList.innerHTML = ''; // Clear previous content\n  // Fetch detailed data for each device\n  const devicesWithData = await Promise.all(devices.map(device => fetchDeviceDetails(device.name)));\n\n  // Render the device cards\n  devicesWithData.forEach((device, index) => {\n    if (device) {\n      const lastSeenText = getLastSeenText(device.connected_at);\n      const deviceCard = `\n        <div class=\"device-card\" data-index=\"${index}\">\n          <div class=\"device-header\">\n            <input type=\"radio\" id=\"device-${index}\" name=\"deviceSelection\" class=\"device-radio\" data-name=\"${device.name}\">\n            <label for=\"device-${index}\">\n              <span><i class=\"fa fa-signal\"></i> <a href=\"/app/cn-device/${device.name}\" target=\"_blank\">${device.alias || device.device_shortcut}</a></span>\n            </label>\n            <span class=\"last-seen\">${lastSeenText}</span>\n            <span class=\"status-indicator ${device.connected ? 'status-connected' : 'status-disconnected'}\"></span>\n          </div>\n          <div class=\"device-body\">\n            <div class=\"device-info-column\">\n              <div class=\"device-info\"><span>${__('Hostname')}:</span> ${device.hostname}</div>\n              <div class=\"device-info\"><span>${__('Place')}:</span> ${device.place_name || 'N/A'}</div>\n              <div class=\"device-info\"><span>${__('Type')}:</span> ${device.sensor_type || 'N/A'}</div>\n            </div>\n            <div class=\"device-data-column\">\n              ${generateDataItemsHTML(device.data_item)}\n            </div>\n          </div>\n        </div>\n      `;\n      deviceList.innerHTML += deviceCard;\n    }\n  });\n\n  // Add event listeners for the device selection radios\n  deviceList.querySelectorAll('.device-radio').forEach(radio => {\n    radio.addEventListener('change', (event) => {\n      if (event.target.checked) {\n        localStorage.setItem('currentDeviceSelection', JSON.stringify({\n          deviceName: event.target.dataset.name\n        }));\n      }\n    });\n  });\n}\n\nfunction getLastSeenText(lastSeen) {\n  if (!lastSeen) return 'N/A';\n  const now = new Date();\n  const lastSeenDate = new Date(lastSeen);\n  const diffMinutes = Math.floor((now - lastSeenDate) / (1000 * 60));\n  \n  if (diffMinutes < 60) {\n    return `${diffMinutes} min ago`;\n  } else if (diffMinutes < 1440) { // Less than 24 hours\n    return `${Math.floor(diffMinutes / 60)} hours ago`;\n  } else {\n    return lastSeenDate.toLocaleString(); // This will use the user's locale settings\n  }\n}\n\nfunction generateDataItemsHTML(dataItems) {\n  return dataItems.map(item => `\n    <div class=\"data-item\">\n      <span class=\"data-value\">${item.value} ${item.uom}</span>\n      <i class=\"fa fa-${getIconForSensorVar(item.sensor_var)}\"></i>\n    </div>\n  `).join('');\n}\n\nfunction getIconForSensorVar(sensorVar) {\n  const iconMap = {\n    'Temperature': 'thermometer-half', // Font Awesome 4 does not have this specific icon, using thermometer instead\n    'Humidity': 'tint',\n    'Pressure': 'tachometer',\n    'Memory': 'microchip', // Font Awesome 4 does not have microchip, but we will use it as a reference\n    'Disk': 'hdd-o',\n    'Battery': 'battery-half', // Font Awesome 4 does not have this specific icon, using battery instead\n    'Light': 'lightbulb-o',\n    'CO2': 'cloud',\n    'Sound': 'volume-up',\n    'Motion': 'male', // Using 'male' icon as a reference for motion\n    'Vibration': 'exchange', // No vibration icon, using 'exchange' as a placeholder\n    'Wind Speed': 'flag', // No specific wind icon, using 'flag' as a placeholder\n    'Rainfall': 'tint',\n    'UV Index': 'sun-o',\n    'Voltage': 'bolt'\n    // Add more mappings as needed\n  };\n\n  return iconMap[sensorVar] || 'question-circle'; // Default to 'question-circle' if no match is found\n}\n//\nfunction resetDeviceDisplay() {\n  isDeviceDisplayInitialized = false;\n}\n/****************/\n/* Live Chart   */\n/****************/\n// Initialize chart\nlet chart;\n//\nfunction startMQTTConnection() {\n  frappe.call({\n    method: 'pibiconnect.pibiconnect.mqtt_client.start_mqtt',\n    callback: function(response) {\n      if (response && response.message) {\n        console.log(`MQTT connection started: ${response.message.status}`);\n        frappe.show_alert(`MQTT connection started: ${response.message.status} with job ID: ${response.message.job_id}`);\n        \n        // Reconnect socket if it's disconnected\n        if (frappe.socketio && frappe.socketio.socket && !frappe.socketio.socket.connected) {\n          frappe.socketio.socket.connect();\n          console.log('Reconnected socket.io connection');\n        }\n      } else {\n        console.error('Failed to start MQTT connection', response);\n        frappe.show_alert('Failed to start MQTT connection');\n      }\n    },\n    error: function(error) {\n      console.error('Failed to start MQTT connection', error);\n      frappe.show_alert('Failed to start MQTT connection');\n    }\n  });\n}\n\nfunction stopMQTTConnection() {\n  console.log(\"Stopping MQTT connection\");\n  frappe.call({\n    method: 'pibiconnect.pibiconnect.mqtt_client.stop_mqtt',\n    args: {\n      job_name: 'mqtt_start_job'\n    },\n    callback: function(response) {\n      if (response && response.message) {\n        console.log(`MQTT connection stopped: ${response.message.status}`);\n        frappe.show_alert(`MQTT connection stopped: ${response.message.status}`);\n        \n        // Disconnect the socket after stopping the MQTT connection\n        if (frappe.socketio && frappe.socketio.socket) {\n          frappe.socketio.socket.disconnect();\n          console.log('Disconnected socket.io connection');\n        }\n      } else {\n        console.error('Failed to stop MQTT connection', response);\n        frappe.show_alert('Failed to stop MQTT connection');\n      }\n    },\n    error: function(error) {\n      console.error('Failed to stop MQTT connection', error);\n      frappe.show_alert('Failed to stop MQTT connection');\n    }\n  });\n}\n//\nfunction initializeLiveDataChart() {\n  const liveDataTab = root_element.querySelector('#LiveData');\n\n  if (liveDataTab) {\n    // Remove any existing filter group, chart container, and messages container to avoid duplication\n    const existingFilterGroup = liveDataTab.querySelector('.filter-group');\n    const existingLiveDataContainer = liveDataTab.querySelector('.live-data-container');\n\n    if (existingFilterGroup) {\n      existingFilterGroup.remove();\n    }\n    if (existingLiveDataContainer) {\n      existingLiveDataContainer.remove();\n    }\n\n    // Create and add the filter and button container\n    const filterButtonContainer = document.createElement('div');\n    filterButtonContainer.classList.add('d-flex', 'justify-content-between', 'mb-1');\n\n    // Create and add the device filter dropdown\n    const deviceFilterContainer = document.createElement('div');\n    deviceFilterContainer.classList.add('filter-group');\n    const deviceFilterLabel = document.createElement('label');\n    deviceFilterLabel.setAttribute('for', 'deviceFilter');\n    deviceFilterLabel.textContent = 'Dispositivo';\n    const deviceFilter = document.createElement('select');\n    deviceFilter.id = 'deviceFilter';\n    deviceFilter.classList.add('filter-dropdown');\n    deviceFilter.innerHTML = '<option value=\"all\">Todos</option>';\n\n    deviceFilterContainer.appendChild(deviceFilterLabel);\n    deviceFilterContainer.appendChild(deviceFilter);\n\n    // Create button container\n    const buttonContainer = document.createElement('div');\n    buttonContainer.classList.add('d-flex');\n\n    // Create sync button\n    const syncButton = document.createElement('button');\n    syncButton.classList.add('btn', 'btn-primary', 'btn-xs', 'mx-1');\n    syncButton.id = 'syncMQTT';\n    syncButton.title = 'Sync MQTT';\n    syncButton.innerHTML = '<i class=\"fa fa-refresh\"></i>';\n\n    // Create stop button\n    const stopButton = document.createElement('button');\n    stopButton.classList.add('btn', 'btn-danger', 'btn-xs', 'ml-1');\n    stopButton.id = 'stopMQTT';\n    stopButton.title = 'Stop MQTT';\n    stopButton.innerHTML = '<i class=\"fa fa-stop\"></i>';\n\n    // Append buttons to button container\n    buttonContainer.appendChild(syncButton);\n    buttonContainer.appendChild(stopButton);\n\n    // Append filter and button containers to the filterButtonContainer\n    filterButtonContainer.appendChild(deviceFilterContainer);\n    filterButtonContainer.appendChild(buttonContainer);\n\n    // Insert the filterButtonContainer after the <h3> element\n    const h3Element = liveDataTab.querySelector('h3');\n    h3Element.insertAdjacentElement('afterend', filterButtonContainer);\n\n    // Create a container to hold both chart and messages\n    const container = document.createElement('div');\n    container.classList.add('live-data-container');\n\n    // Create chart container\n    const chartContainer = document.createElement('div');\n    chartContainer.id = 'liveChart';\n    chartContainer.classList.add('chart-container');\n\n    // Create messages container\n    const messagesContainer = document.createElement('div');\n    messagesContainer.id = 'messages-container';\n    messagesContainer.classList.add('messages-container');\n\n    // Append the chart and messages containers to the new container\n    container.appendChild(chartContainer);\n    container.appendChild(messagesContainer);\n\n    // Append the new container to the liveDataTab\n    liveDataTab.appendChild(container);\n\n    // Initialize the chart\n    const chartDom = root_element.querySelector('#liveChart');\n    if (chartDom) {\n      chart = echarts.init(chartDom);\n      const option = {\n        title: {\n          text: 'Datos en Vivo',\n          left: 'center',\n          top: 'bottom',\n          textStyle: {\n            fontSize: 16,\n            color: '#333',\n            fontWeight: 'bold',\n            padding: [24, 0, 0, 0]\n          }\n        },\n        tooltip: {\n          trigger: 'axis',\n          formatter: function(params) {\n            let result = params[0].axisValue + '<br/>';\n            params.forEach(param => {\n              if (param.value !== null && param.value[1] !== undefined) {\n                result += param.marker + ' ' + param.seriesName + ': ' + param.value[1] + '<br/>';\n              }\n            });\n            return result;\n          }\n        },\n        legend: {\n          type: 'scroll',\n          data: [],\n          top: 'top',\n          left: 'center',\n          itemWidth: 10,\n          itemHeight: 10,\n          textStyle: {\n            fontSize: 10\n          },\n          orient: 'horizontal',\n          pageButtonItemGap: 2\n        },\n        grid: {\n          top: 30,\n          bottom: 60,\n          left: '10%',\n          right: '10%'\n        },\n        xAxis: {\n          type: 'category',\n          data: [],\n          axisLabel: {\n            formatter: function (value) {\n              const dateTime = value.split(' ');\n              return '{time|' + dateTime[1] + '}\\n{date|' + dateTime[0] + '}';\n            },\n            rich: {\n              date: {\n                fontSize: 10,\n                color: '#999'\n              },\n              time: {\n                fontSize: 14,\n                color: '#333'\n              }\n            }\n          }\n        },\n        yAxis: [\n          {\n            type: 'value',\n            min: 'dataMin',\n            max: 'dataMax',\n            axisLabel: {\n              fontSize: 10,\n              color: '#999'\n            }\n          },\n          {\n            type: 'value',\n            min: 'dataMin',\n            max: 'dataMax',\n            axisLabel: {\n              fontSize: 10,\n              color: '#999'\n            },\n            axisLine: {\n              lineStyle: {\n                color: '#888'\n              }\n            }\n          }\n        ],\n        series: []\n      };\n      chart.setOption(option);\n      window.addEventListener('resize', function() {\n        chart.resize();\n      });\n    }\n\n    // Fetch and populate CN Device options\n    loadFilterOptions('device');\n    deviceFilter.addEventListener('change', function () {\n      const selectedDevice = deviceFilter.value;\n      localStorage.setItem('selectedDevice', selectedDevice);\n\n      if (selectedDevice !== 'all') {\n        frappe.db.get_value('CN Device', selectedDevice, 'hostname')\n          .then(response => {\n            if (response && response.message) {\n              localStorage.setItem('selectedHostname', response.message.hostname);\n            }\n          })\n          .catch(error => {\n            console.error('Error fetching hostname:', error);\n          });\n      } else {\n        localStorage.removeItem('selectedHostname');\n        fetchAllDevices();\n      }\n    });\n\n    // Add event listeners for sync and stop buttons\n    syncButton.addEventListener('click', function() {\n      startMQTTConnection(); // Call your function to start MQTT connection\n    });\n\n    stopButton.addEventListener('click', function() {\n      stopMQTTConnection(); // Call your function to stop MQTT connection\n    });\n  }\n}\n\nfunction updateLiveDataChart(parsedMessage, deviceName) {\n  if (!chart) return;\n\n  const option = chart.getOption();\n  if (!option) return;\n\n  const { reading } = parsedMessage;\n  const data_date = reading.data_date || new Date().toLocaleString();\n\n  // Ensure xAxis data contains the new timestamp\n  if (!option.xAxis[0].data.includes(data_date)) {\n    option.xAxis[0].data.push(data_date);\n    option.xAxis[0].data.sort();\n  }\n\n  const maxVisiblePoints = 10; // Adjust this value to show more or fewer points with symbols\n\n  for (const [key, value] of Object.entries(reading)) {\n    if (key !== 'data_date' && key !== 'record') {\n      const seriesName = `${deviceName} - ${key}`;\n      let series = option.series.find(s => s.name === seriesName);\n\n      if (!series) {\n        series = {\n          name: seriesName,\n          type: 'line',\n          data: [],\n          showSymbol: true,\n          symbolSize: 6,\n          connectNulls: true,\n          yAxisIndex: value < 0.1 || value > 100 ? 1 : 0\n        };\n        option.series.push(series);\n        option.legend[0].data.push(seriesName);\n      }\n\n      // Update or add the data point\n      const dataIndex = series.data.findIndex(item => item[0] === data_date);\n      if (dataIndex !== -1) {\n        series.data[dataIndex] = [data_date, value];\n      } else {\n        series.data.push([data_date, value]);\n      }\n\n      // Sort the data array by timestamp\n      series.data.sort((a, b) => new Date(a[0]) - new Date(b[0]));\n\n      // Limit the number of data points and update symbol display\n      if (series.data.length > maxVisiblePoints) {\n        series.data = series.data.slice(-maxVisiblePoints);\n        series.showSymbol = true;\n        series.symbolSize = 6;\n      } else {\n        series.showSymbol = true;\n        series.symbolSize = 6;\n      }\n    }\n  }\n\n  // Limit the number of x-axis labels\n  option.xAxis[0].data = option.xAxis[0].data.slice(-maxVisiblePoints);\n\n  chart.setOption(option);\n  chart.resize();\n}\n\nfunction fetchAllDevices() {\n  frappe.call({\n    method: 'frappe.client.get_list',\n    args: {\n      doctype: 'CN Device',\n      fields: ['name', 'hostname']\n    },\n    callback: function(response) {\n      if (response.message) {\n        localStorage.setItem('allDevices', JSON.stringify(response.message));\n      }\n    }\n  });\n}\n\nfunction displayMessage(topic, message) {\n  let parsedMessage;\n  try {\n    const jsonMessage = JSON.parse(message);\n    parsedMessage = jsonMessage;\n  } catch (e) {\n    parsedMessage = { reading: { value: parseFloat(message), data_date: new Date().toLocaleTimeString() }};\n  }\n\n  if (!parsedMessage.reading) {\n    return;\n  }\n\n  const selectedDevice = localStorage.getItem('selectedDevice') || 'all';\n  if (selectedDevice === 'all') {\n    const allDevices = JSON.parse(localStorage.getItem('allDevices')) || [];\n    for (const device of allDevices) {\n      if (topic.includes(device.hostname)) {\n        processMessage(parsedMessage, topic, device.name);\n      }\n    }\n  } else {\n    const selectedHostname = localStorage.getItem('selectedHostname');\n    if (selectedHostname && !topic.includes(selectedHostname)) {\n      return; // Skip messages not matching the selected device hostname\n    }\n\n    processMessage(parsedMessage, topic, selectedDevice);\n  }\n}\n\nfunction processMessage(parsedMessage, topic, deviceName) {\n  //console.log(parsedMessage);\n  \n  // Update Live Data Chart with device-specific data\n  updateLiveDataChart(parsedMessage, deviceName);\n\n  // Display messages in the messages-container\n  const messagesContainer = root_element.querySelector('#messages-container');\n  if (messagesContainer) {\n    const messageElement = document.createElement('div');\n    messageElement.classList.add('message-item');\n    \n    const readings = Object.entries(parsedMessage.reading).map(([key, value]) => {\n      return `<span><strong>${key}:</strong> ${value} </span>`;\n    }).join('');\n    \n    messageElement.innerHTML = `\n      <div style=\"color: #4682b4;\"><strong>Device:</strong> ${deviceName}</div>\n      <div style=\"color: #4682b4;\"><strong>Topic:</strong> ${topic}</div>\n      ${readings}\n    `;\n    messagesContainer.appendChild(messageElement); // Add new messages at the bottom\n\n    // Scroll to the new message if screen width is greater than 768px\n    if (window.innerWidth > 768) {\n      messageElement.scrollIntoView({ behavior: 'smooth', block: 'end' });\n    }\n  }\n}\n\n// Ensure Frappe socket.io is loaded and initialized\nif (typeof frappe !== 'undefined' && frappe.socketio) {\n  const socket = frappe.socketio.socket;\n\n  if (socket) {\n    console.log('Socket connection status:', socket.connected);\n\n    socket.on('connect', function() {\n      console.log('Connected to Frappe socket.io server');\n      // Resubscribe to MQTT messages\n      socket.emit('subscribe', 'mqtt_message');\n    });\n\n    socket.on('mqtt_message', function(data) {\n      displayMessage(data.topic, data.payload);\n    });\n\n    socket.on('disconnect', function() {\n      console.log('Disconnected from Frappe socket.io server');\n      // Remove reconnection logic\n    });\n\n    socket.on('connect_error', function(error) {\n      console.error('Connection error:', error);\n    });\n\n  } else {\n    console.error('Frappe socket.io socket is not defined');\n  }\n} else {\n  console.error('Frappe socket.io is not available');\n}\n//\n\n/********************/\n/* Map              */\n/********************/\nlet map;\nlet markersCluster;\nlet lastLoadTime = 0;\nconst loadInterval = 60000; // 1 minute\n\nfunction initializeMap() {\n  const mapElement = root_element.querySelector('#map');\n  if (mapElement && typeof L !== 'undefined') {\n    if (map) {\n      console.log('Map already initialized, updating...');\n      map.invalidateSize();\n      debouncedLoadDeviceLocations();\n      return;\n    }\n\n    console.log('Initializing new map...');\n    map = L.map(mapElement).setView([43.5376186, -5.6595290], 13);\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '© OpenStreetMap contributors'\n    }).addTo(map);\n    \n    markersCluster = L.markerClusterGroup({\n      spiderfyOnMaxZoom: true,\n      showCoverageOnHover: false,\n      zoomToBoundsOnClick: true,\n      iconCreateFunction: function(cluster) {\n        return L.divIcon({\n          html: `<div class=\"cluster-icon\">${cluster.getChildCount()}</div>`,\n          className: 'custom-cluster-icon',\n          iconSize: L.point(40, 40)\n        });\n      }\n    });\n    map.addLayer(markersCluster);\n    \n    debouncedLoadDeviceLocations();\n\n    // Handle orientation changes and resizing\n    window.addEventListener('orientationchange', debouncedUpdateMap);\n    window.addEventListener('resize', debouncedUpdateMap);\n  } else {\n    console.error('Map element not found or Leaflet is not loaded');\n  }\n}\n\nconst debouncedLoadDeviceLocations = debounce(() => {\n  const now = Date.now();\n  if (now - lastLoadTime > loadInterval) {\n    loadDeviceLocations();\n    lastLoadTime = now;\n  } else {\n    console.log('Skipping load, last load was too recent');\n  }\n}, 300);\n\nconst debouncedUpdateMap = debounce(() => {\n  if (map) {\n    map.invalidateSize();\n    debouncedLoadDeviceLocations();\n  }\n}, 300);\n\nfunction loadDeviceLocations() {\n  console.log('Loading device locations...');\n  if (markersCluster) {\n    markersCluster.clearLayers();\n  }\n\n  frappe.call({\n    method: 'frappe.client.get_list',\n    args: {\n      doctype: 'CN Device',\n      fields: ['name', 'alias', 'device_shortcut', 'location']\n    },\n    callback: function(response) {\n      if (response.message) {\n        let validLocationsCount = 0;\n        const locationMap = new Map();\n\n        response.message.forEach(device => {\n          if (device.location) {\n            try {\n              const locationData = JSON.parse(device.location);\n              if (locationData.type === 'FeatureCollection' && \n                  locationData.features && \n                  locationData.features.length > 0 &&\n                  locationData.features[0].geometry &&\n                  locationData.features[0].geometry.type === 'Point') {\n                \n                const [lon, lat] = locationData.features[0].geometry.coordinates;\n                if (!isNaN(lat) && !isNaN(lon)) {\n                  const locationKey = `${lat},${lon}`;\n                  if (!locationMap.has(locationKey)) {\n                    locationMap.set(locationKey, []);\n                  }\n                  locationMap.get(locationKey).push({\n                    name: device.name,\n                    alias: device.alias || device.device_shortcut\n                  });\n                }\n              }\n            } catch (error) {\n              console.warn(`Error parsing location for device ${device.name}: ${error.message}`);\n            }\n          }\n        });\n\n        const bounds = L.latLngBounds();\n\n        locationMap.forEach((devices, locationKey) => {\n          const [lat, lon] = locationKey.split(',').map(Number);\n          \n          const customIcon = L.divIcon({\n            html: `<div class=\"custom-marker\">\n                     <span class=\"marker-pin\"></span>\n                     <span class=\"device-count\">${devices.length}</span>\n                   </div>`,\n            className: 'custom-icon',\n            iconSize: [30, 42],\n            iconAnchor: [15, 42]\n          });\n          \n          const marker = L.marker([lat, lon], {icon: customIcon});\n          \n          const popupContent = devices.map(device => \n            `<b>${device.alias}</b> (${device.name})`\n          ).join('<br>');\n          \n          marker.bindPopup(`<div style=\"max-height: 200px; overflow-y: auto;\">\n                              <h4>Devices at this location:</h4>\n                              ${popupContent}\n                            </div>`);\n          \n          markersCluster.addLayer(marker);\n          bounds.extend([lat, lon]);\n          validLocationsCount++;\n        });\n        \n        if (validLocationsCount > 0) {\n          map.fitBounds(bounds.pad(0.1));\n        } else {\n          console.warn('No valid device locations found');\n        }\n\n        console.log(`Loaded ${validLocationsCount} unique locations with ${response.message.length} devices`);\n      }\n    }\n  });\n}\n//\nfunction updateMap() {\n  if (map) {\n    setTimeout(function() {\n      map.invalidateSize();\n      loadDeviceLocations();\n    }, 100);\n  } else {\n    console.error('Map is not initialized');\n  }\n}\n\n//\nfunction loadReports() {\n  const reportsList = root_element.querySelector('#reportsList');\n  if (reportsList) {\n    reportsList.innerHTML = `\n      <ul>\n        <li>Daily Sensor Report</li>\n        <li>Weekly Performance Analysis</li>\n        <li>Monthly Trend Report</li>\n      </ul>\n    `;\n  }\n}",
  "style": "/* General styles */\n#sensor-management-interface {\n  font-family: Helvetica, sans-serif;\n  width: 100%;\n  margin: 0;\n  background-color: #f5f7fa;\n}\n\n.work-content {\n  display: flex;\n  gap: 9px;\n  padding: 6px;\n}\n\n.card {\n  background-color: #ffffff;\n  border-radius: 6px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n}\n\n.card.works {\n  flex-grow: 1;\n  height: calc(100vh - 100px);\n  max-height: calc(100vh - 100px);\n  overflow-y: auto;\n  padding: 9px;\n  background-image: url(\"/assets/pibiconnect/images/bg_hydrosentinel.webp\");\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  position: relative;\n}\n\n.card.works::before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(255, 255, 255, 0.9);\n  z-index: 1;\n}\n\n.card.works > * {\n  position: relative;\n  z-index: 2;\n}\n\n/* Tab styles */\n.tab.statements {\n  display: flex;\n  gap: 9px;\n  margin-bottom: 9px;\n  border-bottom: 1px solid #e0e0e0;\n  padding-bottom: 9px;\n}\n\n.tablinks {\n  background-color: transparent;\n  color: #333;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  padding: 6px;\n  transition: 0.3s;\n  font-size: 12px;\n  border-radius: 6px;\n}\n\n.tablinks:hover {\n  background-color: #f0f0f0;\n}\n.tablinks.active .icon-img {\n  filter: brightness(0) invert(1);\n}\n\n.tablinks.active {\n  background-color: #17a2b8;\n  color: #ffffff;\n}\n\n.icon-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 3px;\n}\n\n.icon-img {\n  width: 21px;\n  height: 21px;\n}\n\n.icon-label {\n  font-size: 12px;\n}\n\n/* Tabcontent styles */\n.tabcontent {\n  display: none;\n  padding: 9px;\n  background-color: #ffffff;\n  border-radius: 6px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.tabcontent.active {\n  display: block;\n}\n\n/* Filter styles */\n.filters {\n  display: flex;\n  gap: 9px;\n  margin-bottom: 9px;\n}\n\n.filter-group {\n  flex-grow: 1;\n  position: relative;\n}\n\n.filter-group label {\n  position: absolute;\n  top: -10px;\n  left: 10px;\n  background-color: #ffffff;\n  padding: 0 5px;\n  font-size: 12px;\n  color: #17a2b8;\n  z-index: 1;\n}\n\n.filter-dropdown {\n  width: 100%;\n  padding: 3px;\n  border: 1px solid #17a2b8;\n  border-radius: 6px;\n  background-color: #ffffff;\n  font-size: 12px;\n  color: #333;\n  appearance: none;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12'%3E%3Cpath fill='%2317a2b8' d='M10.293 3.293L6 7.586 1.707 3.293A1 1 0 00.293 4.707l5 5a1 1 0 001.414 0l5-5a1 1 0 10-1.414-1.414z'/%3E%3C/svg%3E\");\n  background-repeat: no-repeat;\n  background-position: right 10px center;\n}\n\n/* Device list styles */\n.device-list {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 3px;\n}\n\n.device-card {\n  background-color: #ffffff;\n  border-radius: 6px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  padding: 9px;\n  transition: all 0.3s ease;\n}\n\n.device-card:hover {\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.15);\n}\n\n.device-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 6px;\n}\n\n.device-header label {\n  font-size: 13px;\n  font-weight: bold;\n  color: #17a2b8;\n  max-width: 100%;\n  overflow: hidden;\n}\n\n.device-header label a {\n  display: inline-block;\n  max-width: 27ch;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: inherit;\n  text-decoration: none;\n}\n\n.device-header label a span {\n  font-weight: bold;\n}\n\n.last-seen {\n  font-size: 11px;\n  color: #666;\n  margin-left: auto;\n  margin-right: 5px;\n}\n\n.status-indicator {\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n  flex-shrink: 0;\n}\n\n.status-connected { background-color: #28a745; }\n.status-disconnected { background-color: #dc3545; }\n\n.device-body {\n  display: flex;\n  font-size: 12px;\n}\n\n.device-info-column {\n  flex: 0 0 75%;\n  padding-right: 9px;\n  line-height: 1;\n}\n\n.device-data-column {\n  flex: 0 0 25%;\n  border-left: 1px solid #e0e0e0;\n  padding-left: 9px;\n}\n\n.device-info, .data-item {\n  margin-bottom: 1px;\n}\n\n.device-info span {\n  font-weight: 600;\n}\n\n.data-item {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  font-size: 11px;\n}\n\n.data-value {\n  font-weight: bold;\n  color: #17a2b8;\n  margin-right: 3px;\n}\n\n/* Map styles */\n#map {\n  width: 100%;\n  height: 400px;\n  border-radius: 6px;\n  overflow: hidden;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n/* Chart styles */\n#liveChart {\n  width: 100%;\n  height: 400px;\n  border-radius: 6px;\n  overflow: hidden;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.live-data-container {\n  display: flex;\n  gap: 9px;\n  margin-top: 9px;\n}\n\n.chart-container {\n  flex: 3;\n  min-height: 400px;\n  border: 1px solid #ddd;\n  border-radius: 6px;\n  padding: 9px;\n  background-color: #fff;\n}\n\n.messages-container {\n  flex: 2;\n  min-height: 400px;\n  border: 1px solid #ddd;\n  border-radius: 6px;\n  padding: 9px;\n  background-color: #fff;\n  overflow-y: auto;\n  max-height: 400px;\n}\n\n.message-item {\n  font-size: 10px;\n  padding: 1px;\n  margin: 1px;\n  line-height: 1;\n}\n\n/* Custom marker styles */\n.custom-marker {\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.marker-pin {\n  width: 30px;\n  height: 30px;\n  border-radius: 50% 50% 50% 0;\n  background: #c30b82;\n  position: absolute;\n  transform: rotate(-45deg);\n  left: 50%;\n  top: 50%;\n  margin: -15px 0 0 -15px;\n}\n\n.marker-pin::after {\n  content: '';\n  width: 24px;\n  height: 24px;\n  margin: 3px 0 0 3px;\n  background: #fff;\n  position: absolute;\n  border-radius: 50%;\n}\n\n.device-count {\n  width: 22px;\n  height: 22px;\n  line-height: 22px;\n  display: block;\n  color: #000;\n  text-align: center;\n  position: absolute;\n  font-size: 12px;\n  font-weight: bold;\n  z-index: 1;\n}\n\n.custom-cluster-icon {\n  background-color: #1978c8;\n  border-radius: 50%;\n  text-align: center;\n  color: white;\n  font-weight: bold;\n  border: 2px solid #fff;\n  font-size: 16px;\n}\n\n.cluster-icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n}\n\n/* Ensure the Location and LiveData tab content is visible */\n#Location, #LiveData {\n  display: block;\n}\n\n/* Responsive adjustments */\n@media (max-width: 768px) {\n  .work-content {\n    flex-direction: column;\n  }\n\n  .filters {\n    flex-direction: column;\n  }\n\n  .device-list {\n    grid-template-columns: 1fr;\n  }\n\n  .device-body {\n    flex-direction: column;\n  }\n\n  .device-data-column {\n    border-left: none;\n    border-top: 1px solid #e0e0e0;\n    padding-left: 0;\n    padding-top: 9px;\n    margin-top: 9px;\n  }\n\n  #map, #liveChart {\n    height: 300px;\n  }\n\n  .live-data-container {\n    flex-direction: column;\n  }\n\n  .chart-container,\n  .messages-container {\n    width: 100%;\n  }\n}"
 },
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<div id=\"custom-block\">\n  <button id=\"conn-btn\" class=\"btn btn-sm btn-primary\">Connect</button>\n  <button id=\"disconnect-btn\" class=\"btn btn-sm btn-primary\">Disconnect</button>\n  <div id=\"mqtt-messages\" class=\"mt-3\">\n    <h3>MQTT Messages</h3>\n    <div id=\"messages-container\"></div>\n  </div>\n  <div id=\"subscriber-status\"></div>\n</div>",
  "modified": "2024-05-27 08:50:39.881560",
  "name": "CN MQTT",
  "private": 0,
  "roles": [],
  "script": "const messagesContainer = root_element.querySelector('#messages-container');\nconst subscriberStatus = root_element.querySelector('#subscriber-status');\nconst connectBtn = root_element.querySelector('#conn-btn');\nconst disconnectBtn = root_element.querySelector('#disconnect-btn');\n\nfunction displayMessage(topic, message) {\n  const messageElement = document.createElement('div');\n  messageElement.classList.add('message');\n\n  // Check if the message is a JSON string and try to parse it\n  let formattedMessage;\n  try {\n    const jsonMessage = JSON.parse(message);\n    formattedMessage = `<pre class=\"mt-1\">${JSON.stringify(jsonMessage, null, 2)}</pre>`;\n  } catch (e) {\n    // If parsing fails, use the raw message\n    formattedMessage = message;\n  }\n\n  messageElement.innerHTML = `<strong>${topic}:</strong> ${formattedMessage}`;\n  messagesContainer.appendChild(messageElement);\n}\n\nconnectBtn.onclick = function() {\n  console.log(\"Connect button clicked\");\n  frappe.call({\n    method: 'pibiconnect.pibiconnect.mqtt_client.start_mqtt',\n    callback: function(response) {\n      if (response && response.message) {\n        console.log(`MQTT connection started: ${response.message.status}`);\n        frappe.show_alert(`MQTT connection started: ${response.message.status} with job ID: ${response.message.job_id}`);\n        updateStatus();\n      } else {\n        console.error('Failed to start MQTT connection', response);\n        frappe.show_alert('Failed to start MQTT connection');\n      }\n    },\n    error: function(error) {\n      console.error('Failed to start MQTT connection', error);\n      frappe.show_alert('Failed to start MQTT connection');\n    }\n  });\n};\n\ndisconnectBtn.onclick = function() {\n  console.log(\"Disconnect button clicked\");\n  frappe.call({\n    method: 'pibiconnect.pibiconnect.mqtt_client.stop_mqtt',\n    args: {\n      job_name: 'mqtt_start_job'\n    },\n    callback: function(response) {\n      if (response && response.message) {\n        console.log(`MQTT connection stopped: ${response.message.status}`);\n        frappe.show_alert(`MQTT connection stopped: ${response.message.status}`);\n        updateStatus();\n      } else {\n        console.error('Failed to stop MQTT connection', response);\n        frappe.show_alert('Failed to stop MQTT connection');\n      }\n    },\n    error: function(error) {\n      console.error('Failed to stop MQTT connection', error);\n      frappe.show_alert('Failed to stop MQTT connection');\n    }\n  });\n};\n\nfunction updateStatus() {\n  frappe.call({\n    method: 'pibiconnect.pibiconnect.mqtt_client.status',\n    callback: function(response) {\n      if (response && response.message) {\n        const status = response.message.status;\n        subscriberStatus.innerText = `Subscriber Status: ${status}`;\n      } else {\n        console.error('Failed to get MQTT status', response);\n        frappe.show_alert('Failed to get MQTT status');\n      }\n    },\n    error: function(error) {\n      console.error('Failed to get MQTT status', error);\n      frappe.show_alert('Failed to get MQTT status');\n    }\n  });\n}\n\n// Ensure Frappe socket.io is loaded and initialized\nif (typeof frappe !== 'undefined' && frappe.socketio) {\n  const socket = frappe.socketio.socket;\n\n  if (socket) {\n    // Debug: Check if socket connection is established\n    console.log('Socket connection status:', socket.connected);\n\n    socket.on('connect', function() {\n      console.log('Connected to Frappe socket.io server');\n    });\n\n    socket.on('mqtt_message', function(data) {\n      console.log('MQTT message received:', data); // Debugging line\n      displayMessage(data.topic, data.payload);\n    });\n\n    socket.on('disconnect', function() {\n      console.log('Disconnected from Frappe socket.io server');\n    });\n\n    socket.on('connect_error', function(error) {\n      console.error('Connection error:', error);\n    });\n\n    socket.on('reconnect', function(attemptNumber) {\n      console.log('Reconnected to Frappe socket.io server, attempt:', attemptNumber);\n    });\n  } else {\n    console.error('Frappe socket.io socket is not defined');\n  }\n} else {\n  console.error('Frappe socket.io is not available');\n}\n\n// Automatically update status on initialization\nupdateStatus();\n",
  "style": "#custom-block {\n  position: relative;\n}\n#messages-container {\n  max-width: 100%;\n  max-height: 800px;\n  height: 800px;\n  overflow-y: auto;\n  padding: 3px;\n  margin: 0;\n  font-size: 9pt;\n  line-height: 1;\n}\n@media only screen and (max-width: 600px) {\n  #messages-container {\n    max-height: 445px; /* Set max height for smartphones */\n    height: 445px;\n    width: 100%; /* Ensure it uses full width on small screens */\n  }\n}\n.message pre {\n  background-color: #f5f5f5;\n  padding: 3px;\n  border-radius: 6px;\n  overflow-x: auto;\n}\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<div id=\"custom-block\">\n  <button id=\"conn-btn\" class=\"btn btn-sm btn-primary\">Connect</button>\n  <button id=\"disconnect-btn\" class=\"btn btn-sm btn-primary\">Disconnect</button>\n  <div id=\"mqtt-messages\" class=\"mt-3\">\n    <h3>MQTT Messages</h3>\n    <div id=\"messages-container\"></div>\n  </div>\n  <div id=\"subscriber-status\"></div>\n</div>",
  "modified": "2024-05-27 22:33:17.496420",
  "name": "CN MQTT Explorer",
  "private": 0,
  "roles": [],
  "script": "const messagesContainer = root_element.querySelector('#messages-container');\nconst subscriberStatus = root_element.querySelector('#subscriber-status');\nconst connectBtn = root_element.querySelector('#conn-btn');\nconst disconnectBtn = root_element.querySelector('#disconnect-btn');\n\nfunction displayMessage(topic, message) {\n  const messageElement = document.createElement('div');\n  messageElement.classList.add('message');\n\n  let formattedMessage;\n  try {\n    const jsonMessage = JSON.parse(message);\n    formattedMessage = `<pre class=\"mt-1\">${JSON.stringify(jsonMessage, null, 2)}</pre>`;\n  } catch (e) {\n    formattedMessage = message;\n  }\n\n  messageElement.innerHTML = `<strong>${topic}:</strong> ${formattedMessage}`;\n  messagesContainer.appendChild(messageElement);\n}\n\nconnectBtn.onclick = function() {\n  const dialog = new frappe.ui.Dialog({\n    title: 'MQTT Connection',\n    size: 'large',\n    fields: [\n      {'fieldname': 'name', 'fieldtype': 'Data', 'label': 'Name', 'reqd': 1},\n      {'fieldname': 'host', 'fieldtype': 'Data', 'label': 'Host', 'reqd': 1},\n      {'fieldname': 'username', 'fieldtype': 'Data', 'label': 'Username',},\n      {'fieldname': 'validate_cert', 'fieldtype': 'Check', 'label': 'Validate Certificate', 'default': 0},\n      {'fieldname': 'encryption', 'fieldtype': 'Check', 'label': 'Encryption (TLS)', 'default': 0},\n      {'fieldname': 'cb1', 'fieldtype': 'Column Break'},\n      {'fieldname': 'protocol', 'fieldtype': 'Select', 'label': 'Protocol', 'options': 'mqtt://\\nmqtts://', 'reqd': 1},\n      {'fieldname': 'port', 'fieldtype': 'Int', 'label': 'Port', 'reqd': 1},\n      {'fieldname': 'password', 'fieldtype': 'Password', 'label': 'Password'},\n      {'fieldname': 'client_id', 'fieldtype': 'Data', 'label': 'MQTT Client ID', 'default': `mqtt-explorer-${Math.random().toString(16).substr(2, 8)}`, 'read_only': 1},\n      {\n        'fieldname': 'advanced_section',\n        'fieldtype': 'Section Break',\n        'label': 'Advanced Settings',\n        'collapsible': 1,\n      },\n      {\n        fieldname: 'topics_table',\n        fieldtype: 'Table',\n        label: 'Topics',\n        cannot_add_rows: false,\n        cannot_delete_rows: false,\n        in_place_edit: true,\n        data: [\n          { topic: '#', qos: '0' },\n          { topic: '$SYS/#', qos: '0' }\n        ],\n        fields: [\n          {\n            fieldtype: 'Data',\n            fieldname: 'topic',\n            label: 'Topic',\n            in_list_view: 1,\n            read_only: 0\n          },\n          {\n            fieldtype: 'Select',\n            fieldname: 'qos',\n            label: 'QoS',\n            options: '0\\n1\\n2',\n            in_list_view: 1,\n            read_only: 0\n          }\n        ]\n      },\n      {\n        'fieldname': 'cert_section',\n        'fieldtype': 'Section Break',\n        'label': 'Certificates',\n        'collapsible': 1,\n      },\n      {'fieldname': 'ca_cert', 'fieldtype': 'Attach', 'label': 'CA Certificate (ca.crt)', 'column': 1},\n      {'fieldname': 'cb5', 'fieldtype': 'Column Break'},\n      {'fieldname': 'client_cert', 'fieldtype': 'Attach', 'label': 'Client Certificate (client.crt)', 'column': 1},\n      {'fieldname': 'cb6', 'fieldtype': 'Column Break'},\n      {'fieldname': 'client_key', 'fieldtype': 'Attach', 'label': 'Client Key (client.key)', 'column': 1}\n    ],\n    primary_action_label: 'Connect',\n    primary_action(values) {\n      console.log(\"Connect button clicked with values\", values);\n      \n      frappe.call({\n        method: 'pibiconnect.pibiconnect.mqtt_client.start_mqtt_args',\n        args: {\n          data: values\n        },\n        callback: function(response) {\n          if (response && response.message) {\n            console.log(`MQTT connection started: ${response.message.status}`);\n            frappe.show_alert(`MQTT connection started: ${response.message.status} with job ID: ${response.message.job_id}`);\n            updateStatus();\n            dialog.hide();\n          } else {\n            console.error('Failed to start MQTT connection', response);\n            frappe.show_alert('Failed to start MQTT connection');\n          }\n        },\n        error: function(error) {\n          console.error('Failed to start MQTT connection', error);\n          frappe.show_alert('Failed to start MQTT connection');\n        }\n      });\n    }\n  });\n\n  dialog.show();\n};\n\ndisconnectBtn.onclick = function() {\n  console.log(\"Disconnect button clicked\");\n  frappe.call({\n    method: 'pibiconnect.pibiconnect.mqtt_client.stop_mqtt',\n    args: {\n      job_name: 'mqtt_start_job'\n    },\n    callback: function(response) {\n      if (response && response.message) {\n        console.log(`MQTT connection stopped: ${response.message.status}`);\n        frappe.show_alert(`MQTT connection stopped: ${response.message.status}`);\n        updateStatus();\n      } else {\n        console.error('Failed to stop MQTT connection', response);\n        frappe.show_alert('Failed to stop MQTT connection');\n      }\n    },\n    error: function(error) {\n      console.error('Failed to stop MQTT connection', error);\n      frappe.show_alert('Failed to stop MQTT connection');\n    }\n  });\n};\n\nfunction updateStatus() {\n  frappe.call({\n    method: 'pibiconnect.pibiconnect.mqtt_client.status',\n    callback: function(response) {\n      if (response && response.message) {\n        const status = response.message.status;\n        subscriberStatus.innerText = `Subscriber Status: ${status}`;\n      } else {\n        console.error('Failed to get MQTT status', response);\n        frappe.show_alert('Failed to get MQTT status');\n      }\n    },\n    error: function(error) {\n      console.error('Failed to get MQTT status', error);\n      frappe.show_alert('Failed to get MQTT status');\n    }\n  });\n}\n\nif (typeof frappe !== 'undefined' && frappe.socketio) {\n  const socket = frappe.socketio.socket;\n\n  if (socket) {\n    console.log('Socket connection status:', socket.connected);\n\n    socket.on('connect', function() {\n      console.log('Connected to Frappe socket.io server');\n    });\n\n    socket.on('mqtt_message', function(data) {\n      console.log('MQTT message received:', data);\n      displayMessage(data.topic, data.payload);\n    });\n\n    socket.on('disconnect', function() {\n      console.log('Disconnected from Frappe socket.io server');\n    });\n\n    socket.on('connect_error', function(error) {\n      console.error('Connection error:', error);\n    });\n\n    socket.on('reconnect', function(attemptNumber) {\n      console.log('Reconnected to Frappe socket.io server, attempt:', attemptNumber);\n    });\n  } else {\n    console.error('Frappe socket.io socket is not defined');\n  }\n} else {\n  console.error('Frappe socket.io is not available');\n}\n\nupdateStatus();\n",
  "style": "#custom-block {\n  position: relative;\n}\n#messages-container {\n  max-width: 100%;\n  max-height: 545px;\n  height: 768px;\n  overflow-y: auto;\n  padding: 3px;\n  margin: 0;\n  font-size: 9pt;\n  line-height: 1;\n}\n.message pre {\n  background-color: #f5f5f5;\n  padding: 3px;\n  border-radius: 6px;\n  overflow-x: auto;\n}\n.control-label,\n.form-group {\n  margin-bottom: 1px !important;\n}"
 }
]