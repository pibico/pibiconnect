[
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<div id=\"custom-block\">\n  <button id=\"conn-btn\" class=\"btn btn-sm btn-primary\">Connect</button>\n  <button id=\"disconnect-btn\" class=\"btn btn-sm btn-primary\">Disconnect</button>\n  <div id=\"mqtt-messages\" class=\"mt-3\">\n    <h3>MQTT Messages</h3>\n    <div id=\"messages-container\"></div>\n  </div>\n  <div id=\"subscriber-status\"></div>\n</div>",
  "modified": "2024-05-27 08:50:39.881560",
  "name": "CN MQTT",
  "private": 0,
  "roles": [],
  "script": "const messagesContainer = root_element.querySelector('#messages-container');\nconst subscriberStatus = root_element.querySelector('#subscriber-status');\nconst connectBtn = root_element.querySelector('#conn-btn');\nconst disconnectBtn = root_element.querySelector('#disconnect-btn');\n\nfunction displayMessage(topic, message) {\n  const messageElement = document.createElement('div');\n  messageElement.classList.add('message');\n\n  // Check if the message is a JSON string and try to parse it\n  let formattedMessage;\n  try {\n    const jsonMessage = JSON.parse(message);\n    formattedMessage = `<pre class=\"mt-1\">${JSON.stringify(jsonMessage, null, 2)}</pre>`;\n  } catch (e) {\n    // If parsing fails, use the raw message\n    formattedMessage = message;\n  }\n\n  messageElement.innerHTML = `<strong>${topic}:</strong> ${formattedMessage}`;\n  messagesContainer.appendChild(messageElement);\n}\n\nconnectBtn.onclick = function() {\n  console.log(\"Connect button clicked\");\n  frappe.call({\n    method: 'pibiconnect.pibiconnect.mqtt_client.start_mqtt',\n    callback: function(response) {\n      if (response && response.message) {\n        console.log(`MQTT connection started: ${response.message.status}`);\n        frappe.show_alert(`MQTT connection started: ${response.message.status} with job ID: ${response.message.job_id}`);\n        updateStatus();\n      } else {\n        console.error('Failed to start MQTT connection', response);\n        frappe.show_alert('Failed to start MQTT connection');\n      }\n    },\n    error: function(error) {\n      console.error('Failed to start MQTT connection', error);\n      frappe.show_alert('Failed to start MQTT connection');\n    }\n  });\n};\n\ndisconnectBtn.onclick = function() {\n  console.log(\"Disconnect button clicked\");\n  frappe.call({\n    method: 'pibiconnect.pibiconnect.mqtt_client.stop_mqtt',\n    args: {\n      job_name: 'mqtt_start_job'\n    },\n    callback: function(response) {\n      if (response && response.message) {\n        console.log(`MQTT connection stopped: ${response.message.status}`);\n        frappe.show_alert(`MQTT connection stopped: ${response.message.status}`);\n        updateStatus();\n      } else {\n        console.error('Failed to stop MQTT connection', response);\n        frappe.show_alert('Failed to stop MQTT connection');\n      }\n    },\n    error: function(error) {\n      console.error('Failed to stop MQTT connection', error);\n      frappe.show_alert('Failed to stop MQTT connection');\n    }\n  });\n};\n\nfunction updateStatus() {\n  frappe.call({\n    method: 'pibiconnect.pibiconnect.mqtt_client.status',\n    callback: function(response) {\n      if (response && response.message) {\n        const status = response.message.status;\n        subscriberStatus.innerText = `Subscriber Status: ${status}`;\n      } else {\n        console.error('Failed to get MQTT status', response);\n        frappe.show_alert('Failed to get MQTT status');\n      }\n    },\n    error: function(error) {\n      console.error('Failed to get MQTT status', error);\n      frappe.show_alert('Failed to get MQTT status');\n    }\n  });\n}\n\n// Ensure Frappe socket.io is loaded and initialized\nif (typeof frappe !== 'undefined' && frappe.socketio) {\n  const socket = frappe.socketio.socket;\n\n  if (socket) {\n    // Debug: Check if socket connection is established\n    console.log('Socket connection status:', socket.connected);\n\n    socket.on('connect', function() {\n      console.log('Connected to Frappe socket.io server');\n    });\n\n    socket.on('mqtt_message', function(data) {\n      console.log('MQTT message received:', data); // Debugging line\n      displayMessage(data.topic, data.payload);\n    });\n\n    socket.on('disconnect', function() {\n      console.log('Disconnected from Frappe socket.io server');\n    });\n\n    socket.on('connect_error', function(error) {\n      console.error('Connection error:', error);\n    });\n\n    socket.on('reconnect', function(attemptNumber) {\n      console.log('Reconnected to Frappe socket.io server, attempt:', attemptNumber);\n    });\n  } else {\n    console.error('Frappe socket.io socket is not defined');\n  }\n} else {\n  console.error('Frappe socket.io is not available');\n}\n\n// Automatically update status on initialization\nupdateStatus();\n",
  "style": "#custom-block {\n  position: relative;\n}\n#messages-container {\n  max-width: 100%;\n  max-height: 800px;\n  height: 800px;\n  overflow-y: auto;\n  padding: 3px;\n  margin: 0;\n  font-size: 9pt;\n  line-height: 1;\n}\n@media only screen and (max-width: 600px) {\n  #messages-container {\n    max-height: 445px; /* Set max height for smartphones */\n    height: 445px;\n    width: 100%; /* Ensure it uses full width on small screens */\n  }\n}\n.message pre {\n  background-color: #f5f5f5;\n  padding: 3px;\n  border-radius: 6px;\n  overflow-x: auto;\n}\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<link rel=\"stylesheet\" href=\"/assets/pibiconnect/css/leaflet.css\">\n<div id=\"sensor-management-interface\" class=\"work-container\">\n  <div class=\"work-content\">\n    <div class=\"card works\" id=\"works\">\n      <div class=\"tab statements\">\n        <!-- Sidebar toggle button -->\n        <button class=\"tablinks hidden\" id=\"toggleSidebarButton\" title=\"Toggle Sidebar\">\n          <div class=\"icon-container\">\n            <img class=\"icon-img\" src=\"/assets/pibiconnect/images/menu-lateral.svg\"/>\n            <span class=\"icon-label\">Menú</span>\n          </div>\n        </button>\n        <!-- Existing tabs -->\n        <button class=\"tablinks\" data-tabname=\"General\" id=\"general\" title=\"General\">\n          <div class=\"icon-container\">\n            <!--<i class=\"fa fa-home\"></i>-->\n            <img class=\"icon-img\" src=\"/assets/pibiconnect/images/sensor-de-humedad.svg\"/>\n            <span class=\"icon-label\">Sensores</span>\n          </div>\n        </button>\n        <button class=\"tablinks\" data-tabname=\"LiveData\" id=\"liveData\" title=\"Live Data\">\n          <div class=\"icon-container\">\n            <img class=\"icon-img\" src=\"/assets/pibiconnect/images/analisis.svg\" />\n            <span class=\"icon-label\">Gráficas</span>\n          </div>\n        </button>\n        <button class=\"tablinks\" data-tabname=\"Reports\" id=\"reports\" title=\"Reports\">\n          <div class=\"icon-container\">\n            <img class=\"icon-img\" src=\"/assets/pibiconnect/images/advertencia.svg\"/>\n            <span class=\"icon-label\">Info</span>\n          </div>\n        </button>\n        <button class=\"tablinks\" data-tabname=\"Setup\" id=\"setup\" title=\"Setup\">\n          <div class=\"icon-container\">\n            <img class=\"icon-img\" src=\"/assets/pibiconnect/images/ajustes.svg\"/>\n            <span class=\"icon-label\">Ajustes</span>\n          </div>\n        </button>\n        <button class=\"tablinks\" data-tabname=\"Location\" id=\"location\" title=\"Location\">\n          <div class=\"icon-container\">\n            <img class=\"icon-img\" src=\"/assets/pibiconnect/images/ruta.svg\"/>\n            <span class=\"icon-label\">Posición</span>\n          </div>\n        </button>\n      </div>\n      <div id=\"General\" class=\"tabcontent\">\n        <h3>Gestión de Sensores</h3>\n        <p>Bienvenido a la Interfaz de Gestión de los Sensores Row</p>\n      </div>\n      <div id=\"LiveData\" class=\"tabcontent\">\n        <h3>Datos en Tiempo Real</h3>\n        <div id=\"liveChartContainer\" class=\"chart-container\">\n          <div id=\"liveChart\"></div>\n        </div>\n      </div>\n      <div id=\"Reports\" class=\"tabcontent\">\n        <h3>Información de Sensores</h3>\n        <div id=\"reportsList\"></div>\n      </div>\n      <div id=\"Setup\" class=\"tabcontent\">\n        <h3>Configuración</h3>\n        <div id=\"setupList\"></div>\n      </div>\n      <div id=\"Location\" class=\"tabcontent\">\n        <h3>Localizaciones</h3>\n        <div id=\"map\" style=\"width: 100%; height: 400px;\"></div>\n      </div>\n    </div>\n  </div>\n</div>",
  "modified": "2024-07-22 19:45:05.561253",
  "name": "CN Sensor Manager",
  "private": 0,
  "roles": [
   {
    "parent": "CN Sensor Manager",
    "parentfield": "roles",
    "parenttype": "Custom HTML Block",
    "role": "MIoT Administrator"
   },
   {
    "parent": "CN Sensor Manager",
    "parentfield": "roles",
    "parenttype": "Custom HTML Block",
    "role": "MIoT User"
   }
  ],
  "script": "frappe.require([\"/assets/pibiconnect/js/echarts.min.js\", \"/assets/pibiconnect/js/leaflet.js\"], function () {\n  initializeInterface();\n});\n//\nfunction initializeInterface() {\n  setupFullScreen();\n  //adjustPageHeaderVisibility();\n  setupTabNavigation();\n  setupSidebarToggle();\n  initializeLiveDataChart();\n  initializeMap();\n}\n//\nfunction setupFullScreen() {\n  let sidebarToggleButton = document.querySelector('.sidebar-toggle-btn');\n  if (sidebarToggleButton) {\n    let close = document.querySelector(\".close-sidebar\");\n    let osbar = document.querySelector(\".overlay-sidebar\");\n    let lssection = document.querySelector(\".layout-side-section\");\n    if ((close && close.style.display != \"none\") ||\n      (osbar && osbar.classList.contains('opened')) ||\n      (lssection && lssection.offsetWidth > 0 && lssection.offsetHeight > 0 && lssection.style.display != \"none\")) {\n      sidebarToggleButton.click();\n    }\n  }\n  let layoutMainSection = document.querySelector('.layout-main-section');\n  if (layoutMainSection) {\n    layoutMainSection.style.padding = \"0\";\n    layoutMainSection.style.border = \"none\";\n  }\n  let ceBlockContent = document.querySelector('.ce-block__content');\n  if (ceBlockContent) {\n    ceBlockContent.style.padding = \"0\";\n  }\n  let widget = document.querySelector('.widget.custom-block-widget-box.full-width');\n  if (widget) {\n    widget.style.padding = \"0\";\n  }\n}\n//\nfunction adjustPageHeaderVisibility() {\n  let pageHead = document.querySelector('.page-head-content');\n  if (pageHead) {\n    if (window.innerWidth <= 767) {\n      pageHead.style.display = \"none\";\n      adjustMainContentLayout(true);\n    } else {\n      pageHead.style.display = \"\";\n      adjustMainContentLayout(false);\n    }\n  }\n}\n//\nfunction adjustMainContentLayout(isHeaderHidden) {\n  let pageContent = document.querySelector('.page-content');\n  let mainSection = document.querySelector('.layout-main-section');\n  let mainSectionWrapper = document.querySelector('.layout-main-section-wrapper');\n\n  if (isHeaderHidden) {\n    if (pageContent) pageContent.style.paddingTop = \"0\";\n    if (mainSection) mainSection.style.marginTop = \"0\";\n    if (mainSectionWrapper) mainSectionWrapper.style.paddingTop = \"10px\";\n  } else {\n    if (pageContent) pageContent.style.paddingTop = \"\";\n    if (mainSection) mainSection.style.marginTop = \"\";\n    if (mainSectionWrapper) mainSectionWrapper.style.paddingTop = \"\";\n  }\n}\n//\nfunction setupTabNavigation() {\n  const tabs = root_element.querySelectorAll('.tablinks:not(#toggleSidebarButton)');\n  if (tabs.length === 0) {\n    console.error('No tab elements found');\n    return;\n  }\n  tabs.forEach(tab => {\n    tab.addEventListener('click', function (event) {\n      const tabName = this.getAttribute('data-tabname');\n      openTab(event, tabName);\n    });\n  });\n\n  const defaultTab = root_element.querySelector('#general');\n  if (defaultTab) {\n    defaultTab.click();\n  } else {\n    console.error('Default tab not found');\n  }\n}\n//\nfunction setupSidebarToggle() {\n  const toggleSidebarButton = root_element.querySelector('#toggleSidebarButton');\n  if (toggleSidebarButton) {\n    toggleSidebarButton.addEventListener('click', function (event) {\n      event.preventDefault();\n      toggleSidebar();\n    });\n  } else {\n    console.error('Sidebar toggle button not found');\n  }\n}\n//\nfunction toggleSidebar() {\n  const sidebarToggleBtn = document.querySelector('.sidebar-toggle-btn');\n  if (sidebarToggleBtn) {\n    sidebarToggleBtn.click();\n  } else {\n    console.error('Sidebar toggle button not found in the Frappe layout');\n  }\n}\n//\nfunction openTab(evt, tabName) {\n  const tabcontent = root_element.querySelectorAll(\".tabcontent\");\n  tabcontent.forEach(tab => {\n    tab.style.display = \"none\";\n  });\n\n  const tablinks = root_element.querySelectorAll(\".tablinks:not(#toggleSidebarButton)\");\n  tablinks.forEach(tab => {\n    tab.classList.remove(\"active\");\n  });\n\n  const selectedTab = root_element.querySelector(`#${tabName}`);\n  if (selectedTab) {\n    selectedTab.style.display = \"block\";\n  } else {\n    console.error(`Tab content for ${tabName} not found`);\n  }\n\n  if (evt && evt.currentTarget) {\n    evt.currentTarget.classList.add(\"active\");\n  }\n\n  if (tabName === 'LiveData') {\n    updateLiveDataChart();\n  } else if (tabName === 'Reports') {\n    loadReports();\n  } else if (tabName === 'Location') {\n    updateMap();\n  }\n}\n//\nlet chart;\nfunction initializeLiveDataChart() {\n  const chartDom = root_element.querySelector('#liveChart');\n  if (chartDom) {\n    chart = echarts.init(chartDom);\n    const option = {\n      title: {\n        text: 'Sensor Data'\n      },\n      tooltip: {\n        trigger: 'axis'\n      },\n      xAxis: {\n        type: 'category',\n        data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n      },\n      yAxis: {\n        type: 'value'\n      },\n      series: [{\n        data: [820, 932, 901, 934, 1290, 1330, 1320],\n        type: 'line'\n      }]\n    };\n    chart.setOption(option);\n    \n    // Add event listener for window resize\n    window.addEventListener('resize', function() {\n      chart.resize();\n    });\n  }\n}\n//\nfunction updateLiveDataChart() {\n  if (chart) {\n    const newData = [820, 932, 901, 934, 1290, 1330, 1320].map(() => Math.random() * 1000);\n    chart.setOption({\n      series: [{\n        data: newData\n      }]\n    });\n    chart.resize(); // Ensure chart resizes after update\n  }\n}\n//\nlet map;\nfunction initializeMap() {\n  const mapElement = root_element.querySelector('#map');\n  if (mapElement && typeof L !== 'undefined') {\n    map = L.map(mapElement).setView([43.5376186, -5.6595290], 13);\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '© OpenStreetMap contributors'\n    }).addTo(map);\n    \n    // Add initial marker\n    L.marker([43.5376186, -5.6595290]).addTo(map)\n      .bindPopup('Sensor 1')\n      .openPopup();\n  } else {\n    console.error('Map element not found or Leaflet is not loaded');\n  }\n}\n//\nfunction updateMap() {\n  if (map) {\n    map.invalidateSize();\n  } else {\n    console.error('Map is not initialized');\n  }\n}\n//\nfunction loadReports() {\n  const reportsList = root_element.querySelector('#reportsList');\n  if (reportsList) {\n    reportsList.innerHTML = `\n      <ul>\n        <li>Daily Sensor Report</li>\n        <li>Weekly Performance Analysis</li>\n        <li>Monthly Trend Report</li>\n      </ul>\n    `;\n  }\n}",
  "style": "#sensor-management-interface {\n  font-family: Arial, sans-serif;\n  width: 100%;\n  /*max-width: 1200px;*/\n  margin: 0 auto;\n}\n.work-content {\n  display: flex;\n  gap: 9px;\n}\n.card {\n  border: 1px solid #ddd;\n  padding: 6px;\n  margin-bottom: 9px;\n  border-radius: 9px;\n  background-color: rgba(255, 255, 255, 0.9); /* Add some transparency to cards */\n}\n.card.works {\n  flex-grow: 1;\n  height: calc(93vh - 150px);\n  max-height: calc(93vh - 150px);\n  overflow-y: auto;\n  padding: 15px;\n  background-image: url(\"/assets/pibiconnect/images/bg_hydrosentinel.webp\");\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n}\n.card.works::before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(255, 255, 255, 0.96);\n  z-index: 1;\n}\n.icon-img {\n  width: 30px;    \n}\n.card.works > * {\n  position: relative;\n  z-index: 2;\n}\n.icon-wrapper,\n.icon-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 6px;\n}\n.icon-btn {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 45px;\n  height: 45px;\n  padding: 0;\n  border: none;\n  border-radius: 9px;\n  background-color: #f0f0f0;\n  cursor: pointer;\n}\n.icon-btn:hover {\n  background-color: #e0e0e0;\n}\n.icon-label {\n  margin: 0;\n  padding: 0;\n  font-size: 9pt;\n  text-align: center;\n}\n.tab.statements {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 9px;\n  margin-bottom: 15px;\n}\n.tablinks {\n  background-color: rgba(255, 255, 255, 0.7);\n  color: grey;\n  border: 1px solid #ddd;\n  outline: none;\n  cursor: pointer;\n  padding: 6px 12px;\n  transition: 0.3s;\n  font-size: 12pt;\n  border-radius: 12px;\n}\n.tablinks:hover {\n  background-color: rgba(253, 231, 215, 0.9);\n  color: #94400d;\n}\n.tablinks.active {\n  background-color: rgba(253, 231, 215, 0.9);\n  color: #94400d;\n}\n.tabcontent {\n  display: none;\n  padding: 15px;\n  border: 1px solid #ddd;\n  border-radius: 9px;\n  max-height: calc(81vh - 150px);\n  background-color: rgba(255, 255, 255, 0.9);\n}\n.tabcontent.active {\n  display: block;\n}\n.chart-container {\n  width: 100%;\n  height: 400px;\n  max-height: 80vh;\n}\n#liveChart {\n  width: 100%;\n  height: 100%;\n}\n@media (max-width: 768px) {\n  .work-content {\n    flex-direction: column;\n  }\n  .card.details {\n    width: 100%;\n    display: flex;\n    justify-content: space-around;\n  }\n  .icon-wrapper {\n    width: auto;\n  }\n  .icon-img {\n    width: 21px;      \n  }\n  .tab.statements {\n    justify-content: space-around;\n  }\n  .tablinks {\n    flex: 1 1 auto;\n    text-align: center;\n  }\n  .icon-container .icon-label {\n    display: none;\n  }\n  .card.works {\n    height: calc(90vh - 150px);\n    max-height: calc(90vh - 150px);\n  }\n}"
 },
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<div id=\"custom-block\">\n  <button id=\"conn-btn\" class=\"btn btn-sm btn-primary\">Connect</button>\n  <button id=\"disconnect-btn\" class=\"btn btn-sm btn-primary\">Disconnect</button>\n  <div id=\"mqtt-messages\" class=\"mt-3\">\n    <h3>MQTT Messages</h3>\n    <div id=\"messages-container\"></div>\n  </div>\n  <div id=\"subscriber-status\"></div>\n</div>",
  "modified": "2024-05-27 22:33:17.496420",
  "name": "CN MQTT Explorer",
  "private": 0,
  "roles": [],
  "script": "const messagesContainer = root_element.querySelector('#messages-container');\nconst subscriberStatus = root_element.querySelector('#subscriber-status');\nconst connectBtn = root_element.querySelector('#conn-btn');\nconst disconnectBtn = root_element.querySelector('#disconnect-btn');\n\nfunction displayMessage(topic, message) {\n  const messageElement = document.createElement('div');\n  messageElement.classList.add('message');\n\n  let formattedMessage;\n  try {\n    const jsonMessage = JSON.parse(message);\n    formattedMessage = `<pre class=\"mt-1\">${JSON.stringify(jsonMessage, null, 2)}</pre>`;\n  } catch (e) {\n    formattedMessage = message;\n  }\n\n  messageElement.innerHTML = `<strong>${topic}:</strong> ${formattedMessage}`;\n  messagesContainer.appendChild(messageElement);\n}\n\nconnectBtn.onclick = function() {\n  const dialog = new frappe.ui.Dialog({\n    title: 'MQTT Connection',\n    size: 'large',\n    fields: [\n      {'fieldname': 'name', 'fieldtype': 'Data', 'label': 'Name', 'reqd': 1},\n      {'fieldname': 'host', 'fieldtype': 'Data', 'label': 'Host', 'reqd': 1},\n      {'fieldname': 'username', 'fieldtype': 'Data', 'label': 'Username',},\n      {'fieldname': 'validate_cert', 'fieldtype': 'Check', 'label': 'Validate Certificate', 'default': 0},\n      {'fieldname': 'encryption', 'fieldtype': 'Check', 'label': 'Encryption (TLS)', 'default': 0},\n      {'fieldname': 'cb1', 'fieldtype': 'Column Break'},\n      {'fieldname': 'protocol', 'fieldtype': 'Select', 'label': 'Protocol', 'options': 'mqtt://\\nmqtts://', 'reqd': 1},\n      {'fieldname': 'port', 'fieldtype': 'Int', 'label': 'Port', 'reqd': 1},\n      {'fieldname': 'password', 'fieldtype': 'Password', 'label': 'Password'},\n      {'fieldname': 'client_id', 'fieldtype': 'Data', 'label': 'MQTT Client ID', 'default': `mqtt-explorer-${Math.random().toString(16).substr(2, 8)}`, 'read_only': 1},\n      {\n        'fieldname': 'advanced_section',\n        'fieldtype': 'Section Break',\n        'label': 'Advanced Settings',\n        'collapsible': 1,\n      },\n      {\n        fieldname: 'topics_table',\n        fieldtype: 'Table',\n        label: 'Topics',\n        cannot_add_rows: false,\n        cannot_delete_rows: false,\n        in_place_edit: true,\n        data: [\n          { topic: '#', qos: '0' },\n          { topic: '$SYS/#', qos: '0' }\n        ],\n        fields: [\n          {\n            fieldtype: 'Data',\n            fieldname: 'topic',\n            label: 'Topic',\n            in_list_view: 1,\n            read_only: 0\n          },\n          {\n            fieldtype: 'Select',\n            fieldname: 'qos',\n            label: 'QoS',\n            options: '0\\n1\\n2',\n            in_list_view: 1,\n            read_only: 0\n          }\n        ]\n      },\n      {\n        'fieldname': 'cert_section',\n        'fieldtype': 'Section Break',\n        'label': 'Certificates',\n        'collapsible': 1,\n      },\n      {'fieldname': 'ca_cert', 'fieldtype': 'Attach', 'label': 'CA Certificate (ca.crt)', 'column': 1},\n      {'fieldname': 'cb5', 'fieldtype': 'Column Break'},\n      {'fieldname': 'client_cert', 'fieldtype': 'Attach', 'label': 'Client Certificate (client.crt)', 'column': 1},\n      {'fieldname': 'cb6', 'fieldtype': 'Column Break'},\n      {'fieldname': 'client_key', 'fieldtype': 'Attach', 'label': 'Client Key (client.key)', 'column': 1}\n    ],\n    primary_action_label: 'Connect',\n    primary_action(values) {\n      console.log(\"Connect button clicked with values\", values);\n      \n      frappe.call({\n        method: 'pibiconnect.pibiconnect.mqtt_client.start_mqtt_args',\n        args: {\n          data: values\n        },\n        callback: function(response) {\n          if (response && response.message) {\n            console.log(`MQTT connection started: ${response.message.status}`);\n            frappe.show_alert(`MQTT connection started: ${response.message.status} with job ID: ${response.message.job_id}`);\n            updateStatus();\n            dialog.hide();\n          } else {\n            console.error('Failed to start MQTT connection', response);\n            frappe.show_alert('Failed to start MQTT connection');\n          }\n        },\n        error: function(error) {\n          console.error('Failed to start MQTT connection', error);\n          frappe.show_alert('Failed to start MQTT connection');\n        }\n      });\n    }\n  });\n\n  dialog.show();\n};\n\ndisconnectBtn.onclick = function() {\n  console.log(\"Disconnect button clicked\");\n  frappe.call({\n    method: 'pibiconnect.pibiconnect.mqtt_client.stop_mqtt',\n    args: {\n      job_name: 'mqtt_start_job'\n    },\n    callback: function(response) {\n      if (response && response.message) {\n        console.log(`MQTT connection stopped: ${response.message.status}`);\n        frappe.show_alert(`MQTT connection stopped: ${response.message.status}`);\n        updateStatus();\n      } else {\n        console.error('Failed to stop MQTT connection', response);\n        frappe.show_alert('Failed to stop MQTT connection');\n      }\n    },\n    error: function(error) {\n      console.error('Failed to stop MQTT connection', error);\n      frappe.show_alert('Failed to stop MQTT connection');\n    }\n  });\n};\n\nfunction updateStatus() {\n  frappe.call({\n    method: 'pibiconnect.pibiconnect.mqtt_client.status',\n    callback: function(response) {\n      if (response && response.message) {\n        const status = response.message.status;\n        subscriberStatus.innerText = `Subscriber Status: ${status}`;\n      } else {\n        console.error('Failed to get MQTT status', response);\n        frappe.show_alert('Failed to get MQTT status');\n      }\n    },\n    error: function(error) {\n      console.error('Failed to get MQTT status', error);\n      frappe.show_alert('Failed to get MQTT status');\n    }\n  });\n}\n\nif (typeof frappe !== 'undefined' && frappe.socketio) {\n  const socket = frappe.socketio.socket;\n\n  if (socket) {\n    console.log('Socket connection status:', socket.connected);\n\n    socket.on('connect', function() {\n      console.log('Connected to Frappe socket.io server');\n    });\n\n    socket.on('mqtt_message', function(data) {\n      console.log('MQTT message received:', data);\n      displayMessage(data.topic, data.payload);\n    });\n\n    socket.on('disconnect', function() {\n      console.log('Disconnected from Frappe socket.io server');\n    });\n\n    socket.on('connect_error', function(error) {\n      console.error('Connection error:', error);\n    });\n\n    socket.on('reconnect', function(attemptNumber) {\n      console.log('Reconnected to Frappe socket.io server, attempt:', attemptNumber);\n    });\n  } else {\n    console.error('Frappe socket.io socket is not defined');\n  }\n} else {\n  console.error('Frappe socket.io is not available');\n}\n\nupdateStatus();\n",
  "style": "#custom-block {\n  position: relative;\n}\n#messages-container {\n  max-width: 100%;\n  max-height: 545px;\n  height: 768px;\n  overflow-y: auto;\n  padding: 3px;\n  margin: 0;\n  font-size: 9pt;\n  line-height: 1;\n}\n.message pre {\n  background-color: #f5f5f5;\n  padding: 3px;\n  border-radius: 6px;\n  overflow-x: auto;\n}\n.control-label,\n.form-group {\n  margin-bottom: 1px !important;\n}"
 }
]