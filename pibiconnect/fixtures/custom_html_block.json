[
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<div id=\"custom-block\">\n  <button id=\"conn-btn\" class=\"btn btn-sm btn-primary\">Connect</button>\n  <button id=\"disconnect-btn\" class=\"btn btn-sm btn-primary\">Disconnect</button>\n  <div id=\"mqtt-messages\" class=\"mt-3\">\n    <h3>MQTT Messages</h3>\n    <div id=\"messages-container\"></div>\n  </div>\n  <div id=\"subscriber-status\"></div>\n</div>",
  "modified": "2024-05-26 23:25:17.059723",
  "name": "CN MQTT",
  "private": 0,
  "roles": [],
  "script": "const messagesContainer = root_element.querySelector('#messages-container');\nconst subscriberStatus = root_element.querySelector('#subscriber-status');\nconst connectBtn = root_element.querySelector('#conn-btn');\nconst disconnectBtn = root_element.querySelector('#disconnect-btn');\n\nfunction displayMessage(topic, message) {\n  const messageElement = document.createElement('div');\n  messageElement.classList.add('message');\n  messageElement.innerHTML = `<strong>${topic}:</strong> ${message}`;\n  messagesContainer.appendChild(messageElement);\n}\n\nconnectBtn.onclick = function() {\n  console.log(\"Connect button clicked\");\n  frappe.call({\n    method: 'pibiconnect.pibiconnect.mqtt_client.start_mqtt',\n    callback: function(response) {\n      if (response && response.message) {\n        console.log(`MQTT connection started: ${response.message.status}`);\n        frappe.show_alert(`MQTT connection started: ${response.message.status} with job ID: ${response.message.job_id}`);\n        updateStatus();\n      } else {\n        console.error('Failed to start MQTT connection', response);\n        frappe.show_alert('Failed to start MQTT connection');\n      }\n    },\n    error: function(error) {\n      console.error('Failed to start MQTT connection', error);\n      frappe.show_alert('Failed to start MQTT connection');\n    }\n  });\n};\n\ndisconnectBtn.onclick = function() {\n  console.log(\"Disconnect button clicked\");\n  frappe.call({\n    method: 'pibiconnect.pibiconnect.mqtt_client.stop_mqtt',\n    args: {\n      job_name: 'mqtt_start_job'\n    },\n    callback: function(response) {\n      if (response && response.message) {\n        console.log(`MQTT connection stopped: ${response.message.status}`);\n        frappe.show_alert(`MQTT connection stopped: ${response.message.status}`);\n        updateStatus();\n      } else {\n        console.error('Failed to stop MQTT connection', response);\n        frappe.show_alert('Failed to stop MQTT connection');\n      }\n    },\n    error: function(error) {\n      console.error('Failed to stop MQTT connection', error);\n      frappe.show_alert('Failed to stop MQTT connection');\n    }\n  });\n};\n\nfunction updateStatus() {\n  frappe.call({\n    method: 'pibiconnect.pibiconnect.mqtt_client.status',\n    callback: function(response) {\n      if (response && response.message) {\n        const status = response.message.status;\n        subscriberStatus.innerText = `Subscriber Status: ${status}`;\n      } else {\n        console.error('Failed to get MQTT status', response);\n        frappe.show_alert('Failed to get MQTT status');\n      }\n    },\n    error: function(error) {\n      console.error('Failed to get MQTT status', error);\n      frappe.show_alert('Failed to get MQTT status');\n    }\n  });\n}\n\n// Ensure Frappe socket.io is loaded and initialized\nif (typeof frappe !== 'undefined' && frappe.socketio) {\n  const socket = frappe.socketio.socket;\n\n  if (socket) {\n    // Debug: Check if socket connection is established\n    console.log('Socket connection status:', socket.connected);\n\n    socket.on('connect', function() {\n      console.log('Connected to Frappe socket.io server');\n    });\n\n    socket.on('mqtt_message', function(data) {\n      console.log('MQTT message received:', data); // Debugging line\n      displayMessage(data.topic, data.payload);\n    });\n\n    socket.on('disconnect', function() {\n      console.log('Disconnected from Frappe socket.io server');\n    });\n\n    socket.on('connect_error', function(error) {\n      console.error('Connection error:', error);\n    });\n\n    socket.on('reconnect', function(attemptNumber) {\n      console.log('Reconnected to Frappe socket.io server, attempt:', attemptNumber);\n    });\n  } else {\n    console.error('Frappe socket.io socket is not defined');\n  }\n} else {\n  console.error('Frappe socket.io is not available');\n}\n\n// Automatically update status on initialization\nupdateStatus();\n",
  "style": "#custom-block {\n  position: relative;\n}\n\n#messages-container {\n  max-width: 100%;\n  max-height: 545px;\n  height: 545px;\n  overflow-y: auto;\n  padding: 3px;\n  margin: 0;\n  font-size: 10pt;\n  line-height: 1;\n}\n.message {\n  padding: 0;\n  padding-bottom: 3px;\n  height: auto;\n  border-bottom: 1px solid #ddd;\n  white-space: normal;\n}\n"
 }
]